<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何在一周内建造核心舱</title>
    <url>/2021/08/03/build-corecabin-in-one-week/</url>
    <content><![CDATA[<p>最近这段时间，我萌发了搭建一个技术博客的想法。仅仅用了一周左右的时间，我就搭建好了，并且把它取名为「卡洛的核心舱」。</p>
<span id="more"></span>
<h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1 开始"></a>1 开始</h2><p>在本学期，我开始逐渐投入到科研项目中。写代码时自然会遇到不少问题，绝大多数都是通过百度搜到他人的 CSDN 文章和个人博客文章解决了。少数问题我也是通过不断地尝试，自己排除了 bug。在这期间，部分十分宝贵的值得留存的解决方案我没有记录下来，十分可惜。</p>
<p>在项目暂告一段落后，我有了相对充足的一段时间，考虑到之前的自媒体平台不适合撰写技术文章，于是在研一的最后一个星期，我开始尝试搭建起技术博客。</p>
<p>目前主流的博客搭建方法有两种。一是 <a href="https://cn.wordpress.org/">WordPress</a> + 云服务器的模式，这种方法我尝试过，但是随着我的腾讯云云服务器学生优惠机会所剩无几，而我也可能无法承担起如此高昂的租赁费用；此外它是基于 CentOS 和 PHP 开发，对我来说不大友好，有一定的学习成本。</p>
<p>二是利用 GitHub 的 <a href="https://pages.github.com/">GitHub Pages</a> 功能，加上开源的博客框架，做出静态页面即可。我选择尝试这种方法。</p>
<p>在此之前，我参考了很多人的博客，包括本科同学 <a href="https://leiwei.xyz/">哈哈哥的博客</a> 就是基于 GitHub Pages 搭建。</p>
<h2 id="2-GitHub-Pages-和-git"><a href="#2-GitHub-Pages-和-git" class="headerlink" title="2 GitHub Pages 和 git"></a>2 GitHub Pages 和 git</h2><p>7 月 26 日，杭州的台风天还没结束，我冒着风雨到达办公室，正式开始搭建之旅。</p>
<p>我最开始试验的是 <strong>GitHub Pages</strong>。之前本科同学得意哥就用这个功能写了课设代码的前端页面。GitHub Pages 就是 GitHub 为用户提供的一个把代码转化为静态页面的一个工具，因此拿它写博客也不在话下。</p>
<p>这里值得一提的是，得益于我半年来做科研项目的过程，我对 <strong>「用git管理代码」</strong> 的方式已经非常熟悉，众多的 <code>git</code> 指令背了又背，<code>pull</code>、<code>push</code>、<code>origin</code> 之类的单词已经深入我心。它作为代码管理和版本控制的工具，虽然对于初学者可能劝退，但我却省去了学习的过程，根本不需要翻过第一座大山。</p>
<p>其实我到办公室最开始想尝试的是 Gitee Pages（科研项目用的是 <a href="https://gitee.com/">Gitee</a>，国内的基于 <code>git</code> 管理代码的网站），但当我建好仓库，传好 HTML 时，却发现：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210803-01.png" alt="绿色网络环境改造？？？"></p>
<p>于是我转向 GitHub Pages，重复过程搭建仓库后（<a href="https://github.com/kaluojushi/gyhnb">https://github.com/kaluojushi/gyhnb</a>），得到了我的 GitHub Pages 页面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210803-02.png" alt=""></p>
<p>链接是 <a href="https://kaluojushi.github.io/gyhnb">https://kaluojushi.github.io/gyhnb</a>。</p>
<p>这个 HTML 虽然简单，除了上面的 <del>nb</del> 文字外，下面甚至是 Lorem ipsum（乱数假文），但这是我 4 个月前，刚开始学习 HTML 时写出的第一个页面。</p>
<h2 id="3-域名"><a href="#3-域名" class="headerlink" title="3 域名"></a>3 域名</h2><p>我之前就注册过域名，所以也非常容易地打破了这个我小时候认为的技术壁垒。</p>
<p>为了注册一个合适的域名，我想要先起好博客的名字。很快啊，我想到一个非常极客的名字—— <strong>「核心舱」</strong>，并且在 7 月 28 日注册了 <a href="https://corecabin.cn/">corecabin.cn</a>。</p>
<blockquote>
<p>对于空间站而言，<a href="https://baike.baidu.com/item/天和核心舱">核心舱</a>（Core Cabin）是 <strong>整个空间站的中枢和管理控制中心</strong>。与此类似，我的核心舱主要存储的是与「程序」「技术」「研究」或是「音乐」等一些很酷的东西。</p>
</blockquote>
<p>绑定域名非常简单，也不需要域名备案，网上有现成的教程。于是在完成 <code>CNAME</code> 的上传后，过了 10 分钟，我就可以通过 <a href="https://corecabin.cn/">corecabin.cn</a> 而不是 <a href="https://kaluojushi.github.io/">kaluojushi.github.io</a> 去访问这个仓库的 pages 了。</p>
<h2 id="4-Hexo"><a href="#4-Hexo" class="headerlink" title="4 Hexo"></a>4 Hexo</h2><p>7 月 29 日这天有 6 场乒乓球赛。这一天，我不仅看完了每一场球赛，还基本完成了「核心舱」的搭建。</p>
<p>以 GitHub Pages 为基础的博客框架有三种，分别是 Jekyll、Hexo 和 Hugo，其中前两种用得比较多。当我看到 Jekyll 的全英文文档以及有点复杂的环境配置，我人晕了，于是劝退开始尝试 Hexo。</p>
<p><strong>Hexo</strong> 是台湾人写的，因此有比较详细的中文文档，而且环境配置比较简单，只要 <strong>Node.js 和 git</strong> 即可。</p>
<p>不得不说，再次得益于做科研，这个环境我的电脑上已经有了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210803-03.png" alt="我的科研项目开发工具文档，真是好用啊"></p>
<p>虽然中间出现了 <code>&#39;hexo&#39;不是内部或外部命令，也不是可运行的程序或批处理文件。</code> 这样愚蠢的错误，但我很快知道这是环境变量的 <code>PATH</code> 的问题，很快设置好了。hexo 的命令也很好记，难度不大，在跟着教程配置一遍后，基本搭建就完成了。</p>
<p>搭建过程中，我觉得 <strong>Hexo还是很香的</strong>，不仅支持本地运行环境，还支持一键部署，并且用到的知识或工具，比如 <code>git</code>、<code>npm</code>、Markdown 等全是打过很多次交道的很熟悉的东西了，所以我很顺利，没有遇到什么 bug。</p>
<p>基础工作既然已经完成，后面的几天里，主要就是做一些完善工作了。</p>
<ul>
<li>选了个主题 <a href="https://github.com/tufu9441/maupassant-hexo">maupassant</a>，完成了下相关的配置；</li>
<li><del>部署了 <a href="https://github.com/PaicHyperionDev/hexo-generator-search">hexo-generator-search</a> 搜索插件，可以实现文内搜索；</del></li>
<li><del>部署了 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件，可以显示文章字数与阅读时间，如本文开头所示；</del></li>
<li>部署了 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 评论插件，可以用 GitHub 账号登录留言，如本文文末所示；</li>
<li>基于 GitHub Repository、<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a> 和 <a href="https://www.jsdelivr.com/">jsDelivr</a> 搭建了个稳定的图床，本文所有图片均来自图床；</li>
<li>用 Markdown 写了一部分文章，以及一个 Markdown 文档。之前我就用 Markdown 写文档了，所以也不需要一个学习 Markdown 的过程；</li>
<li>调整了页面很多的细节，补充了一些页面。</li>
</ul>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>核心舱搭建成功了，还有些没整完的小细节可以慢慢弄。虽然这个过程中用到的都是我学过的知识，很少碰壁，但是我还是从中收获了很多：</p>
<ul>
<li>熟悉了 <del>全球最大同性交友网站</del> GitHub，以后会常用；</li>
<li>进一步熟悉了 <code>git</code>；</li>
<li>进一步熟悉了 <code>npm</code>；</li>
<li>进一步熟悉了环境变量 <code>PATH</code>；</li>
<li>进一步熟悉了 Markdown；</li>
<li>进一步熟悉了前端知识。</li>
</ul>
<p>一周时间过去，这一周我除了看看奥运比赛，从学校结束科研回家，也就在全身心投入这个事情了。但我丝毫没觉得时间被浪费，因为把时间投入自己喜欢做的事情，花再多精力也值得，尤其是我从中学习的知识、得到的收获、学会的 <strong>开源精神</strong> 和进一步的 <strong>对代码的热爱</strong>，这些不通过自己鼓捣自然是学不到的。</p>
<h2 id="2021-8-13-更新"><a href="#2021-8-13-更新" class="headerlink" title="2021.8.13 更新"></a>2021.8.13 更新</h2><p>回家后的这段时间里，我也没闲着，继续鼓捣自己的核心舱，这个过程中也发现了众多的bug，并想办法排除了它们。</p>
<ul>
<li>从主题 <a href="https://github.com/tufu9441/maupassant-hexo">maupassant</a> 换成了主题 <a href="https://github.com/theme-next/hexo-theme-next">NexT</a>，作为一个发展时间很长、被全网使用最多的、最为成熟的主题，它集成了很多插件，使得我不需要修改源代码；</li>
<li>修改了一下 favicon 及其路径，新增了 custom-logo，显示在电脑端右上角；</li>
<li>针对 NexT 主题侧边栏不显示分类与标签，新增了 <a href="\categories">分类</a> 与 <a href="/tags">标签</a> 页面，便于检索文章；</li>
<li>部署了 <a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a> 插件显示文章字数与阅读时间，如本文开头所示；</li>
<li>修改了 Hexo 渲染 Markdown 的引擎，由 <a href="https://www.npmjs.com/package/hexo-renderer-marked">hexo-renderer-marked</a> 改为 <a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a>，以及修改了部分代码，以便对数学公式的渲染达到更好的支持，可以参考这篇文章：《<a href="/2021/08/14/solve-some-problems-of-hexo-renderer-kramed-rendering-conflicts/" title="解决 hexo-renderer-kramed 渲染冲突的部分问题">解决 hexo-renderer-kramed 渲染冲突的部分问题</a>》；</li>
<li>部署了 <a href="http://ibruce.info/2015/04/04/busuanzi">busuanzi</a> 插件，用来显示文章阅读次数与网站浏览次数，如本文开头、本站底部所示；</li>
<li>部署了 <a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a> 插件，可以实现文内搜索，如侧边栏所示；</li>
<li>解决了中文目录不能跳转的 bug；</li>
<li>解决了 hexo-renderer-kramed 不能渲染 Todo List 的 bug，同样可以参考这篇文章：《<a href="/2021/08/14/solve-some-problems-of-hexo-renderer-kramed-rendering-conflicts/" title="解决 hexo-renderer-kramed 渲染冲突的部分问题">解决 hexo-renderer-kramed 渲染冲突的部分问题</a>》；</li>
<li>解决了手机端总是不能访问核心舱的 bug，可以参考这篇文章：《<a href="/2021/08/14/solve-the-problem-that-mobile-terminal-of-hexo-blog-cannot-be-accessed/" title="解决 Hexo 博客手机端无法访问的问题">解决 Hexo 博客手机端无法访问的问题</a>》；</li>
<li>通过配置 swig 文件的方式更新了友情链接的展现形式；</li>
<li>修正了因 Github RSA SSH 策略调整导致的无法部署的问题；</li>
<li>将开发环境由 Windows 切换到 Mac；</li>
<li>修正了所有正文的中英混排问题；</li>
<li>……</li>
</ul>
<p>以后也可以把更新 bug 的过程写在这篇文章里。</p>
<h2 id="参考-文献-教程"><a href="#参考-文献-教程" class="headerlink" title="参考 文献 教程"></a>参考 <del>文献</del> 教程</h2><ol>
<li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li>
<li><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa">使用hexo+github搭建免费个人博客详细教程-好记的博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎</a></li>
<li><a href="https://blog.csdn.net/heimu24/article/details/81159099">Github个人博客：绑定域名_heimu24的博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/zemprogram/article/details/104288872">个人博客搭建笔记——hexo根目录下的_config.yml配置解释_zem-CSDN博客</a></li>
<li><a href="https://www.haomwei.com/technology/maupassant-hexo.html">大道至简——Hexo简洁主题推荐 | 屠城</a></li>
<li><a href="https://blog.csdn.net/a565102223/article/details/61926629">Hexo搭建博客以及多端同步更新_Kevin的专栏-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/qq_36759224/article/details/98058240">Github+jsDelivr+PicGo 打造稳定快速、高效免费图床_TRHX’S BLOG-CSDN博客</a></li>
<li><a href="http://theme-next.iissnan.com/">NexT主题使用文档</a></li>
<li><a href="https://murphypei.github.io/blog/2019/03/hexo-render-mathjax.html">解决hexo-next主题和mathjax下划线冲突问题 | 拾荒志</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next/pull/1540/commits/ec521c927dc10255977324284c1c667f2e220da7">hexo-theme-next的PR：fix: Chinese TOC cannot jump</a></li>
<li><a href="https://github.com/hexojs/hexo-renderer-marked/pull/32">hexo-renderer-marked的PR：Add Markdown List Support</a></li>
<li><a href="https://www.liaofuzhan.com/posts/1123041323.html">Hexo NexT主题自定义友链页面 | Leaface</a></li>
<li><a href="https://blog.csdn.net/qq_42692386/article/details/129973669">HEXO部署博客内容到github报错_部署hexo时someone could be eavesdropping on you right-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/zhan13253807836/article/details/122896326">git@github.com:Permission denied(publickey).fatal: Could not read form remote repository错误_git@github.com: permission denied (publickey). fat-CSDN博客</a></li>
</ol>
]]></content>
      <categories>
        <category>Myself</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>核心舱</tag>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>工业互联网平台基本架构</title>
    <url>/2021/08/05/basic-architecture-of-industrial-internet-platform/</url>
    <content><![CDATA[<p>工业互联网平台的本质是工业云平台，它基于应用需求，搭建对工业数据采集、存储、分析和应用的模块体系，实现工业互联网辅助的生产功能 [1]。其核心由 <strong>基础设施层（IaaS）、平台层（PaaS）、应用层（SaaS）</strong> 三层组成，再加上 <strong>端层、边缘层</strong>，共同组成工业互联网平台的基本架构 [1-3]。</p>
<span id="more"></span>
<p>工业互联网平台的基本架构如下图所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/industry-internet-structure.bmp" alt="工业互联网平台基本架构 [1]"></p>
<h2 id="1-端层"><a href="#1-端层" class="headerlink" title="1 端层"></a>1 端层</h2><p>端层也称设备层 [4]，指生产现场的 <strong>各种物联网型工业设备</strong>，如数控机床、工业传感器、工业机器人等，它们贯穿产品全生命周期，分别起到生产、检测、监控等不同作用，以监测生产现场，灵活处理生产过程中的不同情况。端层以 <strong>物联网技术</strong> 为基础，产生并汇聚大量的 <strong>工业数据</strong>，包含历史数据和即时数据，也使得端层成为工业互联网平台的底层基础。但是，由于端层的工业数据来源于不同设备、不同系统，因此需要进一步处理，才能向上层传递并利用。</p>
<h2 id="2-边缘层"><a href="#2-边缘层" class="headerlink" title="2 边缘层"></a>2 边缘层</h2><p>边缘层对端层产生的工业数据进行 <strong>采集</strong>，并对不同来源的工业数据进行 <strong>协议解析和边缘处理</strong> [5]。它兼容 OPC/OPC UA、Mod-Bus 等各类工业通信协议，把采集数据进行格式转换和统一，再通过光纤、以太网等链路，将相关数据以有线或无线方式（如 5G、NB-IoT 等）远程传输到工业互联网平台。</p>
<p><strong>边缘计算技术</strong> 是边缘层的重要组成部分。它基于高性能计算芯片、实时高速处理方法、高精度计算系统等先进技术或工具支撑，在工业设备、智能终端等数据源头一侧，进行数据的先处理和预处理，提升系统反应速度和数据传输速度，解决数据传输和通信的时延问题。边缘计算的优点是具有较低的延迟以实现较短的响应时间，以及解决能源消耗、带宽负担和安全问题的潜力 [5-6]。</p>
<h2 id="3-IaaS-层"><a href="#3-IaaS-层" class="headerlink" title="3 IaaS 层"></a>3 IaaS 层</h2><p>基础设施层（IaaS）主要提供 <strong>云基础设施</strong>，如计算资源、网络资源、存储资源等，支撑工业互联网平台的整体运行 [7]。其核心是 <strong>虚拟化技术</strong>，利用分布式存储、并发式计算、高负载调度等新技术，实现资源服务设施的动态管理，提升资源服务有效利用率，也确保资源服务的安全。IaaS 层作为设备和平台应用的连接层，为 PaaS 层的功能运行和 SaaS 层的应用服务提供完整的底层基础设施服务。</p>
<h2 id="4-PaaS-层"><a href="#4-PaaS-层" class="headerlink" title="4 PaaS 层"></a>4 PaaS 层</h2><p>平台层（PaaS）是整个工业互联网平台的 <strong>核心</strong>，它由云计算技术构建，不仅能接收存储数据，还能提供强大的计算环境，对工业数据进行云处理或云控制 [8]。它的根本是在 IaaS 平台上构建了一个 <strong>扩展性强的支持系统</strong>，也为工业应用或软件的开发提供了良好的基础平台 [5]。</p>
<p>PaaS 层能以平台优势，利用数据库、算法分析等技术，实现数据进一步处理与计算、数据存储、应用或微服务开发等功能，以叠加、扩展的方式提供工业应用开发、部署的基础环境，形成完整度高、定制性好、移植复用程度高的 <strong>工业操作系统</strong> [9]。PaaS 层还能根据业务进行资源调度，也能保障数据接入、平台运营、接口访问的安全机制，保障业务正常开展。</p>
<h2 id="5-SaaS-层"><a href="#5-SaaS-层" class="headerlink" title="5 SaaS 层"></a>5 SaaS 层</h2><p>应用层（SaaS）是工业互联网平台的 <strong>关键</strong>，它是对外服务的关口，与用户直接对接，体现了工业数据最终的应用价值。SaaS 层基于 PaaS 层平台上丰富的工业微服务功能模块，以高效、便捷、多端适配等方式实现传统信息系统的云改造 [10]，为平台用户提供各类工业 APP 等 <strong>数字化解决方案</strong>，发展大数据分析等综合应用，实现资源集中化、服务精准化、知识复用化。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 周志勇,任涛林,孙明,等. 工业互联网平台体系架构及应用研究[J]. 中国仪器仪表, 2021, 363(6): 45-50.</p>
<p>[2] 李君,邱君降,柳杨,等. 工业互联网平台评价指标体系构建与应用研究[J]. 中国科技论坛, 2018, 272(12): 70-86.</p>
<p>[3] Sebastian r. bader,Maria maleshkova,Steffen lohmann. Structuring Reference Architectures for the Industrial Internet of Things[J]. Future Internet, 2019, 11(7).</p>
<p>[4] 蒋融融,翁正秋,陈铁明. 工业互联网平台及其安全技术发展[J]. 电信科学, 2020, 36(3): 3-10.</p>
<p>[5] 孙小东,王劲松,李强,等. 工业互联网平台的架构设计[J]. 工业加热, 2020, 49(5): 48-50, 54.</p>
<p>[6] Tong zhang,Yikai li,C. l. philip chen. Edge computing and its role in Industrial Internet: Methodologies, applications, and future directions[Z]: Information Sciences, 2021: 0-0.</p>
<p>[7] 邵鸣. 面向铁路的工业互联网平台体系架构研究[J]. 铁路计算机应用, 2019, 28(1): 68-72.</p>
<p>[8] 李达,郑松. 基于数据引擎技术的工业互联网平台[J]. 智能科学与技术学报, 2020, 2(1): 43-52.</p>
<p>[9] 杨祖业,李媛,马秀丽. 面向智能装备的工业互联网平台参考架构[J]. 中国仪器仪表, 2019, 339(6): 31-36.</p>
<p>[10] 邓生雄,杨廷玮泞,张昌福,等. 基于工业互联网平台的企业数字化规划及架构[J]. 新技术新工艺, 2020, 394(10): 5-8.</p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>研究</tag>
        <tag>工业互联网</tag>
        <tag>工业互联网平台</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>我真的要走这条路吗？</title>
    <url>/2022/02/28/do-i-really-want-to-go-this-way/</url>
    <content><![CDATA[<p>新的学期来临了，压力也在日益增加，不知道什么时候才能收获努力的结果。</p>
<p>刚好今天是 2 月的最后一天，不如总结一下，研究生以来我的学习工作顺不顺利。</p>
<span id="more"></span>
<h2 id="1-code-学习"><a href="#1-code-学习" class="headerlink" title="1 code 学习"></a>1 code 学习</h2><p>在研究生入学之前，我也有过一段迷茫期，当时完全不清楚互联网有哪些岗位，需要做些什么。我对编程语言的认知还只停留在题目与实验上，没有任何建设性的了解。当时我也许觉得 PTA 或者计算机二级算是 NB 的成就，但与他人的差距其实非常明显。</p>
<p>2021 年的 3 月，我正式进入课题组，给到了 <strong>「工业互联网」</strong> 的研究方向。这时在课题组的大背景（开发常选 Java 而非 C#）下，我开始尝试学习 Java。</p>
<p>后来，2021 年 4 月，导师给了我们一个项目「某机床厂的远程运维平台」，并让我负责 <strong>前端开发</strong>。这时我开始跟着 MOOC 学习 HTML、CSS 和 JavaScript 最基础的部分，以及跟着 B 站学 Vue。后来的时间实在是不够我学习了，我只能参考若依的源码，边学边查边做。遇到一些超纲的 bug，例如经常出现变量找不到属性的问题，就直接百度解决了。</p>
<p>当时也是速成，所以我觉得学习效果并不好，很多基础的东西我说不出所以然来。于是从 2021 年 8 月，在项目告一段落、有了相对充足的时间后，我开始从头整理 Java、HTML、CSS 等等的学习笔记。这个进度其实非常慢，再加上在 Java 耽误了时间，以及研二本身的科研工作，直到现在我也才整理到 CSS。</p>
<p>学习的选择很多，使得我一直犹豫不敢深入。即使是在项目里负责前端开发后，我也没有想清楚以后到底要深入学习什么、朝什么方向努力。</p>
<p>大概到 11、12 月，我才真正下定决心确定了 <strong>前端开发岗</strong> 的目标。但现在要问我自己真正做好准备了吗，我估计还没有。</p>
<h2 id="2-刷题"><a href="#2-刷题" class="headerlink" title="2 刷题"></a>2 刷题</h2><p>由于我一直没有目标，导致我刷题很晚，我甚至不知道用什么语言刷题。</p>
<p>直到 2012 年 12 月，我才开始用 JavaScript 刷每日一题。而且直到上周，我才开始做力扣周赛。</p>
<p>由于 JavaScript 本身是脚本语言，并没有其他语言的数据结构，所以对于一些特定的题目，用它写没有那么方便，甚至官方题解都不给 JavaScript 的解法。</p>
<p>相比其他人，我估计自己的水平还很低，一些硬磕算法的题目（如二分法、dfs、dp 等），我也几乎是不看题解就做不出来。<strong>这种最需要时间来熬的东西，却发现时间已经不够了，这是十分可怕的一件事情。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220228-01.png" alt="力扣的提交记录"></p>
<p>（1 月还拿了个全勤徽章，2 月寒假期间摸了几天，CV 都懒得 CV，拿不到徽章了 555</p>
<p>好在我现在已经开始着手整理我的题解，并打算抽出一定的时间来对算法做整理。</p>
<h2 id="3-实习"><a href="#3-实习" class="headerlink" title="3 实习"></a>3 实习</h2><p>最近学习了一个词，叫 peer pressure，意思是 <strong>同辈压力</strong>，当身边的人都显得比自己优秀时，自己的压力就会陡增，以至于与其他人的差距越来越大。</p>
<p>现在就是如此，当身边的人都开始疯狂发内推、面试、实习时，自己却还没有一点进展，这是让人最慌的。</p>
<p>这几天，我仔细看了看我之前做的那个项目的前端部分（得益于我 10 月份写的两篇 <strong>前端技术总结</strong>），也在完善我的简历，希望到时候问到项目的时候能对答如流。这也是相比其他人的一丁点优势，起码自己是真的弄了点东西出来。</p>
<p>当然，从我看的一点面经来说，光有 <strong>Experience</strong> 也不够，<strong>Skill</strong> 也就是最基础的东西他还是会问的，即使是与前端关系不大的数据结构与算法、操作系统、计网等等。这些对于非科班的我来说着实是几座大山，只希望自己在接下来的半年里好好准备吧。</p>
<p>那在此立下一个 flag：<strong>3 月 10 日之前</strong> 不仅要完成完善自己的实习简历，更要把理想的都投出去。</p>
<h2 id="4-科研"><a href="#4-科研" class="headerlink" title="4 科研"></a>4 科研</h2><p>终于说到了研究生生活最重要的一环了。</p>
<p>我所在的课题组不是科研导向的课题组，不太需要做实验，所以导师给的研究方向是比较模糊的。2021 年 3 月的时候，只给了「工业互联网」的大方向。后来就被拉去做了几个横向项目，这些项目基本都是半年做完的小项目，课题组和企业合作一下，我们几个学生打打工，干干活，基本上就结束了。</p>
<p>2021 年 10 月底，由于研究生生活过半，要准备开题报告的撰写，且研二下学期要准备毕业课题的研究，这时导师给我们分了比较细致的方向。我的方向是「<strong>数控滚齿加工</strong> 的智能化发展及工业互联网、人工智能等信息化技术在数控滚齿加工中的应用」。</p>
<p>几个月来，我看了很多论文，也在 2022 年 1 月写完了八千字的 <strong>开题报告</strong>，但我还是困惑很多事情，当时打算开题报告之前找导师仔细聊一聊也没去。之前组会汇报过这个方向，但大家说这个研究很难突出创新性，导致我不知道把研究的重点放在哪里。我们不是其他课题组那种做实验、调数据、发论文的类型，之前做的项目也太应用化了在学术研究上没有什么技术突破，每个人单打独斗的风格也让自己匮乏的知识面得以尽显。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220228-02.png" alt="Zotero 中看的论文"></p>
<p>现在快 3 月了，6 月之前还需要进行中期进展答辩，自己还在科研上想破了头，更可怕的是现在还没有什么时间和动力，没法一心多用。</p>
<p>或许我真的不适合搞科研，但现在的自己也只能努力吧。</p>
<p>再立 flag：在实习找到之后，<strong>在 4 月底之前</strong>，取得一点决定性的突破，并且搞定专利或软著！</p>
<h2 id="5-最后说点什么"><a href="#5-最后说点什么" class="headerlink" title="5 最后说点什么"></a>5 最后说点什么</h2><p>可以看出来，去年到今年的研究生生活碰了很多壁，很大多数是我的性格特点/缺点造成的。</p>
<ol>
<li>拖延，不用说了，失去了很多时间和机会</li>
<li>焦虑，这个焦虑来源于自己本身的不作为和外界的压力</li>
<li>逃避，和拖延一样的起因，遇到不太想做的，就去逃避它</li>
</ol>
<p>之后还是要继续努力，也不指望自己一定能改掉这些或是非要与他人比肩，毕竟比以前的自己厉害一点就是了不得的成绩了。</p>
<p>俗话说得好，<strong>芝麻开花节节高</strong>。</p>
]]></content>
      <categories>
        <category>Myself</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>研究</tag>
        <tag>2022</tag>
        <tag>编程</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客写作</title>
    <url>/2021/08/03/hexo-blog-writing/</url>
    <content><![CDATA[<p>记录本博客的撰写过程，便于日后按图索骥。</p>
<span id="more"></span>
<h2 id="1-环境配置（新环境）"><a href="#1-环境配置（新环境）" class="headerlink" title="-1 环境配置（新环境）"></a>-1 环境配置（新环境）</h2><p>首先从 <a href="https://github.com/kaluojushi/kaluojushi.github.io">代码仓</a> 克隆代码到本地。</p>
<p>然后参考 <a href="https://hexo.io/zh-cn/docs/">hexo 官方文档</a> 完成环境配置。</p>
<p>最后执行 <code>npm install</code> 安装局部依赖。</p>
<div class="note warning">
            <p><strong>相关注意事项：</strong></p><ol><li>注意 <a href="https://hexo.io/zh-cn/docs/#Node-js-%E7%89%88%E6%9C%AC%E9%99%90%E5%88%B6">Node.js 版本限制</a>，选择与 Node.js 版本匹配的 Hexo 版本。</li><li>注意 <code>package.json</code> 内相关插件版本，应与 latest 版本尽量保持一致，否则可能因相关插件 EOL 而报错。</li><li>如果是 Mac 环境且选择使用 <code>hexo-cli</code> 配置全局环境，需要获取系统权限后安装：<code>sudo npm install -g hexo-cli</code>。</li></ol>
          </div>
<h2 id="0-同步远程仓库（多端）"><a href="#0-同步远程仓库（多端）" class="headerlink" title="0 同步远程仓库（多端）"></a>0 同步远程仓库（多端）</h2><p>在当前电脑的 <code>kaluojushi.github.io</code> 文件夹（已 <code>git init</code> 和 <code>remote</code>，否则参考第 -1 节）下的 <code>hexo</code> 分支，依次执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull origin hexo</span><br></pre></td></tr></table></figure>
<p>以拉取远程仓库代码。</p>
<p>这个操作也可以通过 IDE 或 <a href="https://desktop.github.com/">GitHub Desktop</a> 进行，而且更推荐！</p>
<h2 id="1-清除缓存"><a href="#1-清除缓存" class="headerlink" title="1 清除缓存"></a>1 清除缓存</h2><p>根目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>清除 <code>/public</code>、<code>/db.json</code> 等缓存。</p>
<p>可做可不做，但当页面改动较大时，或拉了代码时，建议做一下。</p>
<h2 id="2-新建-md-文档"><a href="#2-新建-md-文档" class="headerlink" title="2 新建 md 文档"></a>2 新建 md 文档</h2><p>下述 <code>hexo new</code> 均可缩写为 <code>hexo n</code>。</p>
<h3 id="2-1-新建文章"><a href="#2-1-新建文章" class="headerlink" title="2.1 新建文章"></a>2.1 新建文章</h3><p>根目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [post] <span class="string">&quot;postName&quot;</span></span><br></pre></td></tr></table></figure>
<p>根目录会在 <code>/source/_posts</code> 下新建文件 <code>postName.md</code>，通常采用英文命名 <code>postName</code>。</p>
<h3 id="2-2-新建页面"><a href="#2-2-新建页面" class="headerlink" title="2.2 新建页面"></a>2.2 新建页面</h3><p>根目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">&quot;pageName&quot;</span></span><br></pre></td></tr></table></figure>
<p>根目录会在 <code>/source/pageName</code> 下新建文件 <code>index.md</code>。</p>
<p>若要生成二级页面，则根目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page --path about/me <span class="string">&quot;pageTitle&quot;</span> <span class="comment"># --path可缩写为-p</span></span><br></pre></td></tr></table></figure>
<p>根目录会在 <code>/source/about</code> 下新建文件 <code>me.md</code>，并将 <code>title</code> 命名为 <code>pageTitle</code>，<strong>注意 <code>title</code> 必须指定</strong>。</p>
<h3 id="2-3-新建草稿"><a href="#2-3-新建草稿" class="headerlink" title="2.3 新建草稿"></a>2.3 新建草稿</h3><p>根目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;draftName&quot;</span></span><br></pre></td></tr></table></figure>
<p>根目录会在 <code>/source/_drafts</code> 下新建文件 <code>draftName.md</code>。</p>
<p>发表草稿时，用 <code>publish</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish [post/page] &lt;fileName&gt;</span><br></pre></td></tr></table></figure>
<p>一般不用新建草稿这个操作，因为可以先写好 Markdown 然后再 <code>new post</code> 就好。</p>
<h2 id="3-编辑-Front-matter"><a href="#3-编辑-Front-matter" class="headerlink" title="3 编辑 Front-matter"></a>3 编辑 Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，一般来说完整应如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: postTitle # 标题，默认为文件名，一般会自行更改为中文的</span><br><span class="line">date: 2021/08/01 11:45:14 # 建立日期</span><br><span class="line">updated: # 更新日期</span><br><span class="line">categories: # 分类（page 不适用）</span><br><span class="line">tags: # 标签（page 不适用）</span><br><span class="line">type: # 页面类型（仅 page）</span><br><span class="line">description: # 摘要，详细见第 4 节</span><br><span class="line">comments: true # 评论，默认为 true</span><br><span class="line">layout: post # 布局，默认为 post</span><br><span class="line"><span class="section">mathjax: false # LaTeX 公式，默认为 false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-标题"><a href="#3-1-标题" class="headerlink" title="3.1 标题"></a>3.1 标题</h3><p>Hexo 会把 Markdown 文档转化为 HTML 静态网页，因此要想实现文章标题与域名不同，可以通过以下方法：</p>
<ul>
<li>文件名为 <code>英文标题.md</code> 的形式。<ul>
<li><em>根据谷歌文档，建议使用 <code>-</code> 分隔单词，而不是 <code>_</code> 或驼峰式。</em></li>
</ul>
</li>
<li>Front-matter 的 <code>title</code> 为实际的中文标题。</li>
</ul>
<p>这样文章域名就为 <code>英文.html</code>，而标题为中文。</p>
<h3 id="3-2-日期"><a href="#3-2-日期" class="headerlink" title="3.2 日期"></a>3.2 日期</h3><ul>
<li><code>date</code>：建立日期，自动生成，默认为 Markdown 文档建立日期。</li>
<li><code>updated</code>：更新日期，不自动生成，但 NexT 主题会自动读取文档修改日期；可以自行添加或修改。</li>
</ul>
<h3 id="3-3-分类"><a href="#3-3-分类" class="headerlink" title="3.3 分类"></a>3.3 分类</h3><p>单分类很简单，直接跟后面就行：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">categories: Diary</span><br></pre></td></tr></table></figure>
<p>表示分类为 Diary。</p>
<p>子分类用逗号表示，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">categories: [Diary, Life]</span><br></pre></td></tr></table></figure>
<p>表示分类为 Diary 的子分类 Life。<em>别忘了方括号，否则会被理解为一个分类，名为「Diary, Life」。</em></p>
<p>并列分类则使用列表形式，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">	-</span> [Diary]</span><br><span class="line"><span class="bullet">	-</span> [Life]</span><br><span class="line"><span class="bullet">	-</span> [Music, Piano]</span><br></pre></td></tr></table></figure>
<p>表示分类分别为「Diary」、「Life」和「Music 的子分类 Piano」这三个分类。</p>
<p><del>好麻烦，所以应当提前有一个大体的分类思路。</del></p>
<h3 id="3-4-标签"><a href="#3-4-标签" class="headerlink" title="3.4 标签"></a>3.4 标签</h3><p>单标签也是直接输入就行。</p>
<p>多标签有以下两种表示方法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags: [C, Java, python]</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line"><span class="bullet">	-</span> C</span><br><span class="line"><span class="bullet">	-</span> Java</span><br><span class="line"><span class="bullet">	-</span> python</span><br></pre></td></tr></table></figure>
<p><strong>注意：设置分类、标签列表</strong></p>
<p>打开根目录的 <code>_config.yml</code>，对下面代码进行更改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">	<span class="string">编程:</span> <span class="string">programming</span></span><br><span class="line">	<span class="string">生活:</span> <span class="string">life</span></span><br><span class="line">	<span class="string">其他:</span> <span class="string">other</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br></pre></td></tr></table></figure>
<p>则可以更改对应分类、标签的访问路径。</p>
<h3 id="3-5-页面类型（NexT-主题）"><a href="#3-5-页面类型（NexT-主题）" class="headerlink" title="3.5 页面类型（NexT 主题）"></a>3.5 页面类型（NexT 主题）</h3><p>对于 page，可以设置 <code>type</code> 为有关类型：</p>
<ul>
<li><code>type: categories</code>：分类页面。</li>
<li><code>type: tags</code>：标签页面。</li>
<li><code>type: links</code>：友链页面，为自己添加，参考<a href="https://www.liaofuzhan.com/posts/1123041323.html">此文</a>。</li>
</ul>
<h3 id="3-6-评论"><a href="#3-6-评论" class="headerlink" title="3.6 评论"></a>3.6 评论</h3><p>将 <code>comments</code> 设置为 <code>true</code> 即可，默认即为 <code>true</code>，所以可以不加这一条。</p>
<p>如果要关闭评论，则设置 <code>false</code> 即可。</p>
<p>page 的 <code>comments</code> 也是默认开启的，包括categories页面和tags页面！！！</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">comments: true</span><br></pre></td></tr></table></figure>
<h3 id="3-7-layout"><a href="#3-7-layout" class="headerlink" title="3.7 layout"></a>3.7 <code>layout</code></h3><p>对于 post，<code>layout</code> 默认为 <code>post</code>，因此一般不加。</p>
<p>对于 page，建议是在 new 完后，在 <code>index.md</code> 的 Front-matter 加上 <del>（好像不加也行）</del>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">layout: page</span><br></pre></td></tr></table></figure>
<p>以下设置不适用 NexT 主题，因此划掉。</p>
<p><del>如果设置为 <code>layout: tagcloud</code> 则为标签云页面。</del></p>
<p><del>如果设置为 <code>layout: timeline</code> 则为时间线页面，具体在 <code>theme</code> 的 <code>_config.yml</code> 设置。</del></p>
<p><del>如果设置为 <code>layout: single-column</code> 则为单栏页面。</del></p>
<h3 id="3-8-数学公式"><a href="#3-8-数学公式" class="headerlink" title="3.8 数学公式"></a>3.8 数学公式</h3><p>将 <code>mathjax</code> 设置为 <code>true</code> 即可。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure>
<h2 id="4-正文书写"><a href="#4-正文书写" class="headerlink" title="4 正文书写"></a>4 正文书写</h2><p>使用 Markdown 正常书写即可，参见《<a href="/2021/08/04/markdown-basic-syntax-and-examples/" title="Markdown 基本语法与示例">Markdown 基本语法与示例</a>》。</p>
<p><strong>注意文中不要出现两个大括号，或大括号与井号相连等与渲染语法冲突的情况。</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#125;&#125; # Bad</span><br><span class="line">&#125; &#125; # Good</span><br><span class="line">&#123;# # Bad</span><br><span class="line">&#123; # # Good</span><br></pre></td></tr></table></figure>
<h3 id="4-1-摘要"><a href="#4-1-摘要" class="headerlink" title="4.1 摘要"></a>4.1 摘要</h3><p>文章摘要有三种提取方法，优先级从高到低：</p>
<ul>
<li><p>提取Front-matter的 <code>description</code> 内容。<em>文字不多时用这种。</em></p>
</li>
<li><p>在文章合适部分加上 <code>&lt;!--more--&gt;</code>，文章会被自动截断。<em>一般情况下或文字较多时用这种。</em></p>
</li>
<li><p>根据主题配置文件中的如下代码自动生成摘要。<em>不要用这种，观感会很差。</em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">	<span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-2-标签插件"><a href="#4-2-标签插件" class="headerlink" title="4.2 标签插件"></a>4.2 标签插件</h3><p>标签插件用于在正文中以 <code>&#123;&#125;</code> 加 <code>%</code> 的格式，输入特定内容。</p>
<h4 id="4-2-1-引用块"><a href="#4-2-1-引用块" class="headerlink" title="4.2.1 引用块"></a>4.2.1 引用块</h4><p>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<p><strong>普通引用块</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">闻在宥天下，不闻治天下也。</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>闻在宥天下，不闻治天下也。</p>
</blockquote>
<p><strong>引用加作者、来源</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote 庄子, 《庄子·外篇·在宥》 %&#125;</span><br><span class="line">闻在宥天下，不闻治天下也。</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>闻在宥天下，不闻治天下也。</p>
<footer><strong>庄子</strong><cite>《庄子·外篇·在宥》</cite></footer></blockquote>
<p><strong>引用自网址</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote @央视新闻 https://weibo.com/2656274875/Kt4FMdzB5?from=page_1002062656274875_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1628758139404 新浪微博 %&#125;</span><br><span class="line">8月11日0-24时，湖北省新增新冠肺炎确诊病例10例。</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>8月11日0-24时，湖北省新增新冠肺炎确诊病例10例。</p>
<footer><strong>@央视新闻</strong><cite><a href="https://weibo.com/2656274875/Kt4FMdzB5?from=page_1002062656274875_profile&wvr=6&mod=weibotime&type=comment#_rnd1628758139404">新浪微博</a></cite></footer></blockquote>
<p><strong>NexT 还支持居中引用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% centerquote %&#125;</span><br><span class="line">Tomorrow will be fine.</span><br><span class="line">&#123;% endcenterquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <p>Tomorrow will be fine.</p>

          </blockquote>
<h4 id="4-2-2-代码块"><a href="#4-2-2-代码块" class="headerlink" title="4.2.2 代码块"></a>4.2.2 代码块</h4><p>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<p><strong>普通代码块</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure>
<p><strong>指定语言</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock lang:javascript %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>代码标题、网址</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock time.js http://jsrun.net/new 在线运行 %&#125;</span><br><span class="line">var time = new Date();</span><br><span class="line">console.log(time);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>time.js</span><a href="http://jsrun.net/new">在线运行</a></figcaption><table><tr><td class="code"><pre><span class="line">var time = new Date();</span><br><span class="line">console.log(time);</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-图片"><a href="#4-2-3-图片" class="headerlink" title="4.2.3 图片"></a>4.2.3 图片</h4><p>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure>
<p><strong>固定大小的图片</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% img https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/kongjianzhan.jpg 200 100 &#x27;&quot;中国空间站&quot; &quot;天和核心舱&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/kongjianzhan.jpg" class="" width="200" height="100" title="中国空间站" alt="天和核心舱">
<h4 id="4-2-4-iFrame"><a href="#4-2-4-iFrame" class="headerlink" title="4.2.4 iFrame"></a>4.2.4 iFrame</h4><p>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
<p><strong>嵌入网易云音乐播放器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% iframe //music.163.com/outchain/player?type=2&amp;id=1425676569&amp;auto=0&amp;height=66 330 86 %&#125;</span><br></pre></td></tr></table></figure>
<iframe src="//music.163.com/outchain/player?type=2&id=1425676569&auto=0&height=66" width="330" height="86" frameborder="0" loading="lazy" allowfullscreen></iframe>
<p>其实直接放 HTML 的 <code>&lt;iframe&gt;</code> 代码也可以：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=1425676569&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1425676569&auto=0&height=66"></iframe>

<p><strong>嵌入 Bilibili 视频播放器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% iframe //player.bilibili.com/player.html?isOutside=true&amp;aid=92523122&amp;bvid=BV1eE411H7XL&amp;cid=157973222&amp;p=1 %&#125;</span><br></pre></td></tr></table></figure>
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=92523122&bvid=BV1eE411H7XL&cid=157973222&p=1" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>
<h4 id="4-2-5-引用文章"><a href="#4-2-5-引用文章" class="headerlink" title="4.2.5 引用文章"></a>4.2.5 引用文章</h4><p>引用其他文章的链接，语法为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure>
<p><strong>链接使用文章标题</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link build-corecabin-in-one-week %&#125;</span><br></pre></td></tr></table></figure>
<a href="/2021/08/03/build-corecabin-in-one-week/" title="如何在一周内建造核心舱">如何在一周内建造核心舱</a>
<p><strong>链接使用自定义文字</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link build-corecabin-in-one-week &#x27;点击进入文章&#x27;%&#125;</span><br></pre></td></tr></table></figure>
<a href="/2021/08/03/build-corecabin-in-one-week/" title="如何在一周内建造核心舱">点击进入文章</a>
<p><strong>标题特殊字符转义、禁止转义（false）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-4-released &#x27;How to use &lt;b&gt; tag in title&#x27; %&#125;</span><br><span class="line">&#123;% post_link hexo-4-released &#x27;&lt;b&gt;bold&lt;/b&gt; custom title&#x27; false %&#125;</span><br></pre></td></tr></table></figure>
<p>示例略</p>
<h4 id="4-2-6-Bootstrap-Callout（NexT-主题）"><a href="#4-2-6-Bootstrap-Callout（NexT-主题）" class="headerlink" title="4.2.6 Bootstrap Callout（NexT 主题）"></a>4.2.6 Bootstrap Callout（NexT 主题）</h4><p>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p><code>class_name</code> 可以设置为 <code>default</code>、<code>primary</code>、<code>success</code>、<code>info</code>、<code>warning</code> 或 <code>danger</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note defalut %&#125; **defalut** &#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary %&#125; **primary** &#123;% endnote %&#125;</span><br><span class="line">&#123;% note success %&#125; **success** &#123;% endnote %&#125;</span><br><span class="line">&#123;% note info %&#125; **info** &#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning %&#125; **warning** &#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger %&#125; **danger** &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note defalut">
            <p><strong>defalut</strong> </p>
          </div>
<div class="note primary">
            <p><strong>primary</strong> </p>
          </div>
<div class="note success">
            <p><strong>success</strong> </p>
          </div>
<div class="note info">
            <p><strong>info</strong> </p>
          </div>
<div class="note warning">
            <p><strong>warning</strong> </p>
          </div>
<div class="note danger">
            <p><strong>danger</strong> </p>
          </div>
<h2 id="5-发布"><a href="#5-发布" class="headerlink" title="5 发布"></a>5 发布</h2><p>根目录下依次执行 hexo 三连：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># 生成静态 HTML 到 public 文件夹</span></span><br><span class="line">$ hexo server <span class="comment"># 生成预览窗口（localhost:4000，Ctrl+C 停止）</span></span><br><span class="line">$ hexo deploy <span class="comment"># 部署到 Github（自动上传 public 代码到 main 分支）</span></span><br></pre></td></tr></table></figure>
<p>也可以缩写成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>大功告成！</p>
<h2 id="6-备份代码（多端）"><a href="#6-备份代码（多端）" class="headerlink" title="6 备份代码（多端）"></a>6 备份代码（多端）</h2><p>根目录下依次执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;comments&quot;</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure>
<p>以更新远程仓库代码。</p>
<p>这个操作也可以通过 IDE 或 <a href="https://desktop.github.com/">GitHub Desktop</a> 进行，而且更推荐！</p>
<h2 id="7-多端管理说明"><a href="#7-多端管理说明" class="headerlink" title="7 多端管理说明"></a>7 多端管理说明</h2><p><del>考虑到适用 GitHub 托管 Hexo 源码存在或多或少的问题，尤其是 <code>git pull</code> 和 <code>git push</code> 与GitHub连接的加载速度太慢（因为办公室非 Chrome 时科学上网比较困难），所以可以使用如下方法：</del></p>
<ul>
<li><p><del>当临时出差时：</del></p>
<p><del>用 Markdown 写作，回来再 <code>new post</code>。</del></p>
</li>
<li><p><del>当长期不在时：</del></p>
<p><del>将整个 <code>hexo</code> 用 U 盘或其他方式拷贝到笔记本上（反正也才几十 Mb），然后在笔记本已安装 hexo、设置好 GitHub SSH 密钥的情况下，执行 <code>npm install</code> 即可。此时可以通过 <code>hexo s</code> 查看是否成功。</del></p>
</li>
<li><p><del>移动端时：</del></p>
<p><del>用 Simplenote 写 Markdown，回来再 <code>new post</code>。好像也有其他方法，但暂时不用。</del></p>
</li>
</ul>
<p><strong>以上内容现已不适用。</strong></p>
<p>目前核心舱的资源和代码已经分别进行远程管理，资源通过坚果云同步，代码通过 GitHub 同步，这是目前在多台电脑管理 Hexo 比较合适的方式。</p>
<p>因此多端管理 Hexo 时，仅需同步 GitHub 仓库的 <code>hexo</code> 分支即可，资源通过坚果云自动同步，静态页面通过 <code>hexo d</code> 部署。移动端通过坚果云或语雀临时存储文稿就行。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>技术</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>开发某机床厂远程运维平台的前端技术总结（2）</title>
    <url>/2021/10/29/frontend-technical-summary-of-developing-remote-operation-and-maintenance-platform-of-a-machine-tool-factory-2/</url>
    <content><![CDATA[<p>在昆山团队退出后，我们还额外负责了原来昆山做的【工作台】、【统计报表】部分。本文的代码在他们的基础上开发，大部分我做了一定幅度的改动。</p>
<span id="more"></span>
<h2 id="4-统计报表"><a href="#4-统计报表" class="headerlink" title="4 统计报表"></a>4 统计报表</h2><p>【统计报表】模块用于展示该公司的设备销售数据或故障数据。从这里开始，其实已经是纯前端工作，之后用到了大量的图表，我都是使用 <a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a> 进行开发的。</p>
<p>我负责【统计报表】-【统计分析】的【设备分析】部分，即分析公司在每个省份、每种设备类型各卖了多少。这个页面有两个图，分别是【各地区设备统计】和【设备销售类型销量分析】。由于没有从后端拿数据，数据在客户提供的 Excel 里，所以我这里将数据写死在前端。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-01.png" alt="各地区设备统计"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-02.png" alt="设备销售类型销量分析"></p>
<h3 id="4-1-各地区设备统计"><a href="#4-1-各地区设备统计" class="headerlink" title="4.1 各地区设备统计"></a>4.1 各地区设备统计</h3><p>这其实是一个图表，只是分成了左右两个图，左边是一个柱状堆积图，右边是一个饼图。</p>
<h4 id="4-1-1-图表组件"><a href="#4-1-1-图表组件" class="headerlink" title="4.1.1 图表组件"></a>4.1.1 图表组件</h4><p>为了更好地管理图表，我将所有的图表都写成了 Vue 组件（Component）的形式，而非写在当前页面。在当前页面导入组件，并注册组件使用它。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">region_echart</span> <span class="attr">ref</span>=<span class="string">&quot;region&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">region_echart</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> region_echart <span class="keyword">from</span> <span class="string">&quot;@/components/statisticalReport/echarts/region_echart&quot;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;region_echart, ...&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当父组件（页面）要使用子组件（图表）的数据时，例如父组件要调用子组件的函数，可以在子组件添加 <code>ref</code> 属性寻找它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 搜索按钮操作 */</span></span><br><span class="line"><span class="title function_">handleQuery</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">region</span>.<span class="title function_">getProvinceData</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>当子组件（图表）要使用父组件（页面）的数据时，例如子组件想知道父组件的搜索框是什么条件，可以使用 <code>this.$parent</code> 向上寻找父组件。<strong>注意：由于 Vue 实际上可能套了好几层 <code>div</code>，所以要寻找好几层才能到目标父组件，可以在控制台 <code>console.log</code> 一下 <code>this</code> 及其父元素。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getProvinceData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">queryParams</span>.<span class="property">provinces</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">provinceData</span> = <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">queryParams</span>.<span class="property">provinces</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">provinceData</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> province <span class="keyword">of</span> regionData) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">provinceData</span>.<span class="title function_">push</span>(province.<span class="property">label</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="4-1-2-数据添加"><a href="#4-1-2-数据添加" class="headerlink" title="4.1.2 数据添加"></a>4.1.2 数据添加</h4><p>这个表需要每个省份每种机床卖出了多少，因此我写在前端里的数据是一个大对象，属性是每个省份，每个省份的值又是一个对象，对应机床类型和销量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;北京市&#x27;</span>: &#123;<span class="string">&#x27;YGS3A...型&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;YGS3B...型&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;YGS3C...型&#x27;</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;上海市&#x27;</span>: &#123;<span class="string">&#x27;YGS3A...型&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;YGS3B...型&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;YGS3C...型&#x27;</span>: <span class="number">2</span>, ...&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>首先我们拿到这些数据后，要处理成 Echarts 支持的数据形式。这里我们使用数组的形式。先添加数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getProvinceData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">queryParams</span>.<span class="property">provinces</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">provinceData</span> = <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">queryParams</span>.<span class="property">provinces</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">provinceData</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> province <span class="keyword">of</span> regionData) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">provinceData</span>.<span class="title function_">push</span>(province.<span class="property">label</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getTypeData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listType</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">queryParams</span>.<span class="property">deviceTypes</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">typeData</span> = <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">queryParams</span>.<span class="property">deviceTypes</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">typeData</span> = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> type <span class="keyword">of</span> response.<span class="property">rows</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">typeData</span>.<span class="title function_">push</span>(type.<span class="property">devicetypeName</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getDeviceNumber</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deviceNumber</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="property">total</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> type <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">typeData</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deviceNumber</span>[type] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> province <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">provinceData</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deviceNumber</span>[type].<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> province <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">provinceData</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="property">total</span>.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> province <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> type <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">data</span>[province]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">provinceData</span>.<span class="title function_">indexOf</span>(province) &gt; -<span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">typeData</span>.<span class="title function_">indexOf</span>(type) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deviceNumber</span>[type][<span class="variable language_">this</span>.<span class="property">provinceData</span>.<span class="title function_">indexOf</span>(province)] = <span class="variable language_">this</span>.<span class="property">data</span>[province][type];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="property">total</span>[<span class="variable language_">this</span>.<span class="property">provinceData</span>.<span class="title function_">indexOf</span>(province)] += <span class="variable language_">this</span>.<span class="property">data</span>[province][type];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">deviceNumber</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>由于排序和饼图需要计算每个省份的设备总数，所以我们给 <code>deviceNumber</code> 对象加一个属性 <code>total</code>，其值为数组。<code>provinceData</code> 的顺序是确定的，它的索引对应 <code>total</code> 数组里和每个 <code>type</code> 数组里的索引。再根据已有数据，给对应类型的省份索引位置加数据，总数也要加数据，最终得到：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-03.png" alt="console.log(this.deviceNumber)"></p>
<p>每个数组 34 个元素对应 34 个省级行政区，其中每个位置是哪个省由 <code>provinceData</code> 数组确定。</p>
<h4 id="4-1-3-数据处理"><a href="#4-1-3-数据处理" class="headerlink" title="4.1.3 数据处理"></a>4.1.3 数据处理</h4><p>以上数据还不能被图表使用，需要做进一步处理。</p>
<p>首先对于柱形图，我们需要让它按总数数量排序。Echarts 是不能做到这个功能的，所以我们需要处理数据源。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">transformData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> flagData = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="property">total</span>.<span class="property">length</span>; x++) &#123;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="property">total</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="property">total</span>[x] &gt; <span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="property">total</span>[i]) &#123;</span><br><span class="line">        flag++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flagData.<span class="title function_">push</span>(flag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; flagData.<span class="property">length</span>; x++) &#123;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = x + <span class="number">1</span>; i &lt; flagData.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (flagData[x] === flagData[i]) &#123;</span><br><span class="line">        flagData[i] += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sortedDeviceNumber</span> = &#123;</span><br><span class="line">    <span class="attr">total</span>: []</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> type <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">typeData</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sortedDeviceNumber</span>[type] = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sortedProvinceData</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> flagData) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">deviceNumber</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sortedDeviceNumber</span>[key][flagData[i]] = <span class="variable language_">this</span>.<span class="property">deviceNumber</span>[key][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sortedProvinceData</span>[flagData[i]] = <span class="variable language_">this</span>.<span class="property">provinceData</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>以上代码 4-12 行，我们得到的 <code>flagData</code> 是由 34 个数字组成的数组，代表了每个省份的数量排序，即对于某个省份数量，有多少个省份数量比它小，那它就排多少位。13-20 行处理并列的省份，这样就得到了从小到大的省份新顺序。再根据这个新顺序，将数量与省份赋值到 <code>sortedDeviceNumber</code> 和 <code>sortedProvinceData</code> 里。柱形图就可以用这个数据了。</p>
<p>对于饼图，我们只需要省份和总数，注意总数为 0 时，将总数设置为 <code>null</code>，这样它就会被视为无效数据，不会出现在饼图上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getPieData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pieData</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">sortedProvinceData</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pieData</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">sortedProvinceData</span>[i],</span><br><span class="line">      <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">sortedDeviceNumber</span>.<span class="property">total</span>[i] === <span class="number">0</span> ? <span class="literal">null</span> : <span class="variable language_">this</span>.<span class="property">sortedDeviceNumber</span>.<span class="property">total</span>[i],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="4-1-4-柱形图和饼形图数据传入"><a href="#4-1-4-柱形图和饼形图数据传入" class="headerlink" title="4.1.4 柱形图和饼形图数据传入"></a>4.1.4 柱形图和饼形图数据传入</h4><p>这两个图属于一个图表，因此 Echarts 的 <code>series</code> 数量为 n+1，n 是设备类型数（表示柱形图），1 表示饼图。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getSeries</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">series</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> type <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">typeData</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">series</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: type,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,	<span class="comment">// 表示柱形图</span></span><br><span class="line">      <span class="attr">stack</span>: <span class="string">&#x27;total&#x27;</span>,	<span class="comment">// 表示堆积图</span></span><br><span class="line">      <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;insideRight&#x27;</span>,	<span class="comment">// 标签数值放在柱形右方</span></span><br><span class="line">        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (params.<span class="property">value</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> params.<span class="property">value</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">barCategoryGap</span>: <span class="string">&#x27;30%&#x27;</span>,	<span class="comment">// 柱形之间间隔</span></span><br><span class="line">      <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">sortedDeviceNumber</span>[type],	<span class="comment">// 数据使用数组</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">series</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,	<span class="comment">// 表示饼图</span></span><br><span class="line">    <span class="attr">radius</span>: [<span class="number">30</span>, <span class="string">&#x27;60%&#x27;</span>],	<span class="comment">// 内半径30像素，外半径为容器的60%</span></span><br><span class="line">    <span class="attr">center</span>: [<span class="string">&#x27;75%&#x27;</span>, <span class="string">&#x27;45%&#x27;</span>],	<span class="comment">// 圆心位置</span></span><br><span class="line">    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">pieData</span>,</span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">16</span>,</span><br><span class="line">      <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (params.<span class="property">percent</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> params.<span class="property">name</span> + <span class="string">&#x27;:\n&#x27;</span> + params.<span class="property">value</span> + <span class="string">&#x27;（&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">round</span>(params.<span class="property">percent</span>) + <span class="string">&#x27;%）&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> params.<span class="property">name</span> + <span class="string">&#x27;:\n&#x27;</span> + params.<span class="property">value</span> + <span class="string">&#x27;（&lt;1%）&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">labelLine</span>: &#123;</span><br><span class="line">      <span class="attr">smooth</span>: <span class="literal">true</span>,	<span class="comment">// 平滑标签线</span></span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;	<span class="comment">// 悬浮提示框</span></span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,	<span class="comment">// 触发类型为饼图项目</span></span><br><span class="line">      <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> params.<span class="property">name</span> + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + params.<span class="property">marker</span> + params.<span class="property">value</span> + <span class="string">&#x27;（&#x27;</span> + params.<span class="property">percent</span> + <span class="string">&#x27;%）&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">      <span class="attr">shadowBlur</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.4)&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">animationType</span>: <span class="string">&#x27;scale&#x27;</span>,</span><br><span class="line">    <span class="attr">animationEasing</span>: <span class="string">&#x27;elasticOut&#x27;</span>,</span><br><span class="line">    <span class="attr">animationDelay</span>: <span class="keyword">function</span> (<span class="params">idx</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>以上代码 11-16 行，当柱形图某个数据小于 10 时，则不显示标签数值，以免影响美观，或出现多个 0 重叠的情况。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-05.png" alt="柱形图标签用函数格式化"></p>
<p>以上代码 30-36 行，当饼图某个数据项占比小于 1% 时，就显示 <code>&lt;1%</code>，以免被圆整为 <code>0%</code>。47-49 行，处理了饼图悬浮提示框的显示形式，用到了 <code>params</code> 即每个数据项的几个参数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-06.png" alt="饼图标签与悬浮提示框用函数格式化"></p>
<h4 id="4-1-5-生成图表"><a href="#4-1-5-生成图表" class="headerlink" title="4.1.5 生成图表"></a>4.1.5 生成图表</h4><p>生成图表用典型的 <code>init</code> 方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 900px&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dev_chart&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initEcharts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">chart</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">dev_chart</span>, <span class="string">&#x27;macarons&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">chart</span>.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;	<span class="comment">// 设置柱形图标签，见上上图</span></span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">      <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;shadow&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;	<span class="comment">// 图例，使用设备类型，可以同时操作柱形图和饼图</span></span><br><span class="line">      <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">typeData</span>,</span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">14</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;0%&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&#x27;0%&#x27;</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="string">&#x27;60%&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">grid</span>: &#123;	<span class="comment">// 柱形图范围</span></span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;5%&#x27;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&#x27;60%&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&#x27;8%&#x27;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">      <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;设备数量/台&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span>,	<span class="comment">// x轴位置</span></span><br><span class="line">      <span class="attr">splitLine</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">boundaryGap</span>: [<span class="number">0</span>, <span class="number">0.01</span>],</span><br><span class="line">      <span class="attr">axisTick</span>: &#123;	<span class="comment">// 坐标轴刻度</span></span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;	<span class="comment">// 坐标轴标签</span></span><br><span class="line">        <span class="attr">textStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">14</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123;	<span class="comment">// 坐标轴线</span></span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;省级行政区&#x27;</span>,</span><br><span class="line">      <span class="attr">nameLocation</span>: <span class="string">&#x27;start&#x27;</span>,	<span class="comment">// 名称显示位置</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,	<span class="comment">// 类目轴</span></span><br><span class="line">      <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">sortedProvinceData</span>,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123;	<span class="comment">// 坐标轴分隔线</span></span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">textStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">14</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: <span class="variable language_">this</span>.<span class="property">series</span></span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意以上代码第 2 行，如果要使用 <code>macarons</code> 主题，需要找到它的位置并导入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../../../../node_modules/echarts/theme/macarons&quot;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-6-解决获取不到属性的报错"><a href="#4-1-6-解决获取不到属性的报错" class="headerlink" title="4.1.6 解决获取不到属性的报错"></a>4.1.6 解决获取不到属性的报错</h4><p>之后的代码前端经常会报获取不到属性的错误，这甚至可能导致图表无法显示，为此有以下解决办法：</p>
<ul>
<li><p>如果是在 Vue 部分直接使用对象的属性，可以先用 <code>v-if</code> 判断其是否存在。如以下代码，<code>staticInfo</code> 本来是个空对象，是在调用函数后才赋值，如果没有 <code>v-if</code>，函数调用延迟时，Vue 尝试填充此处的文本插值，就会报找不到 <code>ncsId</code> 属性的错。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;staticInfo.ncsId&quot;</span>&gt;</span>&#123;&#123; staticInfo.ncsId &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用函数内部调用下一个函数，以强行控制函数执行流程，确保获取数据，再操作数据，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getList</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">ListInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleData</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">handleData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将生成图表的函数放在 <code>mounted</code> 的 <code>nextTick</code> 里，或直接设置整个函数体位于 <code>nextTick</code> 里，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initEchart</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">initEchart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> chart = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">dev_chart</span>);</span><br><span class="line">      chart.<span class="title function_">setOption</span>(<span class="variable language_">this</span>.<span class="property">options</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-2-设备销售类型销量分析"><a href="#4-2-设备销售类型销量分析" class="headerlink" title="4.2 设备销售类型销量分析"></a>4.2 设备销售类型销量分析</h3><p>这个图表是左右两张图，分别是柱形图和饼图，基本操作方法与之前类似。</p>
<h4 id="4-2-1-让柱形图同一系列显示不同的颜色"><a href="#4-2-1-让柱形图同一系列显示不同的颜色" class="headerlink" title="4.2.1 让柱形图同一系列显示不同的颜色"></a>4.2.1 让柱形图同一系列显示不同的颜色</h4><p>柱形图其实只有一个系列，即设备数量。但为了让每一个柱形显示不同颜色，就要加单独的 <code>itemStyle</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getDeviceNumber</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> color= [</span><br><span class="line">    <span class="string">&quot;#4C98FB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#83CCE7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#26C7C8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#73DEBD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#26C978&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#8CDF6C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#FBD657&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#F56679&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#E07BCE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#9D50E0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#634FDA&quot;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deviceNumber</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">typeData</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deviceNumber</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">data</span>[index],</span><br><span class="line">      <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: color[index]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-让柱形图横坐标标签旋转-45-度"><a href="#4-2-2-让柱形图横坐标标签旋转-45-度" class="headerlink" title="4.2.2 让柱形图横坐标标签旋转 45 度"></a>4.2.2 让柱形图横坐标标签旋转 45 度</h4><p>横坐标标签过长，需要斜向放置，才能完整显示且更美观。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">xAxis</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;设备类型&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">  <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;#96A4F4&quot;</span>,</span><br><span class="line">    <span class="attr">rotate</span>: <span class="number">45</span>,	<span class="comment">// 旋转角度</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-07.png" alt="柱状图坐标标签旋转"></p>
<p>饼图不用这么做，直接将 <code>color</code> 写在 <code>option</code> 里就好了，它会自动把不同颜色赋给不同的数据项。</p>
<h2 id="5-工作台"><a href="#5-工作台" class="headerlink" title="5 工作台"></a>5 工作台</h2><p>【工作台】是个类似于「大屏看板」的功能区，分为【产品全地图】和【设备状态看板】两个模块。</p>
<h3 id="5-1-产品全地图"><a href="#5-1-产品全地图" class="headerlink" title="5.1 产品全地图"></a>5.1 产品全地图</h3><p>【产品全地图】其实就是把【统计报表】里的设备分析图换了个累加方式，按省份累加并且展示到全国地图里。这边的代码是昆山写的，我只是改了其中的数据，就不展开讲了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-08.png" alt="产品全地图页面"></p>
<h3 id="5-2-设备状态看板"><a href="#5-2-设备状态看板" class="headerlink" title="5.2 设备状态看板"></a>5.2 设备状态看板</h3><p>【设备状态看板】展示了所有添加在【设备信息】里的设备，并根据采集到的数据展示它们的开关机状态，还可以点击每台设备右上角的按钮查看详细的监控数据。开关机状态所用的颜色来自 <a href="https://element.eleme.cn/#/zh-CN/component/color">ElementUI 的调色板颜色</a>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-09.png" alt="设备状态看板页面"></p>
<h4 id="5-2-1-右上角的时间"><a href="#5-2-1-右上角的时间" class="headerlink" title="5.2.1 右上角的时间"></a>5.2.1 右上角的时间</h4><p>看板右上角的时间可以通过 js 的定时器完成。先在 Vue 中为其占位，并设置好 CSS 样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_timer&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; nowDate &#125;&#125; &#123;&#123; nowWeek &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 26px; font-weight: bold&quot;</span>&gt;</span>&#123;&#123; nowTime &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header_timer</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">172</span>, <span class="number">80</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">3%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义一个函数，将当前时间写入变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setNowTimes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> wk = myDate.<span class="title function_">getDay</span>();</span><br><span class="line">  <span class="keyword">let</span> yy = <span class="title class_">String</span>(myDate.<span class="title function_">getFullYear</span>());</span><br><span class="line">  <span class="keyword">let</span> mm = myDate.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> dd = <span class="title class_">String</span>(myDate.<span class="title function_">getDate</span>());</span><br><span class="line">  <span class="keyword">let</span> hou = <span class="title class_">String</span>(</span><br><span class="line">    myDate.<span class="title function_">getHours</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + myDate.<span class="title function_">getHours</span>() : myDate.<span class="title function_">getHours</span>()</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> min = <span class="title class_">String</span>(</span><br><span class="line">    myDate.<span class="title function_">getMinutes</span>() &lt; <span class="number">10</span></span><br><span class="line">      ? <span class="string">&quot;0&quot;</span> + myDate.<span class="title function_">getMinutes</span>()</span><br><span class="line">      : myDate.<span class="title function_">getMinutes</span>()</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> sec = <span class="title class_">String</span>(</span><br><span class="line">    myDate.<span class="title function_">getSeconds</span>() &lt; <span class="number">10</span></span><br><span class="line">      ? <span class="string">&quot;0&quot;</span> + myDate.<span class="title function_">getSeconds</span>()</span><br><span class="line">      : myDate.<span class="title function_">getSeconds</span>()</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> weeks = [</span><br><span class="line">    <span class="string">&quot;星期日&quot;</span>,</span><br><span class="line">    <span class="string">&quot;星期一&quot;</span>,</span><br><span class="line">    <span class="string">&quot;星期二&quot;</span>,</span><br><span class="line">    <span class="string">&quot;星期三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;星期四&quot;</span>,</span><br><span class="line">    <span class="string">&quot;星期五&quot;</span>,</span><br><span class="line">    <span class="string">&quot;星期六&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> week = weeks[wk];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nowDate</span> = yy + <span class="string">&quot;年&quot;</span> + mm + <span class="string">&quot;月&quot;</span> + dd + <span class="string">&quot;日&quot;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nowTime</span> = hou + <span class="string">&quot;:&quot;</span> + min + <span class="string">&quot;:&quot;</span> + sec;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nowWeek</span> = week;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再在 <code>mounted</code> 里设置一个定时器，设置为 1000 毫秒（即 1 秒）刷新一次就好，这样就实现了一个不断变化的时间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setNowTimes</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-10.png" alt="时间"></p>
<h4 id="5-2-2-搜索提示信息"><a href="#5-2-2-搜索提示信息" class="headerlink" title="5.2.2 搜索提示信息"></a>5.2.2 搜索提示信息</h4><p>客户要求，在上方搜索时，页面会提示它搜索的是什么企业或设备类型。这看起来是个很简单的工作，但着实费了我一阵功夫。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-12.png" alt="搜索信息"></p>
<p>这个搜索功能和其他单表的搜索没有什么区别，都是获取 <code>queryParams</code> 然后调用 <code>getList</code> 函数。首先在页面的相关位置加上这三个提示的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;10&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isSearched&quot;</span> <span class="attr">class</span>=<span class="string">&quot;white-text medium-text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 15px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:lg</span>=<span class="string">&quot;5&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;focusEnter !== null&quot;</span>&gt;</span>当前企业：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; focusEnter &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:lg</span>=<span class="string">&quot;5&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;focusOrg !== null&quot;</span>&gt;</span>当前部门：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; focusOrg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:lg</span>=<span class="string">&quot;5&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;focusType !== null&quot;</span>&gt;</span>当前类型：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; focusType &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>定义布尔变量 <code>isSearched</code>，判断是否在进行搜索，以及三个变量放搜索值。在搜索和重置搜索函数上，也要对这些变量进行处理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 搜索按钮操作 */</span></span><br><span class="line"><span class="title function_">handleQuery</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">pageNum</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getFocus</span>();</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">focusEnter</span> !== <span class="literal">null</span> || <span class="variable language_">this</span>.<span class="property">focusOrg</span> !== <span class="literal">null</span> || <span class="variable language_">this</span>.<span class="property">focusType</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isSearched</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isSearched</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/** 重置按钮操作 */</span></span><br><span class="line"><span class="title function_">resetQuery</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">resetForm</span>(<span class="string">&quot;queryForm&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isSearched</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">focusEnter</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">focusOrg</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">focusType</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>定义一个 <code>getFocus</code> 函数，用来把搜索值传给三个变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getFocus</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">enterpriseId</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> enter <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">enterOptions</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (enter.<span class="property">value</span> === <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">enterpriseId</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">focusEnter</span> = enter.<span class="property">label</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">orgId</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> org <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">orgOptionsList</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (org.<span class="property">value</span> === <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">orgId</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">focusOrg</span> = org.<span class="property">label</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">devicetypeId</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> type <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">typeOptions</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (type.<span class="property">value</span> === <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">devicetypeId</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">focusType</span> = type.<span class="property">label</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这个当时写的代码明显可以用 <code>find</code> 函数替代啊，大意了。</p>
<p>当设备总数为 0 时，其实也要设计一个整体的页面，返回按钮与重置按钮功能一致，调用同一个函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;device_container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 15px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;total === 0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 50px auto; height: 200px; text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px; color: white&quot;</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-back&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;resetQuery&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;15&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-13.png" alt="设备总数为 0"></p>
<h4 id="5-2-3-纯前端功底：图例和设备框的设计"><a href="#5-2-3-纯前端功底：图例和设备框的设计" class="headerlink" title="5.2.3 纯前端功底：图例和设备框的设计"></a>5.2.3 纯前端功底：图例和设备框的设计</h4><p>这我是完全用 HTML+CSS 写的，真正考验前端功底。上代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span> <span class="attr">class</span>=<span class="string">&quot;white-text medium-text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:sm</span>=<span class="string">&quot;5&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;legend-total&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold&quot;</span>&gt;</span>设备总数：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; total &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:lg</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;6&quot;</span> <span class="attr">:md</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;legend-box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-bottom-color: #67C23A&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;legend-icon el-icon-set-up&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #67C23A&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;legend-text&quot;</span>&gt;</span>开机<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:lg</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;6&quot;</span> <span class="attr">:md</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;legend-box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-bottom-color: #F56C6C&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;legend-icon el-icon-switch-button&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #F56C6C&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;legend-text&quot;</span>&gt;</span>关机<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;device_container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 15px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;total === 0&quot;</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  ...	<span class="comment">&lt;!-- 这一部分就是上面的设备总数为0的界面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;15&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xl</span>=<span class="string">&quot;4&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;12&quot;</span> <span class="attr">:md</span>=<span class="string">&quot;8&quot;</span> <span class="attr">:lg</span>=<span class="string">&quot;6&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in deviceList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 15px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-card&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;background-color&#x27;: dynamicCheckStatusList[item.ncsId] ? &#x27;#67C23A&#x27; : &#x27;#F56C6C&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; item.deviceName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/status/device/` + item.id&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-monitor&quot;</span> <span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            详细数据</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-main&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;border-color&#x27;: dynamicCheckStatusList[item.ncsId] ? &#x27;#67C23A&#x27; : &#x27;#F56C6C&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-table el-table--enable-row-hover el-table--medium&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>地区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;item.enterpriseId&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="line">                    enterOptions.find(enter =&gt; enter.value === item.enterpriseId) ? enterOptions.find(enter =&gt; enter.value === item.enterpriseId).province : &#x27;&#x27;</span><br><span class="line">                  &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            ...	<span class="comment">&lt;!-- 省略表格中的企业、类型代码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;dynamicCheckStatusList&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123; dynamicCheckStatusList[item.ncsId] ? &quot;开机&quot; : &quot;关机&quot; &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上代码第 29 行，使用 <code>v-for</code> 要绑定 <code>key</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.white-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.medium-text</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.legend-total</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">5px</span> red solid;	<span class="comment">/* 设备总数左边的小红条 */</span></span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.legend-box</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.legend-icon</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.legend-text</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#303133</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-main</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#F2F6FC</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#F2F6FC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.label</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然现有的框架、组件非常好用，但要做出自己的效果还是需要靠 HTML+CSS 完成，这也让我体会到几十年前前端工程师的艰辛。</p>
<h4 id="5-2-4-路由跳转"><a href="#5-2-4-路由跳转" class="headerlink" title="5.2.4 路由跳转"></a>5.2.4 路由跳转</h4><p>我们想让每台机床展现详细的监控数据，就做了一个按钮入口，这个实现方式有很多，比如 ElementUI 的 <a href="https://element.eleme.cn/#/zh-CN/component/dialog">对话框</a>、<a href="https://element.eleme.cn/#/zh-CN/component/popover">弹出框</a> 或 <a href="https://element.eleme.cn/#/zh-CN/component/drawer">抽屉</a> 等。最终我们决定做一个单独的页面展示机床数据。</p>
<p>每个机床应该共用一个页面模板，但数据需要有所不同，可以根据机床的 id 进行区分。这用的是若依的 <a href="http://doc.ruoyi.vip/ruoyi-vue/other/faq.html#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E8%8F%9C%E5%8D%95%E9%A1%B5%E7%AD%BE">路由跳转</a>。</p>
<p>在 <code>router</code> 的 <code>index.js</code> 里面，新配置一个路由：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/status&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">  <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;device/:id(\\d+)&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;@/views/staging/status/device&#x27;</span>], resolve),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Device&#x27;</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;设备详细数据&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时设置路由跳转：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/status/device/` + item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-monitor&quot;</span> <span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    详细数据</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就可以跳转到指定的这个链接，链接所展示的页面是路由里 <code>require</code> 的页面，接下来编辑这个页面即可。</p>
<h3 id="5-3-设备详细数据"><a href="#5-3-设备详细数据" class="headerlink" title="5.3 设备详细数据"></a>5.3 设备详细数据</h3><p>这里展示每个机床的详细数据，不同的机床路径不同，数据不同。下图路径后的数字就是这台机床的 id。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-15.png" alt="设备详细数据页面"></p>
<h4 id="5-3-1-机床-id"><a href="#5-3-1-机床-id" class="headerlink" title="5.3.1 机床 id"></a>5.3.1 机床 id</h4><p>机床 id 是最核心的数据，不仅这个页面的路径需要机床 id，页面所有的数据也通过机床 id 拿到。所以在 Vue 的 <code>data</code> 里，就定义好机床 id。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">deviceId</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>,</span><br></pre></td></tr></table></figure>
<p>利用逻辑与的短路特性，如果获取到了 <code>this.$route.param</code>，就返回 id。</p>
<h4 id="5-3-2-表格信息与变量绑定"><a href="#5-3-2-表格信息与变量绑定" class="headerlink" title="5.3.2 表格信息与变量绑定"></a>5.3.2 表格信息与变量绑定</h4><p>所有的信息都是根据拿到的机床 id，然后使用后端的函数与前端的 api 查到的，包含静态数据（如设备归属信息）和动态数据（如设备运行状态）。特别要注意拿到的动态数据要看是否绑定，绑定的话还要显示用户自定义的名称和单位。</p>
<p>例如以下是设备基本信息的 Vue 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:lg</span>=<span class="string">&quot;8&quot;</span> <span class="attr">:md</span>=<span class="string">&quot;12&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">shadow</span>=<span class="string">&quot;hover&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 15px; height: 315px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold&quot;</span>&gt;</span>设备基本信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-table el-table--enable-row-hover el-table--medium&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.hwProductSerialNrL&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="line">                bindingParamInfo.find(item =&gt; item.mongoName === &#x27;hwProductSerialNrL&#x27;).paramName</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;staticInfo.ncsId&quot;</span>&gt;</span>&#123;&#123; staticInfo.ncsId &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>设备名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;staticInfo.deviceName&quot;</span>&gt;</span>&#123;&#123; staticInfo.deviceName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>设备启用状态<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;staticInfo.isStart !== null&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="line">                staticInfo.isStart === 0 ? &quot;正常&quot; : &quot;停用&quot;</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.nckType&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;nckType&#x27;).paramName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!isEmptyObject(dynamicTimeInfo)&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="line">                dynamicTimeInfo.timePayLoad.nckType</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-else</span>&gt;</span>（未找到）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.nckVersion&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;nckVersion&#x27;).paramName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!isEmptyObject(dynamicTimeInfo)&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; dynamicTimeInfo.timePayLoad.nckVersion &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-else</span>&gt;</span>（未找到）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再例如以下是设备运行状态的 Vue 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:lg</span>=<span class="string">&quot;8&quot;</span> <span class="attr">:md</span>=<span class="string">&quot;24&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">shadow</span>=<span class="string">&quot;hover&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 15px; height: 315px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold&quot;</span>&gt;</span>设备运行状态<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDynamicRefresh&quot;</span>&gt;</span></span><br><span class="line">        刷新</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-table el-table--enable-row-hover el-table--medium&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;tableLoading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;!isEmptyObject(dynamicTimeInfo) || !isEmptyObject(dynamicProgStatus)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>本次开机时刻<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;dynamicTimeInfo&quot;</span>&gt;</span>&#123;&#123; dynamicTimeInfo.todayStartTime &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.poweronTime&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="line">                bindingParamInfo.find(item =&gt; item.mongoName === &#x27;poweronTime&#x27;).paramName</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;dynamicTimeInfo&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; dynamicTimeInfo.timePayLoad.poweronTime &#125;&#125;</span><br><span class="line">              &#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;poweronTime&#x27;).paramUnit &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.setupTime&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;setupTime&#x27;).paramName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;dynamicTimeInfo&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; dynamicTimeInfo.timePayLoad.setupTime &#125;&#125;</span><br><span class="line">              &#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;setupTime&#x27;).paramUnit &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.progStatus&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;progStatus&#x27;).paramName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;dynamicCheckStatus &amp;&amp; dynamicProgStatus.progStatus&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">circle</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">v-if</span>=<span class="string">&quot;[1,2,5].indexOf(dynamicProgStatus.progStatus) &gt; -1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">circle</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">v-else-if</span>=<span class="string">&quot;dynamicProgStatus.progStatus === 3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">circle</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">v-else-if</span>=<span class="string">&quot;dynamicProgStatus.progStatus === 4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              &#123;&#123; dynamicProgStatus.string &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;!dynamicCheckStatus&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">              设备关机</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.progStatus&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>更新时刻<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;dynamicProgStatus.time&quot;</span>&gt;</span>&#123;&#123; dynamicProgStatus.time &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>未找到设备运行状态，请<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`../../deviceCenter/device`&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span>&gt;</span>检查数控系统id<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">              或联系技术人员</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里首先拿到对象时要判断其是否为空对象，因为 <strong>空对象在 JavaScript 中被视为 <code>true</code></strong>。这里我用的是自定义函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空对象</span></span><br><span class="line"><span class="title function_">isEmptyObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>（JavaScript 中，<code>undefined</code>、<code>null</code>、<code>-0</code>、<code>0</code>（<code>+0</code>）、<code>NaN</code>、<code>&#39;&#39;</code>（空字符串）都被视为 <code>false</code>，其他都被视为 <code>true</code>，如空数组 <code>[]</code> 和空对象 <code>&#123;&#125;</code> 也被视为 <code>true</code>）</p>
<p>然后，我们会拿到一些机床数据，例如 <code>dynamicTimeInfo</code>、<code>dynamicProgStatus</code> 对象。为了实现变量绑定，我们还需要拿到：用户自定义的所有变量（从【变量信息】里拿），用户绑定到这台机床类型的变量（从绑定表里拿）。我用以下方式获取与处理变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量绑定</span></span><br><span class="line"><span class="title function_">getParams</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listParam</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">params</span> = response.<span class="property">rows</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getMongos</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getMongos</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listMongoVariable</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mongos</span> = response.<span class="property">rows</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getBindings</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getBindings</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listDevicetypeparam</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bindings</span> = response.<span class="property">rows</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getBindingParamInfo</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getBindingParamInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bindingParamInfo</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">bindings</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">devicetypeId</span> === item.<span class="property">devicetypeId</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bindingParamInfo</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">paramId</span>: item.<span class="property">paramId</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> bindingParam <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">bindingParamInfo</span>) &#123;</span><br><span class="line">    bindingParam.<span class="property">paramName</span> = <span class="variable language_">this</span>.<span class="property">params</span>.<span class="title function_">find</span>(<span class="function"><span class="params">param</span> =&gt;</span> param.<span class="property">id</span> === bindingParam.<span class="property">paramId</span>).<span class="property">paramName</span>;</span><br><span class="line">    bindingParam.<span class="property">paramUnit</span> = <span class="variable language_">this</span>.<span class="property">params</span>.<span class="title function_">find</span>(<span class="function"><span class="params">param</span> =&gt;</span> param.<span class="property">id</span> === bindingParam.<span class="property">paramId</span>).<span class="property">paramUnit</span>;</span><br><span class="line">    bindingParam.<span class="property">mongoId</span> = <span class="variable language_">this</span>.<span class="property">params</span>.<span class="title function_">find</span>(<span class="function"><span class="params">param</span> =&gt;</span> param.<span class="property">id</span> === bindingParam.<span class="property">paramId</span>).<span class="property">mongoId</span>;</span><br><span class="line">    bindingParam.<span class="property">mongoName</span> = <span class="variable language_">this</span>.<span class="property">mongos</span>.<span class="title function_">find</span>(<span class="function"><span class="params">mongo</span> =&gt;</span> mongo.<span class="property">id</span> === bindingParam.<span class="property">mongoId</span>).<span class="property">mongoName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">showParam</span> = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> mongo <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">mongos</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showParam</span>[mongo.<span class="property">mongoName</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bindingParamInfo</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">mongoName</span> === mongo.<span class="property">mongoName</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showParam</span>[mongo.<span class="property">mongoName</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><code>getParams</code> 函数拿所有的自定义变量，<code>getMongos</code> 函数拿所有的 MongoDB 变量，<code>getBindings</code> 函数拿所有的绑定关系，<code>getBindingParamInfo</code> 函数先把为当前类型绑定的变量放进数组里，再通过之前拿的信息为这些变量一一补充信息（如名称、单位等），最后在一个 <code>showParam</code> 数组里，为每个 MongoDB 变量设置布尔值，方便 Vue 里的 <code>v-if</code> 使用。</p>
<h4 id="5-3-3-主轴信息图表：日期信息通信"><a href="#5-3-3-主轴信息图表：日期信息通信" class="headerlink" title="5.3.3 主轴信息图表：日期信息通信"></a>5.3.3 主轴信息图表：日期信息通信</h4><p>下面两个图表结构基本一致，所要实现的功能和要处理的数据也基本一致。这两个图表我也是写在组件里的。</p>
<p>首先是这个日期搜索功能，其实也属于父组件和子组件的通信。以下是父组件的前端部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;speedDate&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;45px&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;speedDate.date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请选择日期&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">format</span>=<span class="string">&quot;yyyy 年 MM 月 dd 日&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value-format</span>=<span class="string">&quot;timestamp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:clearable</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:picker-options</span>=<span class="string">&quot;pickerOptions&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleSpeedQuery&quot;</span>&gt;</span></span><br><span class="line">      搜索</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">v-if</span>=<span class="string">&quot;$refs.speed &amp;&amp; isEmptyObject($refs.speed.dynamicSpindleInfoList)&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果子组件存在，但子组件的主轴信息列表为空对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>系统当日无数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 日期</span></span><br><span class="line"><span class="attr">speedDate</span>: &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>()).<span class="title function_">getTime</span>()&#125;,	<span class="comment">// 以获取当前的时间</span></span><br><span class="line">...</span><br><span class="line"><span class="attr">pickerOptions</span>: &#123;</span><br><span class="line">  <span class="title function_">disabledDate</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="number">8.64e6</span>	<span class="comment">// 不允许选择今日之后的时间</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 选择日期处理</span></span><br><span class="line"><span class="title function_">handleSpeedQuery</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speedLoading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getDynamicSpindleInfo</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">speed</span>.<span class="title function_">getNcsId</span>();	<span class="comment">// 调子组件函数</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-20.png" alt="日期选择"></p>
<p>子组件要拿这个日期去查询信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数控系统id</span></span><br><span class="line"><span class="title function_">getNcsId</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">getDevice</span>(<span class="variable language_">this</span>.<span class="property">deviceId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deviceNcsId</span> = response.<span class="property">data</span>.<span class="property">ncsId</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">devicetypeId</span> = response.<span class="property">data</span>.<span class="property">devicetypeId</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getDynamicSpindleInfoList</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 动态主轴信息列表获取</span></span><br><span class="line"><span class="title function_">getDynamicSpindleInfoList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listSpindleDocByTime</span>(<span class="variable language_">this</span>.<span class="property">deviceNcsId</span>, <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">speedDate</span>.<span class="property">date</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dynamicSpindleInfoList</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> doc <span class="keyword">of</span> response) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dynamicSpindleInfoList</span>.<span class="title function_">push</span>(doc);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这样子组件就拿到了某个日期的主轴信息列表，并拿此去画图。</p>
<h4 id="5-3-4-主轴信息图表：父组件的信息展示与变量绑定"><a href="#5-3-4-主轴信息图表：父组件的信息展示与变量绑定" class="headerlink" title="5.3.4 主轴信息图表：父组件的信息展示与变量绑定"></a>5.3.4 主轴信息图表：父组件的信息展示与变量绑定</h4><p>图表的下方有一个表格，这个表格位于父组件，展示读取到的最新的主轴动态数据。这个表格的处理很复杂，不仅要考虑到变量绑定，也要考虑到适配。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-card</span> <span class="attr">shadow</span>=<span class="string">&quot;hover&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 15px; height: 630px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold&quot;</span>&gt;</span>设备主轴速度图<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">click</span>=<span class="string">&quot;handleSpeedRefresh&quot;</span>&gt;</span></span><br><span class="line">      刷新</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;speedDate&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;45px&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      ...	<span class="comment">&lt;!-- 省略的是日期搜索框部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-loading</span>=<span class="string">&quot;speedLoading&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spindle_speed</span> <span class="attr">ref</span>=<span class="string">&quot;speed&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">spindle_speed</span>&gt;</span>	<span class="comment">&lt;!-- 图表主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-table el-table--enable-row-hover el-table--medium&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 15px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;!isEmptyObject(dynamicSpindleInfo) &amp;&amp; screenWidth &gt;= 992&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的tbody是屏幕宽度为350-991的情况，表格为1行6列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.cmdSpeed || this.showParam.actSpeed&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.cmdSpeed&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;cmdSpeed&#x27;).paramName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.cmdSpeed&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;this.dynamicSpindleInfo.spindlePayLoad.cmdSpeed !== null&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; dynamicSpindleInfo.spindlePayLoad.cmdSpeed &#125;&#125;</span><br><span class="line">              &#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;cmdSpeed&#x27;).paramUnit &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.actSpeed&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>&#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;actSpeed&#x27;).paramName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-if</span>=<span class="string">&quot;this.showParam.actSpeed&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;this.dynamicSpindleInfo.spindlePayLoad.actSpeed !== null&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; dynamicSpindleInfo.spindlePayLoad.actSpeed &#125;&#125;</span><br><span class="line">              &#123;&#123; bindingParamInfo.find(item =&gt; item.mongoName === &#x27;actSpeed&#x27;).paramUnit &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>更新时刻<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;this.dynamicSpindleInfo.time&quot;</span>&gt;</span>&#123;&#123; dynamicSpindleInfo.time &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>您可能未绑定速度相关变量，</span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`../../deviceCenter/type`&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span>&gt;</span>点击绑定<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else-if</span>=<span class="string">&quot;screenWidth &gt;= 350&quot;</span>&gt;</span></span><br><span class="line">          ...	<span class="comment">&lt;!-- 这里的tbody是屏幕宽度为350-991的情况，表格调整为3行2列，代码与上面基本一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else-if</span>=<span class="string">&quot;screenWidth &lt; 350&quot;</span>&gt;</span></span><br><span class="line">          ...	<span class="comment">&lt;!-- 这里的tbody是屏幕宽度小于350的情况，表格调整为6行1列，代码与上面基本一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;isEmptyObject(dynamicSpindleInfo)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>未找到最新主轴速度信息。</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>屏幕的宽度提前写在 <code>data</code> 里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">screenWidth</span>: <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span></span><br></pre></td></tr></table></figure>
<h4 id="5-3-5-主轴信息图表：子组件的图表展示与变量绑定"><a href="#5-3-5-主轴信息图表：子组件的图表展示与变量绑定" class="headerlink" title="5.3.5 主轴信息图表：子组件的图表展示与变量绑定"></a>5.3.5 主轴信息图表：子组件的图表展示与变量绑定</h4><p>变量绑定关系到图表的数据源，绑定就给图表数据，不绑定就不给，所以子组件最好也提前判断好是否绑定要画的变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否绑定？</span></span><br><span class="line"><span class="title function_">findMongoId</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listMongoVariable</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mongoId</span>.<span class="property">cmdSpeed</span> = response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">mongoName</span> === <span class="string">&#x27;cmdSpeed&#x27;</span>).<span class="property">id</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mongoId</span>.<span class="property">actSpeed</span> = response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">mongoName</span> === <span class="string">&#x27;actSpeed&#x27;</span>).<span class="property">id</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">findParamId</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">findParamId</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listParam</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">paramId</span>.<span class="property">cmdSpeed</span> = response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">mongoId</span> === <span class="variable language_">this</span>.<span class="property">mongoId</span>.<span class="property">cmdSpeed</span>).<span class="property">id</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">paramId</span>.<span class="property">actSpeed</span> = response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">mongoId</span> === <span class="variable language_">this</span>.<span class="property">mongoId</span>.<span class="property">actSpeed</span>).<span class="property">id</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">cmdSpeed</span> = response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">mongoId</span> === <span class="variable language_">this</span>.<span class="property">mongoId</span>.<span class="property">cmdSpeed</span>).<span class="property">paramName</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">actSpeed</span> = response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">mongoId</span> === <span class="variable language_">this</span>.<span class="property">mongoId</span>.<span class="property">actSpeed</span>).<span class="property">paramName</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">findWhetherBound</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">findWhetherBound</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listDevicetypeparam</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isBound</span>.<span class="property">cmdSpeed</span> = !!response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">devicetypeId</span> === <span class="variable language_">this</span>.<span class="property">devicetypeId</span> &amp;&amp; row.<span class="property">paramId</span> === <span class="variable language_">this</span>.<span class="property">paramId</span>.<span class="property">cmdSpeed</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isBound</span>.<span class="property">actSpeed</span> = !!response.<span class="property">rows</span>.<span class="title function_">find</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="property">devicetypeId</span> === <span class="variable language_">this</span>.<span class="property">devicetypeId</span> &amp;&amp; row.<span class="property">paramId</span> === <span class="variable language_">this</span>.<span class="property">paramId</span>.<span class="property">actSpeed</span>);</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这样通过 <code>isBound</code> 这个对象，就知道 <code>cmdSpeed</code> 和 <code>actSpeed</code> 绑定与否。</p>
<p>再将数据处理为 Echarts 接受的形式（拿了所有数据）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getSpeedDatasetSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speedDatasetSource</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> info <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">dynamicSpindleInfoList</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speedDatasetSource</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">time</span>: info.<span class="property">time</span>,</span><br><span class="line">      <span class="attr">cmdSpeed</span>: info.<span class="property">spindlePayLoad</span>.<span class="property">cmdSpeed</span>,</span><br><span class="line">      <span class="attr">actSpeed</span>: info.<span class="property">spindlePayLoad</span>.<span class="property">actSpeed</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最后初始化图表。客户要求默认只显示主轴指定转速（<code>cmdSpeed</code>），不显示主轴实际转速（<code>actSpeed</code>），这在 Echarts 中可以用 <code>selected</code> 属性设置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化图表</span></span><br><span class="line"><span class="title function_">getSpeedGraph</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> selected = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isBound</span>.<span class="property">cmdSpeed</span>) &#123;	<span class="comment">// 如果主轴指定转速被绑定了，就只显示它</span></span><br><span class="line">    selected[<span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">cmdSpeed</span>] = <span class="literal">true</span>;</span><br><span class="line">    selected[<span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">actSpeed</span>] = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    selected[<span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">actSpeed</span>] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speedGraph</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">speed_chart</span>, <span class="string">&quot;macarons&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speedGraph</span>.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">      <span class="attr">axisPointer</span>: &#123;	<span class="comment">// 坐标轴指示器</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,	<span class="comment">// 形式为一条线</span></span><br><span class="line">        <span class="attr">snap</span>: <span class="literal">true</span>	<span class="comment">// 自动吸附（时间轴的点比较小）</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;	<span class="comment">// 图例</span></span><br><span class="line">      <span class="attr">data</span>: [<span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">cmdSpeed</span>, <span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">actSpeed</span>],</span><br><span class="line">      <span class="attr">selected</span>: selected	<span class="comment">// 默认选择项</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&#x27;12%&#x27;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">      <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dataset</span>: &#123;</span><br><span class="line">      <span class="attr">dimensions</span>: [&#123;<span class="attr">name</span>: <span class="string">&#x27;time&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;time&#x27;</span>&#125;, <span class="string">&#x27;cmdSpeed&#x27;</span>, <span class="string">&#x27;actSpeed&#x27;</span>],</span><br><span class="line">      <span class="attr">source</span>: <span class="variable language_">this</span>.<span class="property">speedDatasetSource</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;时间&#x27;</span>,</span><br><span class="line">      <span class="attr">nameTextStyle</span>: &#123;</span><br><span class="line">        <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;time&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;转速/(r/min)&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">      <span class="attr">nameTextStyle</span>: &#123;</span><br><span class="line">        <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dataZoom</span>: [&#123;	<span class="comment">// 图表区域缩放</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;slider&#x27;</span>,	<span class="comment">// 滑动条缩放（图表下方）</span></span><br><span class="line">      <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">end</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">xAxisIndex</span>: <span class="number">0</span>,	<span class="comment">// 缩放x轴</span></span><br><span class="line">      <span class="attr">filterMode</span>: <span class="string">&#x27;none&#x27;</span>	<span class="comment">// 不过滤数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;inside&#x27;</span>,	<span class="comment">// 内置缩放（滚轮）</span></span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">end</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">xAxisIndex</span>: <span class="number">0</span>,	<span class="comment">// 缩放x轴</span></span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&#x27;none&#x27;</span>	<span class="comment">// 不过滤数据</span></span><br><span class="line">      &#125;],</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isBound</span>.<span class="property">cmdSpeed</span> ? &#123;	<span class="comment">// 绑定cmdSpeed的情况下</span></span><br><span class="line">        <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">cmdSpeed</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">        <span class="attr">encode</span>: &#123;</span><br><span class="line">          <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">y</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">false</span></span><br><span class="line">      &#125; : <span class="literal">null</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isBound</span>.<span class="property">actSpeed</span> ? &#123;	<span class="comment">// 绑定actSpeed的情况下</span></span><br><span class="line">        <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">paramName</span>.<span class="property">actSpeed</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">        <span class="attr">encode</span>: &#123;</span><br><span class="line">          <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">false</span></span><br><span class="line">      &#125; : <span class="literal">null</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">speedLoading</span> = <span class="literal">false</span>;	<span class="comment">// 停止父组件的加载动画</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终效果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-16.png" alt="坐标轴指示器的自动吸附"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-17.png" alt="两个图例都点上并进行缩放的情况"></p>
<h4 id="5-3-6-普通刷新"><a href="#5-3-6-普通刷新" class="headerlink" title="5.3.6 普通刷新"></a>5.3.6 普通刷新</h4><p>整个设备详细数据一共有 4 个普通刷新，分别是最上面的白色按钮「刷新状态」，以及 3 个动态数据卡片右上角的蓝色「刷新」文字。</p>
<p>刷新操作只要将按钮绑定到一个刷新函数就好了，函数内再调用重置相关信息或获得相关信息的函数，以实现数据刷新。这里我还写了几个 <code>loading</code> 变量，并将它们 <code>v-loading</code> 绑定到相关标签上，并在刷新时设置为 <code>true</code>，获取完毕数据后设置为 <code>false</code>，这样就可以实现加载功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新处理</span></span><br><span class="line"><span class="title function_">handleGlobalRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">openLoading</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speedLoading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tableLoading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">driveLoading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getBasicInfo</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">speed</span>.<span class="title function_">getNcsId</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">drive</span>.<span class="title function_">getNcsId</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleDynamicRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tableLoading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getDynamicTimeInfo</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleSpeedRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speedLoading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speedDate</span>.<span class="property">date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>()).<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getDynamicSpindleInfo</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">speed</span>.<span class="title function_">getNcsId</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleDriveRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">driveLoading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">driveDate</span>.<span class="property">date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>()).<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getDynamicSpindleInfo</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">drive</span>.<span class="title function_">getNcsId</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-18.png" alt="全局刷新加载（左下角）和卡片刷新加载（右边中部）"></p>
<h4 id="5-3-7-自动刷新"><a href="#5-3-7-自动刷新" class="headerlink" title="5.3.7 自动刷新"></a>5.3.7 自动刷新</h4><p>这是个比较复杂的功能，需要综合运用 Vue 和 JavaScript 知识，写出来和 debug 都花了我一段时间。</p>
<p>实际上这个自动刷新用的还是上面的 <code>handleGlobalRefresh</code> 函数，只是要定时执行，并且还能调整开关与刷新频率。</p>
<p>先在页面的合适位置放上这两个按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;searchForm&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:model</span>=<span class="string">&quot;refreshParams&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;refreshForm&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label-width</span>=<span class="string">&quot;75px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;display: inline; margin: 5px 0 5px 15px;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;自动刷新&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;autoRefresh&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:5px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;refreshParams.autoRefresh&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;刷新频率&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;refreshFrequency&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:5px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;refreshParams.refreshFrequency&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleRefreshSetting&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 85px;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;item in refreshOptions&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-19.png" alt="自动刷新功能"></p>
<p>定义变量，默认情况下开启刷新开关，并设置频率为 10 s：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新频率</span></span><br><span class="line"><span class="attr">refreshParams</span>: &#123;</span><br><span class="line">  <span class="attr">autoRefresh</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">refreshFrequency</span>: <span class="number">10000</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">refreshOptions</span>: [</span><br><span class="line">  &#123;<span class="attr">value</span>: <span class="number">5000</span>, <span class="attr">label</span>: <span class="string">&#x27;5 s&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">value</span>: <span class="number">10000</span>, <span class="attr">label</span>: <span class="string">&#x27;10 s&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">value</span>: <span class="number">20000</span>, <span class="attr">label</span>: <span class="string">&#x27;20 s&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">value</span>: <span class="number">30000</span>, <span class="attr">label</span>: <span class="string">&#x27;30 s&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">value</span>: <span class="number">60000</span>, <span class="attr">label</span>: <span class="string">&#x27;60 s&#x27;</span>&#125;,</span><br><span class="line">],</span><br><span class="line"><span class="attr">refreshTimer</span>: <span class="literal">null</span>,</span><br></pre></td></tr></table></figure>
<p>当刷新频率发生变化时，即上面的 <code>el-select</code> 选中别的选项时，触发 <code>handleRefreshSetting</code> 函数，处理这个变化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleRefreshSetting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">refreshTimer</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">refreshTimer</span>);	<span class="comment">// 清除定时器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">refreshTimer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">refreshTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;	<span class="comment">// 设置新的定时器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">refreshParams</span>.<span class="property">autoRefresh</span>) &#123;	<span class="comment">// 如果自动刷新开关打开，执行刷新</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleGlobalRefresh</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="variable language_">this</span>.<span class="property">refreshParams</span>.<span class="property">refreshFrequency</span>);	<span class="comment">// 频率设置为新的频率</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>重点来了</strong>，由于这是个路由页面，所以可以利用 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">Vue 路由的导航守卫</a>（导航表示路由发生改变）和 Vue 的生命周期 destroyed（现已改名为 <a href="https://v3.cn.vuejs.org/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">unmounted</a>），来处理可能发生的变化，并按不同的变化执行刷新操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 以下的to表示进入的路由对象，from表示离开的路由对象，next表示进入路由的钩子函数</span></span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;	<span class="comment">// 进入路由前</span></span><br><span class="line">    <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;	<span class="comment">// 由于此时获取this，因此需要通过vm访问</span></span><br><span class="line">      vm.<span class="property">refreshTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;	<span class="comment">// 新建一个定时器</span></span><br><span class="line">        <span class="keyword">if</span> (vm.<span class="property">refreshParams</span>.<span class="property">autoRefresh</span>) &#123;</span><br><span class="line">          vm.<span class="title function_">handleGlobalRefresh</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, vm.<span class="property">refreshParams</span>.<span class="property">refreshFrequency</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;	<span class="comment">// 路由更新前（从一个机床的详细数据跳到另一个的时候）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">refreshTimer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">refreshTimer</span>);	<span class="comment">// 清除定时器</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">refreshTimer</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;	<span class="comment">// 离开路由前</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">refreshTimer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">refreshTimer</span>);	<span class="comment">// 清除定时器</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">refreshTimer</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;	<span class="comment">// Vue对象销毁时</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">refreshTimer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">refreshTimer</span>);	<span class="comment">// 清除定时器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">refreshTimer</span> = <span class="literal">null</span>;	<span class="comment">// 无论如何要设置定时器为null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>凡是在路由内设置定时器，一定要通过导航守卫去处理它</strong>，否则会出现离开了详细数据页面，别的页面还在每隔 10 s 自动刷新的 bug。</p>
<h2 id="6-首页的合作伙伴"><a href="#6-首页的合作伙伴" class="headerlink" title="6 首页的合作伙伴"></a>6 首页的合作伙伴</h2><p>首页的其他部分是苏州团队做的，下面的合作伙伴是我做的。合作伙伴只要放进公司的 logo 和名称就行了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom:0.5rem&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">&quot;update-log&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>合作伙伴<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xl</span>=<span class="string">&quot;2&quot;</span> <span class="attr">:lg</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:md</span>=<span class="string">&quot;6&quot;</span> <span class="attr">:sm</span>=<span class="string">&quot;8&quot;</span> <span class="attr">:xs</span>=<span class="string">&quot;12&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">v-for</span>=<span class="string">&quot;(i, index) in 20&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 0.5rem; height: 70px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-image</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;width: auto; height: 30px; margin: 0 auto&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:src</span>=<span class="string">&quot;partnerLogos[index]&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">fit</span>=<span class="string">&quot;scale-down&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span><span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 10px; text-align: center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; partnerNames[index].abbr &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每一个企业都是一个 <code>el-col</code>，分为 logo 的 <code>div</code> 和名称的 <code>div</code>。每一个 <code>el-col</code> 使用了 <code>v-for</code>，所以要绑定 <code>key</code>。</p>
<p>企业的名称写死在 <code>data</code> 中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">partnerNames</span>: [</span><br><span class="line">  &#123;<span class="attr">full</span>: <span class="string">&quot;德国西门子&quot;</span>, <span class="attr">abbr</span>: <span class="string">&quot;德国西门子&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">full</span>: <span class="string">&quot;江阴塞特精密工具有限公司&quot;</span>, <span class="attr">abbr</span>: <span class="string">&quot;江阴塞特&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">full</span>: <span class="string">&quot;杭州新剑机器人技术股份有限公司&quot;</span>, <span class="attr">abbr</span>: <span class="string">&quot;杭州新剑&quot;</span>&#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>企业的 logo 由于位置一致，只是名称不同，因此写个函数去获取它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">partnerLogos</span>: [],</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getLogos</span>();</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">getLogos</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">partnerLogos</span>.<span class="title function_">push</span>(<span class="built_in">require</span>(<span class="string">&quot;../assets/partners/&quot;</span> + (i &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + i : i) + <span class="string">&#x27;.png&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>从 5 月到 7 月，我就在做这些模块的前端开发。与我们之前做的模块不同，这些模块大部分是纯前端工作，比如统计图、设备看板等，除此之外，前端还要构思从后端拿到数据后怎么处理数据的逻辑。拿到变量绑定数据，怎么让它以用户自定义的情况显示？拿到机床主轴数据，怎么让它画成既直观又美观、还让客户满意的图表？都需要我去想想。</p>
<p>因此，<strong>越是傻瓜式的页面与操作方式，肯定是程序在背后为你做了越多的事情，这些程序也是程序员的思想结晶。</strong></p>
<p>这个项目已经验收完毕了，通过开发这个项目，我也学会了很多前端的知识，和一些后端、数据库知识。这些知识希望在将来都能用得上。接下来的任务，就是聚焦一个研究方向，好好做科研了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211028/20211028-23.png" alt="统计报表、工作台等剩余模块的 commit 过程"></p>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>工业互联网平台</tag>
        <tag>编程</tag>
        <tag>前端</tag>
        <tag>技术</tag>
        <tag>Vue</tag>
        <tag>ElementUI</tag>
        <tag>Echarts</tag>
        <tag>开发</tag>
        <tag>远程运维</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个模板字符串替换，数据源为对象</title>
    <url>/2022/10/06/implement-a-template-string-replacement-and-the-data-source-is-an-object/</url>
    <content><![CDATA[<p>这是当时面阿里云遇到的一个手撕代码题，而且是三道里面最简单的一道……现在看来仍然很有难度。现在一步一步解决它。</p>
<span id="more"></span>
<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a>1 题目</h2><p>实现一个 <code>render</code> 函数，函数传入一个字符串和一个对象，将字符串里用 <code>&#123;&#123; &#125;&#125;</code> 标记的占位符用对象里的属性值替换，并返回新字符串。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> template = <span class="string">&quot;你好，我们是&#123;&#123;company&#125;&#125;，我们来自&#123;&#123;group&#125;&#125;，我们有&#123;&#123;business[0]&#125;&#125;、&#123;&#123;business[1]&#125;&#125;等。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">company</span>: <span class="string">&quot;阿里&quot;</span>,</span><br><span class="line">  <span class="attr">group</span>: <span class="string">&quot;蚂蚁&quot;</span>,</span><br><span class="line">  <span class="attr">business</span>: [<span class="string">&quot;支付宝&quot;</span>, <span class="string">&quot;蚂蚁金服&quot;</span>, <span class="string">&quot;相互宝&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;你好，我们是阿里，我们来自蚂蚁，我们有支付宝、蚂蚁金服等。&quot;</span><br></pre></td></tr></table></figure>
<p>题目保证占位符一定是对象里的属性名。</p>
<h2 id="2-暴力解法"><a href="#2-暴力解法" class="headerlink" title="2 暴力解法"></a>2 暴力解法</h2><p>最简单的方法就是直接使用 <code>split</code> 将字符串分割开，然后使用 <code>switch</code> 循环挨个替换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = template.<span class="title function_">split</span>(<span class="regexp">/&#123;&#123;|&#125;&#125;/</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (arr[i]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;company&quot;</span>: arr[i] = obj.<span class="property">company</span>; <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;group&quot;</span>: arr[i] = obj.<span class="property">group</span>; <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;business[0]&quot;</span>: arr[i] = obj.<span class="property">business</span>[<span class="number">0</span>]; <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;business[1]&quot;</span>: arr[i] = obj.<span class="property">business</span>[<span class="number">1</span>]; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做很不优雅，而且只能解决示例，无法解决其他判例。</p>
<h2 id="3-从简单例子开始"><a href="#3-从简单例子开始" class="headerlink" title="3 从简单例子开始"></a>3 从简单例子开始</h2><p>既然上面的 <code>split</code> 为了同时分割 <code>&#123;&#123; &#125;&#125;</code> 使用了正则，那么我们为什么不用正则来做呢！</p>
<p>我们暂时不考虑数组的形式，从一个简单的例子开始：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> template = <span class="string">&quot;我叫&#123;&#123;name&#125;&#125;，我今年&#123;&#123;age&#125;&#125;岁了。&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 我叫小明，我今年18岁了。</span></span><br></pre></td></tr></table></figure>
<p>然后来看看几个使用正则的方法：</p>
<h3 id="3-1-方法-1"><a href="#3-1-方法-1" class="headerlink" title="3.1 方法 1"></a>3.1 方法 1</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  template = template.<span class="title function_">replace</span>(<span class="regexp">/&#123;&#123;(\w+)&#125;&#125;/g</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    template = template.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(key, <span class="string">&#x27;g&#x27;</span>), obj[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法的思路是，先把所有 <code>&#123;&#123;*&#125;&#125;</code> 格式的占位符全部去掉大括号（使用圆括号捕获的 <code>$1</code>），然后尝试与 <code>obj</code> 的属性名匹配。</p>
<p>这个方法的问题在于：</p>
<ul>
<li><p>属性名不一定是 <code>\w</code>（即字母、数字或下划线）。</p>
</li>
<li><p>如果出现了不必要替换的字符串，就会出现错误替换，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> template = <span class="string">&quot;我的name是&#123;&#123;name&#125;&#125;，我今年&#123;&#123;age&#125;&#125;岁了。&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>因此我们最好把占位符做个整体替换，而非去掉大括号后再替换。</p>
<h3 id="3-2-方法-2"><a href="#3-2-方法-2" class="headerlink" title="3.2 方法 2"></a>3.2 方法 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = template.<span class="title function_">match</span>(<span class="regexp">/&#123;&#123;[a-zA-Z\d]+&#125;&#125;/g</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] = arr[i].<span class="title function_">replace</span>(<span class="regexp">/&#123;&#123;|&#125;&#125;/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    template = template.<span class="title function_">replace</span>(<span class="string">&quot;&#123;&#123;&quot;</span> + arr[i] + <span class="string">&quot;&#125;&#125;&quot;</span>, obj[arr[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法是整体替换的思路，先拿出所有 <code>&#123;&#123;*&#125;&#125;</code> 格式的占位符，放到一个数组里，然后通过 <code>replace</code> 去掉大括号，并替换原数组中的占位符。</p>
<p>但是我们发现要多次匹配 <code>&#123;&#123;*&#125;&#125;</code>，并且属性名也不一定是 <code>[a-zA-Z\d]+</code>。</p>
<h3 id="3-3-方法-3"><a href="#3-3-方法-3" class="headerlink" title="3.3 方法 3"></a>3.3 方法 3</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    template = template.<span class="title function_">replace</span>(<span class="string">`&#123;&#123;<span class="subst">$&#123;key&#125;</span>&#125;&#125;`</span>, obj[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于 <code>replace</code> 本身就做了一步正则匹配，遍历所有的键，再匹配替换一步走就行了。</p>
<p>这个方法还是不够精炼，我们希望直接拿到 <code>template</code> 里的占位符 <code>&#123;&#123;*&#125;&#125;</code>，而不要通过 <code>obj</code> 的 <code>key</code>。</p>
<h3 id="3-4-方法-4"><a href="#3-4-方法-4" class="headerlink" title="3.4 方法 4"></a>3.4 方法 4</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> template.<span class="title function_">replace</span>(<span class="regexp">/&#123;&#123;(.*?)&#125;&#125;/g</span>, <span class="function">(<span class="params">match, key</span>) =&gt;</span> obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里补充几个知识：</p>
<ol>
<li><code>.*?</code> 是正则固定用法，表示非贪婪匹配，防止从第一个 <code>&#123;&#123;` 到最后一个 `&#125;&#125;</code> 都被匹配</li>
<li><code>replace</code> 第二个参数支持一个回调函数，回调函数第一个参数是匹配结果，第二个参数是正则中的子表达式匹配结果（可以有 0 个或多个该参数），接下来的参数是匹配位置，最后的参数是原串本身</li>
</ol>
<p>我们用 <code>.*?</code> 匹配了任何 <code>&#123;&#123;*&#125;&#125;</code> 格式的占位符并用圆括号捕获了内部的属性值，然后使用函数接收捕获结果并替换。</p>
<h2 id="4-更复杂一点"><a href="#4-更复杂一点" class="headerlink" title="4 更复杂一点"></a>4 更复杂一点</h2><p>我们现在打算替换 <code>&#123;&#123;business[0]&#125;&#125;</code> 这样的占位符。这给我们带来了两个问题：</p>
<ul>
<li>如何匹配？可以试试改一下正则表达式</li>
<li>如何替换？如果还使用 <code>obj[key]</code> 就不行了，我们必须分开字母与后面的索引</li>
</ul>
<h3 id="4-1-改写方法-2"><a href="#4-1-改写方法-2" class="headerlink" title="4.1 改写方法 2"></a>4.1 改写方法 2</h3><p>我们改写方法 2 的正则表达式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = template.<span class="title function_">match</span>(<span class="regexp">/&#123;&#123;[a-zA-Z\d]+(\[\d+\])?&#125;&#125;/g</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] = arr[i].<span class="title function_">replace</span>(<span class="regexp">/&#123;&#123;|&#125;&#125;/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    template = template.<span class="title function_">replace</span>(<span class="string">&quot;&#123;&#123;&quot;</span> + arr[i] + <span class="string">&quot;&#125;&#125;&quot;</span>, <span class="built_in">eval</span>(<span class="string">&quot;obj.&quot;</span> + arr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用 <code>?</code> 判断 <code>[*]</code> 表达式存在与否，使用 <code>\[\d+\]</code> 匹配 <code>[*]</code> 表达式。</p>
<p>注意这里使用了 <code>eval</code> 函数，它将传入它的 JS 字符串作为 JS 语句执行。这是一个非常危险的方法，我们一般不使用它。</p>
<p>在例子中，<code>eval</code> 得到的 JS 语句 <code>obj.business[0]</code> 等同于 <code>obj[&quot;business&quot;][0]</code>，因此得到 <code>&quot;支付宝&quot;</code>。</p>
<h3 id="4-2-改写方法-4"><a href="#4-2-改写方法-4" class="headerlink" title="4.2 改写方法 4"></a>4.2 改写方法 4</h3><p>方法 4 的正则表达式无需修改，只要把 <code>eval</code> 加上就行了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> template.<span class="title function_">replace</span>(<span class="regexp">/&#123;&#123;(.*?)&#125;&#125;/g</span>, <span class="function">(<span class="params">match, key</span>) =&gt;</span> <span class="built_in">eval</span>(<span class="string">&quot;obj.&quot;</span> + key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们还是不要用 <code>eval</code> 好了，那就在匹配时分别拿到前后两部分。</p>
<h2 id="5-不要-eval"><a href="#5-不要-eval" class="headerlink" title="5 不要 eval"></a>5 不要 <code>eval</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> template.<span class="title function_">replace</span>(<span class="regexp">/&#123;&#123;(.*?)(\[(\d)*\])?&#125;&#125;/g</span>, <span class="function">(<span class="params">match, key, index, num</span>) =&gt;</span> index ? obj[key][num] : obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这个正则表达式，我们在三个圆括号表达式里分别捕获了属性值、索引和索引内的数字，那就拿到函数里操作就行了。</p>
<p>完美！</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://wenku.baidu.com/view/15486d3f5c0e7cd184254b35eefdc8d376ee14d0.html">thymeleaf的遍历拼接字符串_一行代码实现一个简单的模板字符串替换 - 百度文库</a></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>面试</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 GitHub Pages 中使用动态数据</title>
    <url>/2021/11/23/how-to-use-dynamic-data-in-github-pages/</url>
    <content><![CDATA[<p>最近在写一个纯前端兴趣项目时遇到的问题，前端需要展示一些数据。在传统的开发模式中，如 Java 小游戏开发，会把这些数据存储在文件中（如历史分数等），可以对其进行读写。但在前端开发时，这些数据的交互变得比较复杂，尤其是需要读写的时候。</p>
<span id="more"></span>
<h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1 需求分析"></a>1 需求分析</h2><p>在传统的本地开发模式中，当我们需要一个长期稳定存储的数据，并可以对它进行读写时，通常不会把它写在代码里，而是放在一个文件中，并通过 IO 流的方式去操作它，这在 Java 小游戏开发中比较常见，例如游戏历史分数。</p>
<p>当我们在写纯前端项目，并把它展示到 <a href="https://pages.github.com/">GitHub Pages</a> 时，这就不适用了。众所周知，GitHub Pages 提供的是静态页面展示，我们应该是可以通过固定的 JavaScript 代码去实现文件的读取，但如果要写文件的话，且不说 JavaScript 如何实现文件写入，由于我们的文件放在 GitHub 仓库里，要更改仓库文件其实就是一次 <code>git push</code> 过程，这就比较奇怪了。</p>
<blockquote>
<p>JavaScript 实现文本文件的读取：参考<a href="https://www.cnblogs.com/jscs/p/13444671.html">https://www.cnblogs.com/jscs/p/13444671.html</a></p>
<p>写一个函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">load</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  <span class="keyword">let</span> okStatus = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">protocol</span> === <span class="string">&quot;file:&quot;</span> ? <span class="number">0</span> : <span class="number">200</span>;</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, path, <span class="literal">false</span>);</span><br><span class="line">  xhr.<span class="title function_">overrideMimeType</span>(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);<span class="comment">//默认为utf-8</span></span><br><span class="line">  xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> xhr.<span class="property">status</span> === okStatus ? xhr.<span class="property">responseText</span> : <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>然后再调用函数，传入文件路径，返回的是一个字符串，包含文件所有内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="title function_">load</span>(<span class="string">&quot;data/text.txt&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br></pre></td></tr></table></figure>
<p>也可以使用 JSON 格式的数据，那就更简单了，在此不表。</p>
</blockquote>
<p>但我们又不可避免地需要使用一些动态数据，并通过前端实现读写，最好是像数据库一样，可以实现增删改查。</p>
<p>参考资料：</p>
<ol>
<li><a href="https://blog.csdn.net/tiandixuanwuliang/article/details/81738512">研究使用Github Pages搭建具有数据库的个人网站</a></li>
<li><a href="https://blog.csdn.net/dongzhuo/article/details/88051383">github page建立动态网站</a></li>
<li><a href="https://www.zhihu.com/question/30869973?d=123">github可以搭建动态网站吗? - 知乎</a></li>
</ol>
<h2 id="2-基本页面部分"><a href="#2-基本页面部分" class="headerlink" title="2 基本页面部分"></a>2 基本页面部分</h2><p>下面我们举一个例子，这个例子就是个简单的表格，需要有增删改查功能。</p>
<p>在 WebStorm 或 Idea 中新建一个项目 <code>CloudBackendExample</code>，然后新建文件 <code>index.html</code>，导入 Vue 和 ElementUI，并写一个表格模板。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- import Vue before Element --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- import Element CSS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- import Element JavaScript --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 搜索功能 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;queryParams&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;showSearch&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;68px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;queryParams.name&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;handleQuery&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleQuery&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-refresh&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;resetQuery&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 增删改按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;10&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mb8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-plus&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleAdd&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;single&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate&quot;</span>&gt;</span>修改</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;multiple&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete&quot;</span>&gt;</span>删除</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">right-toolbar</span> <span class="attr">:showSearch.sync</span>=<span class="string">&quot;showSearch&quot;</span> @<span class="attr">queryTable</span>=<span class="string">&quot;getList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">right-toolbar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 数据表格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;basicList&quot;</span> @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span> <span class="attr">stripe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;年级&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;grade&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;得分&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;points&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class-name</span>=<span class="string">&quot;small-padding fixed-width&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 添加或修改数据对话框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;open&quot;</span> <span class="attr">width</span>=<span class="string">&quot;700px&quot;</span> <span class="attr">append-to-body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;75px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;年级&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;grade&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.grade&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入年级&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;得分&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;points&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input-number</span> <span class="attr">v-model</span>=<span class="string">&quot;form.points&quot;</span> <span class="attr">:min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input-number</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.address&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入地址&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 响应式布局处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1000px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.el-dialog</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">80%</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时，新建一个 <code>index.js</code>，先写好一些基本的 Vue 内容，比如一些数据和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 遮罩层</span></span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 选中数组</span></span><br><span class="line">      <span class="attr">selections</span>: [],</span><br><span class="line">      <span class="comment">// 非单个禁用</span></span><br><span class="line">      <span class="attr">single</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 非多个禁用</span></span><br><span class="line">      <span class="attr">multiple</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 显示搜索条件</span></span><br><span class="line">      <span class="attr">showSearch</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 表格数据</span></span><br><span class="line">      <span class="attr">tableList</span>: [],</span><br><span class="line">      <span class="comment">// 弹出层标题</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="comment">// 是否显示弹出层</span></span><br><span class="line">      <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 查询参数</span></span><br><span class="line">      <span class="attr">queryParams</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 表单参数</span></span><br><span class="line">      <span class="attr">form</span>: &#123;&#125;,</span><br><span class="line">      <span class="comment">// 表单校验</span></span><br><span class="line">      <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;姓名不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;],</span><br><span class="line">        <span class="attr">grade</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;年级不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;],</span><br><span class="line">        <span class="attr">points</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;得分不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>&#125;],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">/** 查询表格数据 */</span></span><br><span class="line">    <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 这里是查询操作</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 搜索按钮操作 */</span></span><br><span class="line">    <span class="title function_">handleQuery</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 重置按钮操作 */</span></span><br><span class="line">    <span class="title function_">resetQuery</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 多选框选中数据</span></span><br><span class="line">    <span class="title function_">handleSelectionChange</span>(<span class="params">selection</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">selections</span> = selection;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">single</span> = selection.<span class="property">length</span> !== <span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">multiple</span> = !selection.<span class="property">length</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 新增按钮操作 */</span></span><br><span class="line">    <span class="title function_">handleAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;添加数据&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 修改按钮操作 */</span></span><br><span class="line">    <span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">      <span class="comment">// 这里获得修改对象的信息</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;修改数据&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 提交按钮 */</span></span><br><span class="line">    <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="comment">// 这里是新增或修改操作</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消按钮</span></span><br><span class="line">    <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表单重置</span></span><br><span class="line">    <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">form</span> = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">grade</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">points</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 删除按钮操作 */</span></span><br><span class="line">    <span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里是删除操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这个页面是可以预览的，也没什么问题，它甚至可以直接传到 GitHub 仓库里，开 GitHub Pages 后可以直接在网络上预览。但是它没有任何数据，而且增删改查按钮都不能用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-01.png" alt="预览页面"></p>
<h2 id="3-云后端简介"><a href="#3-云后端简介" class="headerlink" title="3 云后端简介"></a>3 云后端简介</h2><p>这时候就要用到云后端了。云后端相当于传统项目开发中的数据库 + 后端，对于纯前端开发来说，它可以实现数据存储、增删改查功能，和传统开发一样，给前端一个 api 接口，前端用它就好了。</p>
<blockquote>
<p>大部分的产品都是数据驱动的，它们有一个最大的特点，就是对后端的需求在模式上其实是比较统一的：</p>
<ul>
<li>前端负责数据展现和用户交互处理，与后端的 app server 通过网络来交换需要的数据；</li>
<li>app server 负责业务逻辑处理，生成核心数据存储到 data server，或者聚合 data server 查询到的数据返回给客户端；</li>
<li>data server 负责核心数据的存储和备份。</li>
</ul>
<p>这样的模式适合互联网上绝大部分产品，虽然数据结构有差异、业务逻辑不一样，但是前后端交互的主体——「数据」，抽象来看是一致的，后端的架构（譬如 LAMP）也是大同小异的，而且同样的系统在一遍一遍地被重复开发，极大浪费了我们宝贵的技术资源。</p>
<p>——<a href="https://leancloud.cn/docs/storage_overview.html">LeanCloud 文档：数据存储服务总览</a></p>
</blockquote>
<p>比如以 <a href="https://www.leancloud.cn/">LeanCloud</a> 云服务为例，它提供数据存储、云引擎 + 数据库、即时通讯等服务，我们其实只需要 <strong>数据存储</strong> 里的 <strong>结构化数据存储</strong> 功能就可以了。它直接存储 JSON 对象并提供增删改查接口，这就可以让我们的页面发生变化了。</p>
<p>注册一个 LeanCloud 账号，进入控制台，创建一个应用，输入应用名称，开发版已经足够使用了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-02.png" alt="创建应用"></p>
<p>我们使用 JavaScript 写入每个功能，所以参考 <a href="https://leancloud.cn/docs/leanstorage_guide-js.html">LeanCloud 里 JavaScript 的数据存储开发文档</a>。</p>
<h2 id="4-写入增删改查功能"><a href="#4-写入增删改查功能" class="headerlink" title="4 写入增删改查功能"></a>4 写入增删改查功能</h2><h3 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h3><p>根据文档，我们首先引入 SDK，直接在 <code>index.html</code> 中通过 CDN 引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  import LeanCloud--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//code.bdstatic.com/npm/leancloud-storage@4.12.0/dist/av-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后再在 <code>index.js</code> 开头引用全局变量 <code>AV</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Query</span>, <span class="title class_">User</span> &#125; = <span class="variable constant_">AV</span>;</span><br></pre></td></tr></table></figure>
<p>服务需要初始化，我们在控制台中找到应用凭证，将 App ID、App Key 和服务器地址放到初始化函数中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-03.png" alt="应用凭证"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">AV</span>.<span class="title function_">init</span>(&#123;</span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&quot;sJRG...&quot;</span>,</span><br><span class="line">  <span class="attr">appKey</span>: <span class="string">&quot;lgxM...&quot;</span>,</span><br><span class="line">  <span class="attr">serverURL</span>: <span class="string">&quot;https://sj...&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>搞定之后，还需要创建一个 Class 来存放结构化数据。根据 <a href="https://leancloud.cn/docs/leanstorage_guide-js.html#hash813593086">文档</a>，Class 可以在 JavaScript 中被创建，但我们并不需要在前端中去创建 Class，所以我们在控制台添加好。</p>
<p>在控制台中找到数据存储的结构化数据，创建一个新的 Class，并把权限设置为无限制，以便可以进行读写。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-04.png" alt="创建Class"></p>
<p>添加若干列，并设置好列名称和列类型：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-05.png" alt="添加id属性"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-06.png" alt="添加name属性及其他属性"></p>
<p>再在控制台添加几行示例数据，以准备完成接下来的查找功能。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-07.png" alt="添加两行示例数据"></p>
<h3 id="4-2-查"><a href="#4-2-查" class="headerlink" title="4.2 查"></a>4.2 查</h3><p>首先完成 <code>getList</code> 函数，这是最基本的函数，展示表格、实现搜索都用到它。</p>
<p>构建一个 <code>Av.Query</code>，无需添加其查询条件，直接寻找，可以获取到所有对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> queryAll = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Data&#x27;</span>);	<span class="comment">// Data为Class名</span></span><br><span class="line">queryAll.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// rows是所有对象的数组</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在前端 log 一下 <code>rows</code>，发现是这个东西：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-08.png" alt="console.log(rows)"></p>
<p>好耶！得到一个数组，这个数组长度为 2，正好是我们刚添加的两条数据，里面是 2 个对象。只是它里面的对象仿佛不是一个我们要的 JSON 数据。</p>
<p>原来这个对象是封装好的，取属性值可以通过对象的 <code>get</code> 函数，或是通过 <code>attributes</code> 属性。我们把 <code>attributes</code> 属性放到表格数据里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tableList</span> = [];</span><br><span class="line">  <span class="keyword">const</span> queryAll = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">  queryAll.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row <span class="keyword">of</span> rows) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tableList</span>.<span class="title function_">push</span>(row.<span class="property">attributes</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>表格中有数据了！</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-09.png" alt="通过 getList，表格拿到了数据"></p>
<p>接下来完成搜索功能，搜索功能实际上也只是调用 <code>getList</code>，所以 <code>getList</code> 还需要再根据 <code>queryParams</code> 改一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tableList</span> = [];</span><br><span class="line">  <span class="keyword">const</span> queryAll = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">name</span>) &#123;	<span class="comment">// 注意在js中，空字符串被视为false</span></span><br><span class="line">    queryAll.<span class="title function_">contains</span>(<span class="string">&#x27;name&#x27;</span>, <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">// 这里相当于SQL中的 name LIKE &#x27;%...%&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  queryAll.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row <span class="keyword">of</span> rows) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tableList</span>.<span class="title function_">push</span>(row.<span class="property">attributes</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>搜索功能就完成了。<code>handleQuery</code> 和 <code>resetQuery</code> 两个函数也不需要改动。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-10.png" alt="搜索功能"></p>
<h3 id="4-3-增"><a href="#4-3-增" class="headerlink" title="4.3 增"></a>4.3 增</h3><p>新增按钮的函数 <code>handleAdd</code> 无需修改，目前即使我们不写任何操作，点击新增按钮，也可以出现这个对话框：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-11.png" alt="添加数据对话框"></p>
<p>我们要写的是确定按钮的函数 <code>submitForm</code>。由于这个对话框新增与修改共用，因此我们在函数里，需要判断一下当前操作是新增还是修改，它们最大的不同是当前的 <code>form</code> 数据的 <code>id</code> 属性是否为 <code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">id</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里是修改操作</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 这里是新增操作</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>添加数据的方法是，先新建一个 Data 的对象，然后通过 <code>set</code> 设定其属性值，再调用 <code>save</code> 存储到云端。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">id</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里是修改操作</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Object</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">name</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;grade&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">grade</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;points&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">points</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;address&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">address</span>);</span><br><span class="line">        data.<span class="title function_">save</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;新增成功!&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>尝试加入一条数据试试，然后看看页面展示的效果和云后端控制台的数据：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-12.png" alt="表格中成功新增数据"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-13.png" alt="云后端控制台也成功新增数据，并且自动设置 id"></p>
<h3 id="4-4-删"><a href="#4-4-删" class="headerlink" title="4.4 删"></a>4.4 删</h3><p>我们要写函数 <code>handleDelete</code>，并且注意，删除可以单选删除，可以多选删除，需要删除的参数可能是对象或数组。这是由是否传入参数 <code>row</code> 来决定的，需要注意的是，虽然上面的删除按钮和右侧的删除按钮调用同一个函数，上面的删除按钮没有传入参数 <code>row</code>，此时会传入一个 <strong>点击事件</strong> 并赋给 <code>row</code>。可以通过判断 <code>row.id</code> 的方式，来判断当前点击的是哪个删除按钮；如果通过 <code>row</code>，那就无法判断了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (row.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;是否确认删除该数据?&#x27;</span>, <span class="string">&quot;警告&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">      <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 删除单个数据（对象）</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="variable language_">this</span>.<span class="property">selections</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;是否确认删除&#x27;</span> + (length &gt; <span class="number">1</span> ? <span class="string">&#x27;这&#x27;</span> + length + <span class="string">&#x27;个&#x27;</span> : <span class="string">&#x27;该&#x27;</span>) + <span class="string">&#x27;数据?&#x27;</span>, <span class="string">&quot;警告&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">      <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 删除多个数据（数组）</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于对象，直接调用 <code>destroy</code> 就好；对于数组，可以使用 <code>destroyAll</code> 一次请求中删除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (row.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;是否确认删除该数据?&#x27;</span>, <span class="string">&quot;警告&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">      <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> query = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">      query.<span class="title function_">equalTo</span>(<span class="string">&#x27;id&#x27;</span>, row.<span class="property">id</span>);</span><br><span class="line">      query.<span class="title function_">first</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        data.<span class="title function_">destroy</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;删除成功!&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="variable language_">this</span>.<span class="property">selections</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;是否确认删除&#x27;</span> + (length &gt; <span class="number">1</span> ? <span class="string">&#x27;这&#x27;</span> + length + <span class="string">&#x27;个&#x27;</span> : <span class="string">&#x27;该&#x27;</span>) + <span class="string">&#x27;数据?&#x27;</span>, <span class="string">&quot;警告&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">      <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> ids = <span class="variable language_">this</span>.<span class="property">selections</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">const</span> query = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">      query.<span class="title function_">containedIn</span>(<span class="string">&#x27;id&#x27;</span>, ids);</span><br><span class="line">      query.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable constant_">AV</span>.<span class="property">Object</span>.<span class="title function_">destroyAll</span>(rows).<span class="title function_">then</span>(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;	<span class="comment">// 找到的rows就是需要被一次删掉的rows数组</span></span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;删除成功!&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尝试删除某数据，发现数据从表中和后台中删除。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-14.png" alt="删除提示"></p>
<h3 id="4-5-改"><a href="#4-5-改" class="headerlink" title="4.5 改"></a>4.5 改</h3><p>修改与新增用的是同一个对话框，因此修改时，要先获得修改对象的数据，并赋给 <code>form</code>。修改对象的传入也有两种方式，一种是当前行 <code>row</code>，一种是选中数组（长度为 1）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">  <span class="keyword">const</span> id = row.<span class="property">id</span> || <span class="variable language_">this</span>.<span class="property">selections</span>[<span class="number">0</span>].<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> query = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">  query.<span class="title function_">equalTo</span>(<span class="string">&#x27;id&#x27;</span>, id);</span><br><span class="line">  query.<span class="title function_">first</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span> = &#123;</span><br><span class="line">      <span class="attr">id</span>: data.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: data.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">      <span class="attr">grade</span>: data.<span class="title function_">get</span>(<span class="string">&#x27;grade&#x27;</span>),</span><br><span class="line">      <span class="attr">points</span>: data.<span class="title function_">get</span>(<span class="string">&#x27;points&#x27;</span>),</span><br><span class="line">      <span class="attr">address</span>: data.<span class="title function_">get</span>(<span class="string">&#x27;address&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;修改数据&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>点击右边的修改或是上面的修改，发现可以显示当前数据的信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-15.png" alt="修改数据对话框"></p>
<p>最后再完成 <code>submitForm</code> 函数中修改操作的部分，这部分与新增操作类似。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">id</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> query = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">        query.<span class="title function_">equalTo</span>(<span class="string">&#x27;id&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">id</span>);</span><br><span class="line">        query.<span class="title function_">first</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          data.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">name</span>);</span><br><span class="line">          data.<span class="title function_">set</span>(<span class="string">&#x27;grade&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">grade</span>);</span><br><span class="line">          data.<span class="title function_">set</span>(<span class="string">&#x27;points&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">points</span>);</span><br><span class="line">          data.<span class="title function_">set</span>(<span class="string">&#x27;address&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">address</span>);</span><br><span class="line">          data.<span class="title function_">save</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&#x27;修改成功!&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Object</span>(<span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">name</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;grade&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">grade</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;points&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">points</span>);</span><br><span class="line">        data.<span class="title function_">set</span>(<span class="string">&#x27;address&#x27;</span>, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">address</span>);</span><br><span class="line">        data.<span class="title function_">save</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;新增成功!&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>尝试修改某数据，发现成功实现修改。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-16.png" alt="修改数据"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211122/20211122-17.png" alt="修改成功"></p>
<p>至此，增删改查功能已经全部完成了，这个页面也达到了它实际上的使用效果。</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>云后端可以解决纯前端代码有时候需要用到动态数据时的一些难题，其直接提供 JSON 数据的存储，并提供增删改查接口，省去前端开发中缺少后端服务器和数据库的问题。对于一些简单的前端程序，比如只用前端写一个排行榜并放到 GitHub Pages 上，这个排行榜数据极其简单，无必要搭建后端和数据库，但数据需要可以实现动态的读写，这时云后端就比较合适。有时候也可以用在前端开发测试模拟数据上，或是在静态博客里面放一些动态数据（如统计访问量，甚至是开发评论系统）。</p>
<p>但其使用范围还是有限，免费版具有用量限制，安全性不高，与数据库的交互还存在一定的不便等。</p>
<p><a href="https://cloud.tencent.com/">腾讯云</a>、<a href="https://www.aliyun.com/">阿里云</a> 等也提供更安全稳定的收费版云存储服务，还有 <a href="https://maxleap.cn/s/web/zh_cn/index.html">MaxLeap</a>、<a href="https://www.bmob.cn/">Bomb</a> 等其他云服务提供商，可以根据需要选择。</p>
<p>这个项目的展示页面：<a href="https://corecabin.cn/CloudBackendExample/">https://corecabin.cn/CloudBackendExample/</a></p>
<p>这个项目的源码：<a href="https://github.com/kaluojushi/CloudBackendExample">https://github.com/kaluojushi/CloudBackendExample</a></p>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>前端</tag>
        <tag>技巧</tag>
        <tag>Vue</tag>
        <tag>ElementUI</tag>
        <tag>开发</tag>
        <tag>JavaScript</tag>
        <tag>GitHub</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 华容道小游戏源码分析</title>
    <url>/2021/09/08/java-klotski-game-source-code-analysis/</url>
    <content><![CDATA[<p>利用 Java 的 Swing 编程、事件监听等知识写一个华容道小游戏。这个游戏的作者不是我，但是我根据所学的知识，分析一下游戏的源码，以巩固学习成果。</p>
<span id="more"></span>
<h2 id="1-界面分析"><a href="#1-界面分析" class="headerlink" title="1 界面分析"></a>1 界面分析</h2><p>华容道游戏的界面如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/EX01-001.jpg" alt=""></p>
<p>一共 10 个人物，每个人物可以上下左右移动。所以应提前想好一个布局方式，以便在写游戏时设定坐标。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/EX01-002.png" alt=""></p>
<p>程序所需知识：</p>
<ul>
<li>Swing 基础</li>
<li>Swing 基本组件（<code>JFrame</code>、<code>JButton</code>）</li>
<li>事件监听器（焦点、动作、键盘、鼠标）</li>
</ul>
<h2 id="2-启动类"><a href="#2-启动类" class="headerlink" title="2 启动类"></a>2 启动类</h2><p>在 IDEA 中新建一个项目 <code>Klotski</code>，并新建启动类 <code>Start.java</code> 和游戏窗体类 <code>GameFrame.java</code>。根据启动类和游戏主体分离的原则，我们在启动类 <code>Start.java</code>中只新建游戏窗体就行，不做任何与游戏内容相关的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Start</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">GameFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-人物类"><a href="#3-人物类" class="headerlink" title="3 人物类"></a>3 人物类</h2><p>在设计游戏窗体之前，我们先新建一个人物类 <code>Person.java</code>，这个类用来实例化游戏中每一个人物对象。由于每一个人物对象实际上可以看做窗体的一个按钮，所以使该类继承 <code>JButton</code> 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">JButton</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们为人物类设计三个属性，分别是编号、颜色和字体。编号在后期用于定位人物，颜色和字体方便构造人物时初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">170</span>);</span><br><span class="line"><span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="number">12</span>);</span><br></pre></td></tr></table></figure>
<h3 id="3-1-构造方法"><a href="#3-1-构造方法" class="headerlink" title="3.1 构造方法"></a>3.1 构造方法</h3><p>人物类的构造方法要传进两个参数，分别是编号和人物名字，并在下面对编号、姓名、颜色、字体等进行初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> number, String s)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(s);	<span class="comment">// 调用父类JButton的构造方法，为按钮命名</span></span><br><span class="line">    <span class="built_in">this</span>.number = number;</span><br><span class="line">    setBackground(color);</span><br><span class="line">    setFont(font);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-人物变色监听"><a href="#3-2-人物变色监听" class="headerlink" title="3.2 人物变色监听"></a>3.2 人物变色监听</h3><p>当我们想让某个人物移动时，我们需要让其从默认颜色变为别的颜色。这里可以为每个按钮添加一个监听器，并且焦点事件监听器是最适合的。当按钮被聚焦的时候，鼠标键盘也可以对指定按钮进行操作。</p>
<p>可以直接让该类实现 <code>FocusListener</code> 接口，并在构造方法加上焦点事件监听器，把自己传入即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">JButton</span> <span class="keyword">implements</span> <span class="title class_">FocusListener</span> &#123;	<span class="comment">// 实现FocusListener接口</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> number, String s)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        addFocusListener(<span class="built_in">this</span>);	<span class="comment">// 添加焦点事件监听器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">focusGained</span><span class="params">(FocusEvent e)</span> &#123;</span><br><span class="line">        setBackground(Color.RED);	<span class="comment">// 按钮获得焦点时，颜色变红</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">focusLost</span><span class="params">(FocusEvent e)</span> &#123;</span><br><span class="line">        setBackground(color);	<span class="comment">// 按钮失去焦点时，颜色变回默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-人物类完整代码"><a href="#3-3-人物类完整代码" class="headerlink" title="3.3 人物类完整代码"></a>3.3 人物类完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.FocusEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.FocusListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">JButton</span> <span class="keyword">implements</span> <span class="title class_">FocusListener</span> &#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">170</span>);</span><br><span class="line">    <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> number, String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setFont(font);</span><br><span class="line">        addFocusListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">focusGained</span><span class="params">(FocusEvent e)</span> &#123;</span><br><span class="line">        setBackground(Color.RED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">focusLost</span><span class="params">(FocusEvent e)</span> &#123;</span><br><span class="line">        setBackground(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-游戏窗体类"><a href="#4-游戏窗体类" class="headerlink" title="4 游戏窗体类"></a>4 游戏窗体类</h2><p>游戏窗体类是游戏的主体部分，包含显示模块和逻辑模块。首先我们让该类继承 <code>JFrame</code> 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类首先要有 10 个人物，那么我们实例化一个 <code>Person</code> 数组；以及在属性中添加几个按钮，为边界按钮（处理游戏边界）和重新开始按钮。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person[] people = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">10</span>];</span><br><span class="line">JButton left, right, above, below;	<span class="comment">// 左、右、上、下边界按钮</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">restart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;重新开始&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="4-1-构造方法"><a href="#4-1-构造方法" class="headerlink" title="4.1 构造方法"></a>4.1 构造方法</h3><p>构造方法中只写与窗体默认设置有关的部分，具体的按钮布置放到一个初始化方法里面去写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">GameFrame</span><span class="params">()</span> &#123;</span><br><span class="line">    init();	<span class="comment">// 初始化方法</span></span><br><span class="line">    setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line">    setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">320</span>, <span class="number">500</span>);</span><br><span class="line">    setVisible(<span class="literal">true</span>);</span><br><span class="line">    validate();	<span class="comment">// 验证布局</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-初始化布置"><a href="#4-2-初始化布置" class="headerlink" title="4.2 初始化布置"></a>4.2 初始化布置</h3><p>在初始化方法 <code>init()</code> 中，我们一步步放置所需要的组件。首先把窗体设定为绝对布局，并放置重新开始按钮。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    setLayout(<span class="literal">null</span>);</span><br><span class="line">    add(restart);</span><br><span class="line">    restart.setBounds(<span class="number">100</span>, <span class="number">320</span>, <span class="number">120</span>, <span class="number">35</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动 <code>Start.java</code>，查看效果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/EX01-003.png" alt=""></p>
<p>接下来放置每个人物。先写一个 <code>String</code> 数组，放置每个人物的名字，再将名字传入本类的属性 <code>people</code> 数组中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] name = &#123;<span class="string">&quot;曹操&quot;</span>, <span class="string">&quot;关羽&quot;</span>, <span class="string">&quot;马&quot;</span>, <span class="string">&quot;黄&quot;</span>, <span class="string">&quot;赵&quot;</span>, <span class="string">&quot;张&quot;</span>, <span class="string">&quot;兵&quot;</span>, <span class="string">&quot;兵&quot;</span>, <span class="string">&quot;兵&quot;</span>, <span class="string">&quot;兵&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; name.length; i++) &#123;</span><br><span class="line">    people[i] = <span class="keyword">new</span> <span class="title class_">Person</span>(i, name[i]);</span><br><span class="line">    add(people[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设定每个人物按钮的大小和位置。观察第 1 章界面分析中的图，如果设置每个格子的大小为 50 像素 × 50 像素，那么曹操就是 100 像素 × 100 像素；如果游戏左上角的边界为 <code>(54, 54)</code>，那么曹操所在的位置应为 <code>(104, 54)</code>。依次类推，设置每个人物的大小和位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以左上角的位置为(54, 54)，每个格子大小为50*50，设定每个按钮的位置</span></span><br><span class="line">people[<span class="number">0</span>].setBounds(<span class="number">104</span>, <span class="number">54</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">people[<span class="number">1</span>].setBounds(<span class="number">104</span>, <span class="number">154</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">people[<span class="number">2</span>].setBounds(<span class="number">54</span>, <span class="number">154</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">people[<span class="number">3</span>].setBounds(<span class="number">204</span>, <span class="number">154</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">people[<span class="number">4</span>].setBounds(<span class="number">54</span>, <span class="number">54</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">people[<span class="number">5</span>].setBounds(<span class="number">204</span>, <span class="number">54</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">people[<span class="number">6</span>].setBounds(<span class="number">54</span>, <span class="number">254</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">people[<span class="number">7</span>].setBounds(<span class="number">204</span>, <span class="number">254</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">people[<span class="number">8</span>].setBounds(<span class="number">104</span>, <span class="number">204</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">people[<span class="number">9</span>].setBounds(<span class="number">154</span>, <span class="number">204</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/EX01-004.png" alt=""></p>
<p>再添加游戏边界，游戏边界也可以看做是按钮，我们将这 4 个按钮设定为宽为 5 的长条，并根据添加好的人物的位置确定长条位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">left = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">right = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">above = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">below = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">add(left);</span><br><span class="line">add(right);</span><br><span class="line">add(above);</span><br><span class="line">add(below);</span><br><span class="line"><span class="comment">// 以宽为5设定每个长条的大小</span></span><br><span class="line">left.setBounds(<span class="number">49</span>, <span class="number">49</span>, <span class="number">5</span>, <span class="number">260</span>);</span><br><span class="line">right.setBounds(<span class="number">254</span>, <span class="number">49</span>, <span class="number">5</span>, <span class="number">260</span>);</span><br><span class="line">above.setBounds(<span class="number">49</span>, <span class="number">49</span>, <span class="number">210</span>, <span class="number">5</span>);</span><br><span class="line">below.setBounds(<span class="number">49</span>, <span class="number">304</span>, <span class="number">210</span>, <span class="number">5</span>);</span><br><span class="line">validate();</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/EX01-005.png" alt=""></p>
<h3 id="4-3-人物移动操作"><a href="#4-3-人物移动操作" class="headerlink" title="4.3 人物移动操作"></a>4.3 人物移动操作</h3><p>写一个 <code>go()</code> 方法，使人物进行上下左右移动。传进去的参数肯定是人物和方向，人物放 <code>Person</code> 类对象就行，方向其实把已有的 4 个边界按钮放进去就行了，因为它们就代表上下左右，并且可以直接拿它们的边界。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(Person man, JButton direction)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们的操作判断分为以下几步：</p>
<ol>
<li>先试着移动一下，获取移动后的位置</li>
<li>看是否与其他人物的位置或游戏边界的位置相撞</li>
<li>如果相撞，则不移动；否则进行移动</li>
</ol>
<p>先试着移动一下，为了方便判断相撞，我们先拿一个矩形类 <code>Rectangle</code> 放这个人物的边界，并获得坐标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Rectangle</span> <span class="variable">manRect</span> <span class="operator">=</span> man.getBounds();	<span class="comment">// 人物边界矩形</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> manRect.x;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> manRect.y;</span><br></pre></td></tr></table></figure>
<p>再试着移动一下，这里我们只操作 <code>x</code> 和 <code>y</code>，所以人物、矩形都是实际上没有移动的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (direction == above) &#123;</span><br><span class="line">    y -= <span class="number">50</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == below) &#123;</span><br><span class="line">    y += <span class="number">50</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == left) &#123;</span><br><span class="line">    x -= <span class="number">50</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == right) &#123;</span><br><span class="line">    x += <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再把矩形移动过去（人物还是未动）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">manRect.setLocation(x, y);</span><br></pre></td></tr></table></figure>
<p>从这时开始，我们要进行判断，先建立一个布尔型变量 <code>move</code> 并初始化为 <code>true</code>，并拿矩形类 <code>Rectangle</code> 放其他人物的边界、游戏边界的边界，使用 <code>intersects()</code> 方法判断是否相撞。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">move</span> <span class="operator">=</span> <span class="literal">true</span>;	<span class="comment">// 移动判断变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">Rectangle</span> <span class="variable">personRect</span> <span class="operator">=</span> people[i].getBounds();	<span class="comment">// 每个人物的边界</span></span><br><span class="line">    <span class="keyword">if</span> ((manRect.intersects(personRect) &amp;&amp; (man.number != i))) &#123;	<span class="comment">// 操作人物的边界和某个人物边界相撞，且不是自己</span></span><br><span class="line">        move = <span class="literal">false</span>;	<span class="comment">// 不移动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Rectangle</span> <span class="variable">directionRect</span> <span class="operator">=</span> direction.getBounds();	<span class="comment">// 游戏边界的边界</span></span><br><span class="line"><span class="keyword">if</span> (manRect.intersects(directionRect)) &#123;	<span class="comment">// 与游戏边界相撞</span></span><br><span class="line">    move = <span class="literal">false</span>;	<span class="comment">// 不移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再根据 <code>move</code> 的结果，对该人物进行移动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (move) &#123;</span><br><span class="line">    man.setLocation(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-游戏重启监听器"><a href="#4-4-游戏重启监听器" class="headerlink" title="4.4 游戏重启监听器"></a>4.4 游戏重启监听器</h3><p>点击重新开始按钮，游戏重启。我们让本类实现 <code>ActionListener</code> 动作事件监听器接口，并在 <code>init()</code> 方法中为 <code>restart</code> 添加监听器。然后重写 <code>actionPerformed()</code> 方法，可以直接销毁游戏窗体，再重新新建实例就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;	<span class="comment">// 实现ActionListener接口</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        restart.addActionListener(<span class="built_in">this</span>);	<span class="comment">// 添加动作事件监听器</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        dispose();	<span class="comment">// 销毁游戏窗体</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">GameFrame</span>();	<span class="comment">// 重新实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-键盘操作监听器"><a href="#4-5-键盘操作监听器" class="headerlink" title="4.5 键盘操作监听器"></a>4.5 键盘操作监听器</h3><p>键盘是可以操作人物的移动的。我们让本类实现 <code>KeyListener</code> 键盘事件监听器接口，并在 <code>init()</code> 方法中为每个人物添加监听器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>, KeyListener &#123;	<span class="comment">// 实现KeyListener接口</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; name.length; i++) &#123;</span><br><span class="line">            people[i] = <span class="keyword">new</span> <span class="title class_">Person</span>(i, name[i]);</span><br><span class="line">            add(people[i]);</span><br><span class="line">            people[i].addKeyListener(<span class="built_in">this</span>);	<span class="comment">// 添加键盘事件监听器</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只需要重写 <code>keyPressed()</code> 方法。先拿到键盘事件资源（当前聚焦的人物）和键盘按键，并指挥人物按一定方向移动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">man</span> <span class="operator">=</span> (Person) e.getSource();	<span class="comment">// 获得资源（人物）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> e.getKeyCode();	<span class="comment">// 获得按键</span></span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.VK_UP) &#123;	<span class="comment">// 按上键</span></span><br><span class="line">        go(man, above);	<span class="comment">// 向上移动，下同</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.VK_DOWN) &#123;</span><br><span class="line">        go(man, below);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.VK_LEFT) &#123;</span><br><span class="line">        go(man, left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.VK_RIGHT) &#123;</span><br><span class="line">        go(man, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-鼠标操作监听器"><a href="#4-6-鼠标操作监听器" class="headerlink" title="4.6 鼠标操作监听器"></a>4.6 鼠标操作监听器</h3><p>鼠标不仅可以聚焦人物，也可以操作人物移动。我们让本类实现 <code>MouseListener</code> 鼠标事件监听器接口，并在 <code>init()</code> 方法中为每个人物添加监听器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>, KeyListener, MouseListener &#123;	<span class="comment">// 实现MouseListener接口</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; name.length; i++) &#123;</span><br><span class="line">            people[i] = <span class="keyword">new</span> <span class="title class_">Person</span>(i, name[i]);</span><br><span class="line">            people[i].addKeyListener(<span class="built_in">this</span>);</span><br><span class="line">            people[i].addMouseListener(<span class="built_in">this</span>);	<span class="comment">// 添加鼠标事件监听器</span></span><br><span class="line">            add(people[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseEntered</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只需要重写 <code>MousePressed()</code> 方法。先拿到鼠标事件资源（鼠标点击的人物）和鼠标坐标，再拿到这个人物的边界大小，根据这个鼠标点击的位置（如点击人物上半部分，则向上移动），指挥人物按一定方向移动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">man</span> <span class="operator">=</span> (Person) e.getSource();	<span class="comment">// 获得资源（人物）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> e.getX();</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> e.getY();	<span class="comment">// 鼠标坐标（相对于人物）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> man.getBounds().width;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> man.getBounds().height;	<span class="comment">// 人物边界大小</span></span><br><span class="line">    <span class="keyword">if</span> (y &lt; h / <span class="number">2</span>) &#123;	<span class="comment">// 点击的是上半部分</span></span><br><span class="line">        go(man, above);	<span class="comment">// 向上移动，下同</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; h / <span class="number">2</span>) &#123;</span><br><span class="line">        go(man, below);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; w / <span class="number">2</span>) &#123;</span><br><span class="line">        go(man, left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; w / <span class="number">2</span>) &#123;</span><br><span class="line">        go(man, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，键盘事件和鼠标事件不用 <code>else-if</code>，可以让人物斜向运动，运动顺序由程序书写顺序决定。</p>
<h3 id="4-7-游戏窗体类完整代码"><a href="#4-7-游戏窗体类完整代码" class="headerlink" title="4.7 游戏窗体类完整代码"></a>4.7 游戏窗体类完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>, KeyListener, MouseListener &#123;</span><br><span class="line">    Person[] people = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">10</span>];</span><br><span class="line">    JButton left, right, above, below;</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">restart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;重新开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GameFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        init();</span><br><span class="line">        setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line">        setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">320</span>, <span class="number">500</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        validate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        setLayout(<span class="literal">null</span>);</span><br><span class="line">        add(restart);</span><br><span class="line">        restart.setBounds(<span class="number">100</span>, <span class="number">320</span>, <span class="number">120</span>, <span class="number">35</span>);</span><br><span class="line">        restart.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        String[] name = &#123;<span class="string">&quot;曹操&quot;</span>, <span class="string">&quot;关羽&quot;</span>, <span class="string">&quot;马&quot;</span>, <span class="string">&quot;黄&quot;</span>, <span class="string">&quot;赵&quot;</span>, <span class="string">&quot;张&quot;</span>, <span class="string">&quot;兵&quot;</span>, <span class="string">&quot;兵&quot;</span>, <span class="string">&quot;兵&quot;</span>, <span class="string">&quot;兵&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; name.length; i++) &#123;</span><br><span class="line">            people[i] = <span class="keyword">new</span> <span class="title class_">Person</span>(i, name[i]);</span><br><span class="line">            people[i].addKeyListener(<span class="built_in">this</span>);</span><br><span class="line">            people[i].addMouseListener(<span class="built_in">this</span>);</span><br><span class="line">            add(people[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        people[<span class="number">0</span>].setBounds(<span class="number">104</span>, <span class="number">54</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        people[<span class="number">1</span>].setBounds(<span class="number">104</span>, <span class="number">154</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">        people[<span class="number">2</span>].setBounds(<span class="number">54</span>, <span class="number">154</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        people[<span class="number">3</span>].setBounds(<span class="number">204</span>, <span class="number">154</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        people[<span class="number">4</span>].setBounds(<span class="number">54</span>, <span class="number">54</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        people[<span class="number">5</span>].setBounds(<span class="number">204</span>, <span class="number">54</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        people[<span class="number">6</span>].setBounds(<span class="number">54</span>, <span class="number">254</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        people[<span class="number">7</span>].setBounds(<span class="number">204</span>, <span class="number">254</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        people[<span class="number">8</span>].setBounds(<span class="number">104</span>, <span class="number">204</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        people[<span class="number">9</span>].setBounds(<span class="number">154</span>, <span class="number">204</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        left = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        right = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        above = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        below = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        add(left);</span><br><span class="line">        add(right);</span><br><span class="line">        add(above);</span><br><span class="line">        add(below);</span><br><span class="line">        left.setBounds(<span class="number">49</span>, <span class="number">49</span>, <span class="number">5</span>, <span class="number">260</span>);</span><br><span class="line">        right.setBounds(<span class="number">254</span>, <span class="number">49</span>, <span class="number">5</span>, <span class="number">260</span>);</span><br><span class="line">        above.setBounds(<span class="number">49</span>, <span class="number">49</span>, <span class="number">210</span>, <span class="number">5</span>);</span><br><span class="line">        below.setBounds(<span class="number">49</span>, <span class="number">304</span>, <span class="number">210</span>, <span class="number">5</span>);</span><br><span class="line">        validate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(Person man, JButton direction)</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">manRect</span> <span class="operator">=</span> man.getBounds();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> manRect.x;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> manRect.y;</span><br><span class="line">        <span class="keyword">if</span> (direction == above) &#123;</span><br><span class="line">            y -= <span class="number">50</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == below) &#123;</span><br><span class="line">            y += <span class="number">50</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == left) &#123;</span><br><span class="line">            x -= <span class="number">50</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == right) &#123;</span><br><span class="line">            x += <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        manRect.setLocation(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">move</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">Rectangle</span> <span class="variable">personRect</span> <span class="operator">=</span> people[i].getBounds();</span><br><span class="line">            <span class="keyword">if</span> ((manRect.intersects(personRect) &amp;&amp; (man.number != i))) &#123;</span><br><span class="line">                move = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">directionRect</span> <span class="operator">=</span> direction.getBounds();</span><br><span class="line">        <span class="keyword">if</span> (manRect.intersects(directionRect)) &#123;</span><br><span class="line">            move = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (move) &#123;</span><br><span class="line">            man.setLocation(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        dispose();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">GameFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">man</span> <span class="operator">=</span> (Person) e.getSource();</span><br><span class="line">        <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.VK_UP) &#123;</span><br><span class="line">            go(man, above);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.VK_DOWN) &#123;</span><br><span class="line">            go(man, below);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.VK_LEFT) &#123;</span><br><span class="line">            go(man, left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.VK_RIGHT) &#123;</span><br><span class="line">            go(man, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">man</span> <span class="operator">=</span> (Person) e.getSource();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> e.getX();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> e.getY();</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> man.getBounds().width;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> man.getBounds().height;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; h / <span class="number">2</span>) &#123;</span><br><span class="line">            go(man, above);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; h / <span class="number">2</span>) &#123;</span><br><span class="line">            go(man, below);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; w / <span class="number">2</span>) &#123;</span><br><span class="line">            go(man, left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; w / <span class="number">2</span>) &#123;</span><br><span class="line">            go(man, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseEntered</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-扩展与总结"><a href="#5-扩展与总结" class="headerlink" title="5 扩展与总结"></a>5 扩展与总结</h2><ul>
<li><strong>步数统计：</strong> 可以新写一个属性 <code>step</code>，每 <code>go()</code> 一次就 <code>step++</code>，统计游戏步数。</li>
<li><strong>成功判定：</strong> 当曹操走到某个坐标的时候，游戏就成功并结束了。</li>
<li><strong>不同关卡：</strong> 华容道有横刀立马、齐头并前、兵分三路等多种摆放方法，可以只改变人物坐标，实现不同的关卡。</li>
<li><strong>记录进度：</strong> 把步数、人物坐标存档到文件里，下次可以直接读档，接着来。</li>
<li><strong>平台迁移：</strong> 把代码换成 JavaScript 版，并写到网页上，游戏基本逻辑是一样的。</li>
</ul>
<p>这个游戏应该不难，逻辑上没有其他游戏那么多，主要是巩固 Swing 编程的基础。</p>
<p>走了好多遍终于成功了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/EX01-006.png" alt=""></p>
<p><a href="https://github.com/kaluojushi/MyJavaPersonalDevelopment/tree/main/Klotski">完整代码点这里获取</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
        <tag>游戏</tag>
        <tag>Swing</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>开发某机床厂远程运维平台的前端技术总结（1）</title>
    <url>/2021/10/27/frontend-technical-summary-of-developing-remote-operation-and-maintenance-platform-of-a-machine-tool-factory-1/</url>
    <content><![CDATA[<p>今年 3 月到 7 月，我参与了课题组负责的 <strong>某机床厂远程运维平台开发</strong> 的项目，并主要承担前端开发工作。这个项目马上（10 月底）就要结题了，因此总结一下在这半年的开发过程中遇到的一些技术问题或难题，以给之后的学习或开发作参考。</p>
<span id="more"></span>
<h2 id="1-项目简介"><a href="#1-项目简介" class="headerlink" title="1 项目简介"></a>1 项目简介</h2><p>这个项目是导师接的一个工业互联网项目，用于某机床厂的远程运营维护。从 3 月开始，我们就着手参与这个项目。</p>
<blockquote>
<p>本平台主要适用于工业互联网远程运维场景，采集机床运行数据，及时、准确地为机床厂提供机床的各项运行数据可视化、设备故障的报警等相关信息，高效地为用户提供机床的远程运维服务。</p>
<p>——《智能运维云平台用户操作手册》</p>
</blockquote>
<p>这个平台由 3 个团队共同参与开发，分别是杭州团队（浙大）、苏州团队（苏州研究院）和昆山团队（昆山某公司），后来昆山团队退出了，项目就完全由杭州和苏州负责了。</p>
<p>这个项目里我们杭州团队负责了【企业中心】、【设备中心】的开发，在昆山团队退出后，我们还额外负责了原来昆山做的【工作台】、【统计报表】部分。杭州团队是包括我在内的 3 个研究生，我负责前端，另外 2 个同学负责后端，其中 1 个还负责数据库管理。</p>
<p>4 月初，我们经过了多次讨论，研究了若干技术选型，如人人开源、JeecgBoot 等，最终决定以 <a href="http://ruoyi.vip/">若依管理系统</a> 为基础，搭建我们的平台。从以下我们做好的首页中，也可以见到一丝端倪。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-01 - 副本2.png" alt="首页"></p>
<p>（首页除了下面的 <strong>合作伙伴</strong> 是我设计的外，其他全部是苏州团队设计的）</p>
<p>从 4 月开始，我着手学习前端三件套、<a href="https://v3.cn.vuejs.org/">Vue</a> 与 <a href="https://element.eleme.cn/#/zh-CN">ElementUI</a>，并到后期边做边学，积累了很多技术经验。并且由于前端需要后端支持，因此我也在自己的电脑上搭配了完整的后端环境。</p>
<h2 id="2-企业中心"><a href="#2-企业中心" class="headerlink" title="2 企业中心"></a>2 企业中心</h2><p>【企业中心】用于管理该公司对接的所有企业，也就是它的销售方。</p>
<h3 id="2-1-企业管理"><a href="#2-1-企业管理" class="headerlink" title="2.1 企业管理"></a>2.1 企业管理</h3><p>我们第一个着手做的就是【企业中心】的【企业管理】模块。这是一个单表，即这个模块只需要 <strong>增删改查</strong> 的功能，能实现数据项的罗列与变更功能。由于若依系统自带 <strong>代码生成器</strong>，可以根据数据库的某个表自动生成后端代码（domain、mapper、service、controller 四个层）以及前端代码（api 接口和 vue 页面），所以这很大程度减轻了我们的工作量，我们只需要生成表再改一改就好了。下文中与表有关的模块大多数都是这么做的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-02.png" alt="企业管理页面"></p>
<h4 id="2-1-1-企业地区"><a href="#2-1-1-企业地区" class="headerlink" title="2.1.1 企业地区"></a>2.1.1 企业地区</h4><p>这是后来加的一个功能，客户要求在【企业管理】模块，每个企业可以有一个对应的地区，并且可以根据地区筛选企业。</p>
<p>要导入全国的省市区数据就是一个很麻烦的过程，这个是很难做到写死在代码里的。我找到了 ElementUI 提供的一个 npm 包，包含所有中国省市区级联数据，即 <a href="https://www.npmjs.com/package/element-china-area-data">element-china-area-data</a>，并根据 <a href="https://plortinus.github.io/element-china-area-data/index.html">这个页面的示例</a> 做了这个功能。这个包是 ElementUI 提供的，所以可以直接使用 <a href="https://element.eleme.cn/#/zh-CN/component/cascader">ElementUI的级联选择器</a>。</p>
<ol>
<li><p>导入这个包里所用到的几个数组和对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;provinceAndCityData, regionData, provinceAndCityDataPlus, regionDataPlus, <span class="title class_">CodeToText</span>, <span class="title class_">TextToCode</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;element-china-area-data&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库里，每一条企业数据省、市、区是三个字段，在前端表格的显示上，要稍微修改一下格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;infoList&quot;</span> @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;地区&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;province&quot;</span> <span class="attr">:formatter</span>=<span class="string">&quot;provinceFormat&quot;</span>/&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地区处理</span></span><br><span class="line"><span class="title function_">provinceFormat</span>(<span class="params">row, column</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> region = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (row.<span class="property">province</span>) &#123;</span><br><span class="line">    region += row.<span class="property">province</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> [row.<span class="property">city</span>, row.<span class="property">country</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item) &#123;</span><br><span class="line">      region += <span class="string">&#x27;/&#x27;</span> + item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> region;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-03.png" alt="表格里显示的地区"></p>
<p>因为数据库里有单独的「省」字段，因此搜索时可以只筛选省。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;queryParams&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;showSearch&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;75px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;企业地区&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;province&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;queryParams.province&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">      <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索企业地区&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;province in provinceOptions&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;province.value&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:label</span>=<span class="string">&quot;province.label&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;province.value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">provinceOptions</span>: regionData.<span class="title function_">map</span>(<span class="function"><span class="params">province</span> =&gt;</span> (&#123;<span class="attr">value</span>: province.<span class="property">label</span>, <span class="attr">label</span>: province.<span class="property">label</span>&#125;)),</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-04.png" alt="搜索功能的企业地区"></p>
</li>
<li><p>新增企业功能，客户要求省份信息必填，市区信息选填，所以这个级联菜单与 element-china-area-data 的展示页面做得有所不同。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;open&quot;</span> <span class="attr">width</span>=<span class="string">&quot;700px&quot;</span> <span class="attr">append-to-body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;企业地区&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;province&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;form.province&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">display</span>=<span class="string">&quot;inline-block&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索企业地区&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">change</span>=<span class="string">&quot;handleRegionInfo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-for</span>=<span class="string">&quot;province in provinceOptions&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:key</span>=<span class="string">&quot;province.value&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:label</span>=<span class="string">&quot;province.label&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:value</span>=<span class="string">&quot;province.value&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;具体市区&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;selectedRegionOptions&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-cascader</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;form.province&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:options</span>=<span class="string">&quot;regionOptions&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;form.selectedRegionOptions&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;provinceRefresh&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索具体市区&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-cascader</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-cascader</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">            <span class="attr">disabled</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请先选择企业地区&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-cascader</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下拉列表和级联列表要联动，什么省就要给什么市，所以要给级联表加个 <code>key</code>（否则级联表不会根据所选省份变化），并且绑定到一个 <code>provinceRefresh</code> 的变量上，并在其他相关部分将其设置为省份的 <code>code</code>，然后在某个函数处理省份的变化，见如下的 <code>script</code> 部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">regionOptions</span>: [],</span><br><span class="line">    <span class="attr">provinceRefresh</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="attr">province</span>: [</span><br><span class="line">        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;企业地区不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;change&quot;</span>&#125;</span><br><span class="line">      ],</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">/** 新增按钮操作 */</span></span><br><span class="line">  <span class="title function_">handleAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">regionOptions</span> = <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span> ? regionData.<span class="title function_">find</span>(<span class="function"><span class="params">province</span> =&gt;</span> province.<span class="property">label</span> === <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>).<span class="property">children</span> : [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">provinceRefresh</span> = <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span> ? <span class="title class_">TextToCode</span>[<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>].<span class="property">code</span> : <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;添加企业&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 修改按钮操作 */</span></span><br><span class="line">  <span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">    <span class="keyword">const</span> id = row.<span class="property">id</span> || <span class="variable language_">this</span>.<span class="property">ids</span></span><br><span class="line">    <span class="title function_">getInfo</span>(id).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">form</span> = response.<span class="property">data</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">regionOptions</span> =  regionData.<span class="title function_">find</span>(<span class="function"><span class="params">province</span> =&gt;</span> province.<span class="property">label</span> === <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>).<span class="property">children</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">city</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">country</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">selectedRegionOptions</span> = [<span class="title class_">TextToCode</span>[<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>][<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">city</span>].<span class="property">code</span>, <span class="title class_">TextToCode</span>[<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>][<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">city</span>][<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">country</span>].<span class="property">code</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">provinceRefresh</span> = <span class="title class_">TextToCode</span>[<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>].<span class="property">code</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;修改企业&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 提交按钮 */</span></span><br><span class="line">  <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">selectedRegionOptions</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">city</span> = <span class="title class_">CodeToText</span>[<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">selectedRegionOptions</span>[<span class="number">0</span>]];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">country</span> = <span class="title class_">CodeToText</span>[<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">selectedRegionOptions</span>[<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">city</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">country</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">provinceRefresh</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;form&quot;</span>].<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">id</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="title function_">updateInfo</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">addInfo</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 企业地区修改</span></span><br><span class="line">  <span class="title function_">handleRegionInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">regionOptions</span> = regionData.<span class="title function_">find</span>(<span class="function"><span class="params">province</span> =&gt;</span> province.<span class="property">label</span> === <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>).<span class="property">children</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">provinceRefresh</span> = <span class="title class_">TextToCode</span>[<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">province</span>].<span class="property">code</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-05.png" alt="添加企业界面"></p>
</li>
</ol>
<h4 id="2-1-2-字典的使用"><a href="#2-1-2-字典的使用" class="headerlink" title="2.1.2 字典的使用"></a>2.1.2 字典的使用</h4><p>字典是若依系统自带的功能，对于一些常用的选项，若依可以将他们存在同一个数据库中，并设置键、值，以便可以随时调用。</p>
<p>通常使用字典的步骤如下：</p>
<ol>
<li><p>在【字典管理】里新增一个字典，设置字典名称（即字典释义）和字典类型（即变量名）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-07.png" alt="字典管理页面"></p>
</li>
<li><p>点开这个字典页面，向里面添加数据，分别输入标签和键值：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-08.png" alt="字典数据页面"></p>
</li>
<li><p>在前端的 Vue 代码里，使用下拉菜单时，绑定键值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;数据类型&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;paramType&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;queryParams.paramType&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择数据类型&quot;</span> <span class="attr">clearable</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;dict in paramTypeOptions&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;dict.dictValue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">&quot;dict.dictLabel&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">&quot;dict.dictValue&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在前端的 <code>script</code> 部分，定义这个数组，并且使用若依自带的函数去获取它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">paramTypeOptions</span>: [],</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">created</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getDicts</span>(<span class="string">&quot;device_param_type&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">paramTypeOptions</span> = response.<span class="property">data</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>在表格里使用时，需要定义一个格式函数，因为数据库里存的是字典键值，表格里展示的是字典标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;数据类型&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;paramType&quot;</span> <span class="attr">:formatter</span>=<span class="string">&quot;paramTypeFormat&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据类型字典翻译</span></span><br><span class="line"><span class="title function_">paramTypeFormat</span>(<span class="params">row, column</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">selectDictLabel</span>(<span class="variable language_">this</span>.<span class="property">paramTypeOptions</span>, row.<span class="property">paramType</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在【企业管理】模块里，用到了许多类似于字典的选项，如经营状态、企业行业、公司类型，但我在代码中没用使用字典，而是写死在代码的数组里的。这样做的好处是节省函数调用，坏处是当我需要调整选项的时候，无法从前端或数据库去更改它，而是需要修改源代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;经营状态&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;operationState&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;queryParams.operationState&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请选择经营状态&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;os in operationStateOptions&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;os.value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">&quot;os.label&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">&quot;os.value&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">operationStateOptions</span>: [],</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="attr">created</span>: &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getOperationStateOptions</span>();</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">getOperationStateOptions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">operationStateOptions</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> [<span class="string">&quot;存续&quot;</span>, <span class="string">&quot;在业&quot;</span>, <span class="string">&quot;吊销&quot;</span>, <span class="string">&quot;注销&quot;</span>, <span class="string">&quot;迁入&quot;</span>, <span class="string">&quot;迁出&quot;</span>, <span class="string">&quot;停业&quot;</span>, <span class="string">&quot;清算&quot;</span>]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">operationStateOptions</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">value</span>: item,</span><br><span class="line">        <span class="attr">label</span>: item</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然可能有更好的写法，但是只要让这个数组成为一个对象数组，并且有键值对（即 <code>value</code> 和 <code>label</code>）就好了。</p>
<p>如果需要前面出现编号，就改一下 <code>label</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getCompanyTypeOptions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">companyTypeOptions</span> = [];</span><br><span class="line">  <span class="keyword">let</span> types = [<span class="string">&quot;有限责任公司（自然人独资）&quot;</span>, <span class="string">&quot;有限责任公司（自然人投资或控股）&quot;</span>, <span class="string">&quot;股份有限公司&quot;</span>, <span class="string">&quot;有限合伙企业&quot;</span>, <span class="string">&quot;外商独资公司&quot;</span>, <span class="string">&quot;个人独资企业&quot;</span>, <span class="string">&quot;国有独资公司&quot;</span>, <span class="string">&quot;外资企业&quot;</span>, <span class="string">&quot;非公司企业&quot;</span>, <span class="string">&quot;其他&quot;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> types) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">companyTypeOptions</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">value</span>: types[index],</span><br><span class="line">      <span class="attr">label</span>: (<span class="built_in">parseInt</span>(index) + <span class="number">1</span>) + <span class="string">&#x27;、&#x27;</span> + types[index]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-09.png" alt="公司类型"></p>
<p>（对于 JavaScript 的 <code>for-each</code> 循环，<code>in</code> 循环的是数组的索引或对象的键，即 <code>let index in array</code>、<code>let key in object</code>，<code>of</code> 循环的是数组的元素，即 <code>let item of array</code>；知道了索引或键，可以通过方括号或小数点去访问对应的元素或值；更详细可以看这篇文章：《<a href="/2021/12/14/several-ways-of-traversing-arrays-and-objects-in-javascript/" title="JavaScript 中遍历数组、对象的几种方式">JavaScript 中遍历数组、对象的几种方式</a>》）</p>
<h4 id="2-1-3-删除按钮的提示修改"><a href="#2-1-3-删除按钮的提示修改" class="headerlink" title="2.1.3 删除按钮的提示修改"></a>2.1.3 删除按钮的提示修改</h4><p>若依自带的删除提示是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 删除按钮操作 */</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ids = row.<span class="property">id</span> || <span class="variable language_">this</span>.<span class="property">ids</span>;</span><br><span class="line">  <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;是否确认删除企业中心编号为&quot;&#x27;</span> + ids + <span class="string">&#x27;&quot;的数据项?&#x27;</span>, <span class="string">&quot;警告&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">      <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">delInfo</span>(ids);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>第 3 行这个获取 id，实际上是判断删除按钮的入口，是单个数据项，还是勾选后点击的删除，前者是一个对象（即参数 <code>row</code>）的 id，后者是一个 id 数组，通过逻辑或选择一个值。但是第 4 行会暴露主键 id，因此我对这部分代码（以及我们做的所有模块的删除功能）做了如下修改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 删除按钮操作 */</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ids = row.<span class="property">id</span> || <span class="variable language_">this</span>.<span class="property">ids</span>;</span><br><span class="line">  <span class="keyword">let</span> idsLength;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="title function_">typeof</span>(ids)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span> : idsLength = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span> : idsLength = ids.<span class="property">length</span>; <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;是否确认删除&#x27;</span> + (idsLength&gt;<span class="number">1</span> ? <span class="string">&#x27;这&#x27;</span>+idsLength+<span class="string">&#x27;个&#x27;</span> : <span class="string">&#x27;该&#x27;</span>) + <span class="string">&#x27;企业?&#x27;</span>, <span class="string">&quot;警告&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">delInfo</span>(ids);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>JavaScript 的 <code>typeof</code> 函数可以返回变量的类型（字符串表示），如果是 <code>number</code> 类型，说明这是 <code>row.id</code>，长度为 1；如果是 <code>object</code> 类型（数组即对象），说明这是 <code>this.ids</code>，长度为数组的 <code>length</code>。再判断 ids 的长度是否大于 1，输出对应的结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-10.png" alt="删除企业"></p>
<h4 id="2-1-4-解决手机端消息框显示不全的问题"><a href="#2-1-4-解决手机端消息框显示不全的问题" class="headerlink" title="2.1.4 解决手机端消息框显示不全的问题"></a>2.1.4 解决手机端消息框显示不全的问题</h4><p>在做响应式布局时遇到的 bug，像上面删除时弹出的警告框，如果屏幕宽度过窄，可能显示不全，连确定按钮都点不到：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-19.png" alt="在屏幕宽度过窄时，消息框显示不全"></p>
<p>所以我在代码的最后都加了一个样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">750px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.el-message-box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>使消息框在屏幕尺寸小于 750px 时，宽度调整为相对尺寸（80%），避免显示不全。</p>
<h3 id="2-2-组织管理"><a href="#2-2-组织管理" class="headerlink" title="2.2 组织管理"></a>2.2 组织管理</h3><p>【组织管理】模块是一个树表。客户的要求是，对于某一个企业，可以给它加下级组织（下级部门），这个组织可以继续添加下级组织，企业也是一个组织，所有的企业应平级，即企业的上级组织汇聚到一个顶级组织（顶点）。加了组织后，机床就可以绑定到这个组织。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-11.png" alt="组织管理页面"></p>
<h4 id="2-2-1-树表的逻辑"><a href="#2-2-1-树表的逻辑" class="headerlink" title="2.2.1 树表的逻辑"></a>2.2.1 树表的逻辑</h4><p>数据库是没法放树表的，只可以放单表。每个组织在数据库中是单独的一项，表面上是同级的，但是可以给它加一个字段，表示该组织的上级组织。由于上下级组织是一对多的关系，所以我们只关注某个组织的上级组织，并一层层关联起来。</p>
<p>数据库里，<code>org_id</code> 是主键，<code>enterprise_id</code> 跟踪这个组织的最顶层（指企业层）是什么，<code>higher_org</code> 跟踪这个组织的上层组织是什么。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-12.png" alt="数据库里的组织表"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-13.png" alt="该表表示的逻辑关系"></p>
<p>前端页面的显示方式见上上上图。</p>
<h4 id="2-2-2-后端对于树表的处理"><a href="#2-2-2-后端对于树表的处理" class="headerlink" title="2.2.2 后端对于树表的处理"></a>2.2.2 后端对于树表的处理</h4><p>由于 <strong>一个企业同时也是一个组织</strong>，所以凡是在【企业管理】模块做的 <strong>增删改</strong> 操作都要关联到【组织管理】模块：</p>
<ul>
<li>增：【企业管理】增加一个企业，【组织管理】就要增加这个企业组织</li>
<li>删：【企业管理】删除一个企业，【组织管理】就要删除这个企业组织及其所有下级组织（所有 <code>enterprise_id</code> 符合企业 id 的组织）</li>
<li>改：【企业管理】更改了企业的名称，【组织管理】就要对对应的企业组织（在所有 <code>enterprise_id</code> 符合企业 id 的组织里找 <code>higher_org</code> 为 0 的组织）改名</li>
</ul>
<p>这个工作前端后端都可以做，经过权衡，我们决定让后端完成这个工作，更改 <code>xml</code> 文件就可以了。</p>
<h4 id="2-2-3-前端对于树表的处理"><a href="#2-2-3-前端对于树表的处理" class="headerlink" title="2.2.3 前端对于树表的处理"></a>2.2.3 前端对于树表的处理</h4><p>若依展示树表的方式是使用一个 <code>Treeselect</code> 组件。之后的代码里，如果要使用树表下拉框，也需要注册这个组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Treeselect</span> <span class="keyword">from</span> <span class="string">&quot;@riophae/vue-treeselect&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@riophae/vue-treeselect/dist/vue-treeselect.css&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Org&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Treeselect</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>树表在下拉框的使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;form.higherOrg !== 0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;上级组织&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;higherOrg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">treeselect</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;form.higherOrg&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:options</span>=<span class="string">&quot;orgOptions&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:normalizer</span>=<span class="string">&quot;normalizer&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索上级组织&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-14.png" alt="添加组织页面"></p>
<p>我对若依自动生成的树表进行了一些修改，以便更满足我们的逻辑要求：</p>
<ol>
<li><p>若依默认的下拉树结构有顶级节点，并设置 id 为 0：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 查询部门下拉树结构 */</span></span><br><span class="line"><span class="title function_">getTreeselect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listOrg</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">orgOptions</span> = [];</span><br><span class="line">    <span class="keyword">const</span> data = &#123; <span class="attr">orgId</span>: <span class="number">0</span>, <span class="attr">deptName</span>: <span class="string">&#x27;顶级节点&#x27;</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">    data.<span class="property">children</span> = <span class="variable language_">this</span>.<span class="title function_">handleTree</span>(response.<span class="property">data</span>, <span class="string">&quot;orgId&quot;</span>, <span class="string">&quot;higherOrg&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">orgOptions</span>.<span class="title function_">push</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>我们需要有顶级节点的存在，但是不希望它出现在下拉树里，就把它去掉，直接设置 <code>orgOptions</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 查询部门下拉树结构 */</span></span><br><span class="line"><span class="title function_">getTreeselect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listOrg</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">orgOptions</span> = <span class="variable language_">this</span>.<span class="title function_">handleTree</span>(response.<span class="property">data</span>, <span class="string">&quot;orgId&quot;</span>, <span class="string">&quot;higherOrg&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户点击表格上方的新增时，页面如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-16 - 副本.png" alt="添加组织页面（普通）"></p>
<p>用户点击表格右侧的新增时，可以填充对应的所属企业与上级组织（表示新增该组织的下级组织），符合操作逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 新增按钮操作 */</span></span><br><span class="line"><span class="title function_">handleAdd</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">  <span class="keyword">if</span> (row !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">higherOrg</span> = row.<span class="property">orgId</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">enterpriseId</span> = row.<span class="property">enterpriseId</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getTreeselect</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;添加组织&quot;</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-17.png" alt="添加组织页面（特定组织）"></p>
</li>
<li><p>对于企业组织，我们不希望用户在【组织管理】对其做过多的改动（因为改动可以在【企业管理】完成），就做如下修改：</p>
<ul>
<li><p>企业组织不需要删除按钮，给它加一个 <code>v-if</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-if</span>=<span class="string">&quot;scope.row.higherOrg !== 0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;enterpriseCenter:org:remove&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-15.png" alt="隐藏企业组织的删除"></p>
</li>
<li><p>企业组织本身不需要展现上级组织，加 <code>v-if</code> 将其隐藏；企业组织的所属企业与部门名称不希望用户在此修改，加 <code>v-if</code> 和 <code>disabled</code> 属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加或修改组织管理对话框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;open&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">append-to-body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;所属企业&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;enterpriseId&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;form.enterpriseId&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;form.higherOrg !== 0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索所属企业&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-for</span>=<span class="string">&quot;enter in enterOptions&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:key</span>=<span class="string">&quot;enter.value&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:label</span>=<span class="string">&quot;enter.label&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:value</span>=<span class="string">&quot;enter.value&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;form.enterpriseId&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">            <span class="attr">disabled</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索所属企业&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">              <span class="attr">...</span></span></span><br><span class="line"><span class="tag">            &lt;/<span class="attr">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>  <span class="attr">v-if</span>=<span class="string">&quot;form.higherOrg !== 0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;上级组织&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;higherOrg&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">treeselect</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;form.higherOrg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:options</span>=<span class="string">&quot;orgOptions&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:normalizer</span>=<span class="string">&quot;normalizer&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索上级组织&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.deptName&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;form.higherOrg !== 0&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入部门名称&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.deptName&quot;</span> <span class="attr">v-else</span> <span class="attr">:disabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入部门名称&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-18.png" alt="修改组织页面（企业组织）"></p>
<p>这样就只允许修改企业组织的地址、联系人、电话等信息。</p>
</li>
</ul>
</li>
</ol>
<h2 id="3-设备中心"><a href="#3-设备中心" class="headerlink" title="3 设备中心"></a>3 设备中心</h2><p>【设备中心】用于管理该公司的机床设备，以便实时监控。</p>
<h3 id="3-1-变量信息"><a href="#3-1-变量信息" class="headerlink" title="3.1 变量信息"></a>3.1 变量信息</h3><p>【变量信息】模块是个很简单的单表，用来存储用户的自定义变量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-20.png" alt="变量信息页面"></p>
<h4 id="3-1-1-变量绑定功能的逻辑"><a href="#3-1-1-变量绑定功能的逻辑" class="headerlink" title="3.1.1 变量绑定功能的逻辑"></a>3.1.1 变量绑定功能的逻辑</h4><ol>
<li>后端用 Node-RED 采集加入网络的机床的数据，采用 <strong>饱和采集</strong>，即采集所有机床的所有数据</li>
<li>用户在【设备信息】模块加入设备，并设置数控系统 id</li>
<li>用户在【变量信息】模块里自定义一个变量，并将该变量与 MongoDB 数据库采集到的变量名关联起来</li>
<li>用户在【设备类型】模块里对该设备的类型绑定需要的变量</li>
<li>系统根据该机床的数控系统 id，拿到 MongoDB 里该机床的所有数据</li>
<li>前端再判断哪些变量绑定了，绑定的展示给用户，未绑定的不予展示</li>
</ol>
<p>事实上，我们还做不到远程控制（绑定的采集，不绑定的不采集），只能饱和采集、饱和获取数据，再按需展示。</p>
<h4 id="3-1-2-变量关联"><a href="#3-1-2-变量关联" class="headerlink" title="3.1.2 变量关联"></a>3.1.2 变量关联</h4><p>自定义变量的目的，是前端展示变量数据时，可以自定义显示的变量名、变量单位等。它本身不具有任何意义，除非与 MongoDB 的变量关联。</p>
<p>MongoDB 采集到的数据有特殊的变量字段名，用户自定义变量后，与该变量字段关联，就可以使用这个数据。</p>
<p>如 MongoDB 的 <code>poweronTime</code> 采集到了数据 220，前端显示：<code>当前运行时间：220 分钟</code>。如果用户更改这个变量的名称与单位，则前端显示随之改变，但数值不变。（不支持单位转换，如果单位设置为秒，则还是显示 <code>220 秒</code>）</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-21.png" alt="添加变量信息页面"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加或修改变量信息对话框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;open&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">append-to-body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;变量名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;paramName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.paramName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入变量名称&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;变量关联&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;mongoId&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;form.mongoId&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">        <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;请选择或搜索系统变量&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;mv in mongoVariableOptions&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;mv.value&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:label</span>=<span class="string">&quot;mv.label&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:value</span>=<span class="string">&quot;mv.value&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float:left&quot;</span>&gt;</span>&#123;&#123; mv.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float:right; color: #8492a6; font-size: 13px&quot;</span>&gt;</span>&#123;&#123; mv.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;数据类型&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;paramType&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;form.paramType&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择数据类型&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;dict in paramTypeOptions&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;dict.dictValue&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:label</span>=<span class="string">&quot;dict.dictLabel&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:value</span>=<span class="string">&quot;dict.dictValue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;变量单位&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;paramUnit&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.paramUnit&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入变量单位&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;form.paramType === &#x27;numerical&#x27;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.paramUnit&quot;</span> <span class="attr">disabled</span> <span class="attr">placeholder</span>=<span class="string">&quot;仅数值型变量可输入单位&quot;</span> <span class="attr">v-else</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>mongoVariableOptions</code> 是从数据库里拿的，因为它一般不会变化，所以没有做前端入口，但是保留了前端 api 调用。如果要修改，需要直接操作数据库。同时，由于自定义变量数据库存放的是 MongoDB 变量的 id，因此表格里需要做格式化，不能显示 id，要显示 <code>label</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mongo变量列表获取</span></span><br><span class="line"><span class="title function_">getMongoVariables</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">listMongoVariable</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mongoVariableOptions</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row <span class="keyword">of</span> response.<span class="property">rows</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = &#123;</span><br><span class="line">        <span class="attr">value</span>: row.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">label</span>: row.<span class="property">mongoName</span>,</span><br><span class="line">        <span class="attr">description</span>: row.<span class="property">mongoDescription</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mongoVariableOptions</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 变量关联翻译</span></span><br><span class="line"><span class="title function_">mongoIdFormat</span>(<span class="params">row, column</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">mongoVariableOptions</span>.<span class="title function_">find</span>(<span class="function"><span class="params">mongo</span> =&gt;</span> mongo.<span class="property">value</span> === row.<span class="property">mongoId</span>)? <span class="variable language_">this</span>.<span class="property">mongoVariableOptions</span>.<span class="title function_">find</span>(<span class="function"><span class="params">mongo</span> =&gt;</span> mongo.<span class="property">value</span> === row.<span class="property">mongoId</span>).<span class="property">label</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这里用到了 <a href="https://www.runoob.com/jsref/jsref-find.html"><code>find</code> 函数</a>，用来代替复杂的 <code>for-if</code> 来寻找数组中符合条件的元素。否则以上代码就会写成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量关联翻译</span></span><br><span class="line"><span class="title function_">mongoIdFormat</span>(<span class="params">row, column</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> mongo <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">mongoVariableOptions</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mongo.<span class="property">value</span> === row.<span class="property">mongoId</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> mongo.<span class="property">label</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>显然太麻烦了，尤其是在类似的操作很多的情况下。</p>
<h3 id="3-2-设备类型"><a href="#3-2-设备类型" class="headerlink" title="3.2 设备类型"></a>3.2 设备类型</h3><p>【设备类型】模块也是个简单单表，用来定义机床的类型，但我们在上面加了绑定变量的功能。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-22.png" alt="设备类型页面"></p>
<h4 id="3-2-1-图片上传与显示"><a href="#3-2-1-图片上传与显示" class="headerlink" title="3.2.1 图片上传与显示"></a>3.2.1 图片上传与显示</h4><p>图片上传功能是若依自带的 <code>ImageUpload</code> 组件，不需要额外设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-23.png" alt="添加设备类型页面"></p>
<p>图片传到数据库的是图片路径字符串，为了显示在表格里，我写了如下的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;typeList&quot;</span> @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;类型图片&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;devicetypeImage&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-image</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;scope.row.devicetypeImage !== null&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:src</span>=<span class="string">&quot;scope.row.devicetypeImage&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:preview-src-list</span>=<span class="string">&quot;[scope.row.devicetypeImage]&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>图片有则显示，没有则不显示，如果不加 <code>v-if</code>，没有图片时会出现一个读取图片失败的方框占位，影响美观。</p>
<h4 id="3-2-2-单选-多选按钮的逻辑"><a href="#3-2-2-单选-多选按钮的逻辑" class="headerlink" title="3.2.2 单选/多选按钮的逻辑"></a>3.2.2 单选/多选按钮的逻辑</h4><p>表格内有两类按钮，一类是表格上方带颜色的按钮，一类是表格右边每个数据项的蓝色文字按钮。这两类按钮功能基本一致。</p>
<p>表格右边的按钮与每个数据项关联，因此只对某个数据项起作用；表格上方的按钮与表格左边的多选框关联，因此不一定只对一个数据项起作用。像修改按钮，不允许多选操作，只允许单选操作，删除按钮则同时支持单选/多选操作。我们设计的绑定变量功能应与修改按钮类似。</p>
<p>若依则是通过如下方式设置这两种按钮的逻辑的：</p>
<ul>
<li>表格数据项按钮传参，为当前参数；上方的按钮不传参，此时函数的参数就为 <code>undefined</code>，通过一个数组 <code>ids</code> 去处理。再通过逻辑或选择，见 2.1.3 节。</li>
<li>上方的按钮设置 <code>disabled</code> 属性为布尔值 <code>single</code> 或 <code>multiple</code>，在勾选时改变其布尔值，以达到按钮启用效果。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;10&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mb8&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;success&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">&quot;single&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;handleUpdate&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;deviceCenter:type:edit&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">&quot;multiple&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;handleDelete&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;deviceCenter:type:remove&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;info&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">&quot;el-icon-key&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">&quot;single&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;handleBind&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;deviceCenter:type:bind&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>绑定变量<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;typeList&quot;</span> @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class-name</span>=<span class="string">&quot;small-padding fixed-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;deviceCenter:type:edit&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">&quot;el-icon-key&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;handleBind(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;deviceCenter:type:edit&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>绑定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;deviceCenter:type:remove&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 选中数组</span></span><br><span class="line">    <span class="attr">ids</span>: [],</span><br><span class="line">    <span class="comment">// 非单个禁用</span></span><br><span class="line">    <span class="attr">single</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 非多个禁用</span></span><br><span class="line">    <span class="attr">multiple</span>: <span class="literal">true</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 多选框选中数据</span></span><br><span class="line">  <span class="title function_">handleSelectionChange</span>(<span class="params">selection</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ids</span> = selection.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">single</span> = selection.<span class="property">length</span>!==<span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">multiple</span> = !selection.<span class="property">length</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-绑定变量"><a href="#3-2-3-绑定变量" class="headerlink" title="3.2.3 绑定变量"></a>3.2.3 绑定变量</h4><p>绑定变量用的是一个穿梭框，基于 <a href="https://element.eleme.cn/#/zh-CN/component/transfer">ElementUI 的穿梭框</a> 设计。左边是变量列表，右边是已与该类型绑定的变量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-24.png" alt="对设备类型绑定变量页面"></p>
<p><strong>Vue 部分</strong>，将穿梭框放在一个对话框里即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定变量对话框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;bindingparamTitle&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;bindingparamOpen&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">append-to-body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-transfer</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;deviceBindingParamValue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;text-align: left; display: inline-block&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:titles</span>=<span class="string">&quot;[&#x27;全部变量&#x27;,&#x27;已选择的变量&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">      <span class="attr">filter-placeholder</span>=<span class="string">&quot;请输入变量名称&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:data</span>=<span class="string">&quot;paramOptions&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;bindingparamSubmitForm&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;bindingparamCancel&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>script</code> 部分</strong>，当用户点击某个设备类型的绑定按钮时，调用 <code>handleBind</code> 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 绑定变量按钮操作 */</span></span><br><span class="line"><span class="title function_">handleBind</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deviceBindingParamValue</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deviceBindingParamValueOrigin</span> =[];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bindingTypeId</span> = row.<span class="property">id</span> || <span class="variable language_">this</span>.<span class="property">ids</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="title function_">listDevicetypeparam</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> row <span class="keyword">of</span> response.<span class="property">rows</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (row.<span class="property">devicetypeId</span> === <span class="variable language_">this</span>.<span class="property">bindingTypeId</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deviceBindingParamValue</span>.<span class="title function_">push</span>(row.<span class="property">paramId</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deviceBindingParamValueOrigin</span>.<span class="title function_">push</span>(row.<span class="property">paramId</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">getType</span>(<span class="variable language_">this</span>.<span class="property">bindingTypeId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bindingparamOpen</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bindingparamTitle</span> = <span class="string">&quot;对设备类型绑定变量&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>提前准备一个类型与变量的关联表，存储两者 id。上面第 6 行查询该表，并把属于该类型的已绑定的变量 id 拿出来放在数组中备用。</p>
<p>用户在穿梭框内操作完毕，准备点击确定按钮时，调用 <code>bindingparamSubmitForm</code> 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 绑定变量提交按钮 */</span></span><br><span class="line"><span class="title function_">bindingparamSubmitForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> needToDelete = [];</span><br><span class="line">  <span class="keyword">let</span> needToAdd = [];</span><br><span class="line">  <span class="keyword">const</span> difference = <span class="variable language_">this</span>.<span class="property">deviceBindingParamValueOrigin</span>.<span class="title function_">concat</span>(<span class="variable language_">this</span>.<span class="property">deviceBindingParamValue</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">v, i, arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(v) === arr.<span class="title function_">lastIndexOf</span>(v);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> dif <span class="keyword">of</span> difference) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deviceBindingParamValue</span>.<span class="title function_">indexOf</span>(dif) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      needToAdd.<span class="title function_">push</span>(dif);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deviceBindingParamValueOrigin</span>.<span class="title function_">indexOf</span>(dif) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      needToDelete.<span class="title function_">push</span>(dif);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> add <span class="keyword">of</span> needToAdd) &#123;</span><br><span class="line">    <span class="title function_">addDevicetypeparam</span>(&#123;</span><br><span class="line">      <span class="attr">devicetypeId</span>: <span class="variable language_">this</span>.<span class="property">bindingTypeId</span>,</span><br><span class="line">      <span class="attr">paramId</span>: add,</span><br><span class="line">      <span class="attr">enterpriseId</span>: <span class="literal">null</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">listDevice</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> device <span class="keyword">of</span> response.<span class="property">rows</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (device.<span class="property">devicetypeId</span> === <span class="variable language_">this</span>.<span class="property">bindingTypeId</span>) &#123;</span><br><span class="line">          <span class="title function_">addDeviceParamType</span>(&#123;</span><br><span class="line">            <span class="attr">deviceId</span>: device.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">paramId</span>: add,</span><br><span class="line">            <span class="attr">devicetypeId</span>: <span class="variable language_">this</span>.<span class="property">bindingTypeId</span>,</span><br><span class="line">            <span class="attr">ncsId</span>: device.<span class="property">ncsId</span>,</span><br><span class="line">            <span class="attr">enterpriseId</span>: device.<span class="property">enterpriseId</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> del <span class="keyword">of</span> needToDelete) &#123;</span><br><span class="line">    <span class="title function_">listDevicetypeparam</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> row <span class="keyword">of</span> response.<span class="property">rows</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (row.<span class="property">devicetypeId</span> === <span class="variable language_">this</span>.<span class="property">bindingTypeId</span> &amp;&amp; row.<span class="property">paramId</span> === del) &#123;</span><br><span class="line">          <span class="title function_">delDevicetypeparam</span>(row.<span class="property">id</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">listDeviceParamType</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> row <span class="keyword">of</span> response.<span class="property">rows</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (row.<span class="property">devicetypeId</span> === <span class="variable language_">this</span>.<span class="property">bindingTypeId</span> &amp;&amp; row.<span class="property">paramId</span> === del) &#123;</span><br><span class="line">          <span class="title function_">delDeviceParamType</span>(row.<span class="property">id</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (needToAdd.<span class="property">length</span> !== <span class="number">0</span> || needToDelete.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bindingparamOpen</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>上述代码的逻辑是，判断一下现在的 <code>deviceBindingParamValue</code> 数组与穿梭框修改后的有哪些变化，有加的就加 <code>needToAdd</code>，有删除的就加 <code>needToDelete</code>，再逐一修改。其中 5-15 行这里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> difference = <span class="variable language_">this</span>.<span class="property">deviceBindingParamValueOrigin</span>.<span class="title function_">concat</span>(<span class="variable language_">this</span>.<span class="property">deviceBindingParamValue</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">v, i, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(v) === arr.<span class="title function_">lastIndexOf</span>(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> dif <span class="keyword">of</span> difference) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deviceBindingParamValue</span>.<span class="title function_">indexOf</span>(dif) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    needToAdd.<span class="title function_">push</span>(dif);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deviceBindingParamValueOrigin</span>.<span class="title function_">indexOf</span>(dif) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    needToDelete.<span class="title function_">push</span>(dif);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>concat</code> 连接改变前和改变后的两个数组，<code>filter</code> 筛选出其中元素前后索引值相等的数组（即只出现一次的数字，就是被改变的），再通过判断这个数组中每个元素出现在改变前还是改变后的数组，确定要加还是要删。</p>
<p>如 <code>deviceBindingParamValueOrigin</code> 数组（改变前）为 <code>[1, 2, 4]</code>，<code>deviceBindingParamValue</code> 数组（改变后）为 <code>[1, 4, 5]</code>，则 <a href="https://www.runoob.com/jsref/jsref-concat-string.html"><code>concat</code></a> 后为 <code>[1, 2, 4, 1, 4, 5]</code>，<a href="https://www.runoob.com/jsref/jsref-filter.html"><code>filter</code></a> 后为 <code>[2, 5]</code>，判断后，<code>needToAdd</code> 为 <code>[5]</code>，<code>needToDelete</code> 为 <code>[2]</code>，再拿这两个数组去做真正地增删操作。</p>
<p>用户准备点击取消按钮时，调用 <code>bindingparamCancel</code> 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定变量取消按钮</span></span><br><span class="line"><span class="title function_">bindingparamCancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bindingparamOpen</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deviceBindingParamValue</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deviceBindingParamValueOrigin</span> =[];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bindingTypeId</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-设备信息"><a href="#3-3-设备信息" class="headerlink" title="3.3 设备信息"></a>3.3 设备信息</h3><p>【设备信息】模块也是个单表，用来存储每台具体的设备。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-25.png" alt="设备信息页面"></p>
<p>这个单表没有更多的技术难点。每个数据项的操作加了一个更多信息按钮，这个按钮可以跳转到该机床的监控页面，跳转是通过路由进行的，这一部分放到后面再讲。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/status/device/` + scope.row.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">&quot;el-icon-more&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>更多信息</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上【企业中心】和【设备中心】两个模块，如果不算后期不断地调整美化，只算页面和功能的大体成型，我大概做了 <strong>3 个星期</strong> 左右。这 3 个星期也是边学边做的一个过程，巩固了很多 Vue 和 JavaScript 的知识，对于我的代码和 debug 能力有很大的提升。昆山团队退出后，我们开始忙于【工作台】与【统计报表】的制作，这花了我 <strong>整整 2 个月</strong>。这两个模块的技术难度也不亚于这篇文章所提到的，下次有空再补充！</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20211024/20211024-26.png" alt="企业中心和设备中心的 commit 过程"></p>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>工业互联网平台</tag>
        <tag>编程</tag>
        <tag>前端</tag>
        <tag>技术</tag>
        <tag>Vue</tag>
        <tag>ElementUI</tag>
        <tag>开发</tag>
        <tag>远程运维</tag>
      </tags>
  </entry>
  <entry>
    <title>我的 2023 和 2024 年度总结</title>
    <url>/2025/01/18/my-2023-and-2024-annual-summary/</url>
    <content><![CDATA[<p>很久没有更新核心舱了，上一次还是在 2022 年秋招时期，现在我工作都已经一年半了。在 2025 年年初这一段时间，我来总结一下过去的两年，我在技术等方面做了些什么。</p>
<span id="more"></span>
<p><del><em>此次要总结的内容有点多，可能会持续拖更。</em></del> 写了一个星期终于写完了！</p>
<h2 id="1-工作"><a href="#1-工作" class="headerlink" title="1 工作"></a>1 工作</h2><p>既然上次更新是秋招，那就从秋招开始说起吧。</p>
<h3 id="1-1-第一年的工作：华为云（2023-8-2024-9）"><a href="#1-1-第一年的工作：华为云（2023-8-2024-9）" class="headerlink" title="1.1 第一年的工作：华为云（2023.8-2024.9）"></a>1.1 第一年的工作：华为云（2023.8-2024.9）</h3><p>2022 年我大概关注了 50 家公司，最终取得 offer 的有 4 家，分别是：</p>
<ul>
<li><strong>A 公司</strong>：某家电制造企业，岗位是前端开发，工作地点在某东部沿海城市</li>
<li><strong>B 公司</strong>：某安防企业，岗位是前端／移动端开发，工作地点在杭州滨江</li>
<li><strong>C 公司</strong>：某大厂，岗位是 iOS 开发，工作地点在北京</li>
<li><strong>D 公司</strong>：华为云，岗位是 SA，工作地点在杭州滨江</li>
</ul>
<p>其中 A 公司发放 offer 时间较早，综合考虑后我主动拒签；B 公司和 C 公司几乎是同时发放的 offer，我最后选择了 B 公司进行三方签约；2023 年 1 月份，D 公司咨询我的意见，我最终考虑后，毁约了 B 公司，选择了 D 公司。</p>
<p>这里可以给出我做出几个选择的理由：</p>
<ul>
<li>A 公司：薪资水平较低，不符合该城市的生活水平，并且该城市也不是我想去的城市</li>
<li>C 公司：虽然是大厂，但是是白菜价，iOS 开发也是我从未接触过的领域，虽然该公司开的价格比 D 公司高，但身处北京，把生活成本去掉后，其实也差不多</li>
<li>B 公司：和 D 公司一个薪资，但知名度远不如 D 公司，在我看来薪资水平一致的情况下，我更倾向于选择知名度更高的公司</li>
</ul>
<p>最终，我选择了 D 公司，也就是华为云，我去年暑期实习过的地方。不过部门和岗位都不同，我并没有坚持我 <a href="/2022/02/28/do-i-really-want-to-go-this-way/" title="我真的要走这条路吗？">一开始决定的路线</a>，而是阴差阳错地走上了云服务 SA（Solution Architect，解决方案架构师）这条路。这对我来说是一个全新的领域，我需要从头开始学习。</p>
<p>解决方案（Solution）是很常听到的一个词，其实大部分人可能对产品（Product）或服务（Service）更熟悉。解决方案是指在特定的业务场景下，为了解决特定的问题，利用产品、服务等提供的一套完整的解决方案。而 SA 就散负责设计这套解决方案的人。</p>
<p>在华为云体系中，存在很多不同的 SA 角色，如产品 SA，业务部 SA，销售部 SA，一线<sup><a href="#fn_1" id="reffn_1">1</a></sup> SA 等。我的角色是业务部 SA，与其他 SA 不同，我一般负责售前的环节，将客户的需求转化为一整套解决方案，同时业务部属于机关部门，是研发体系，所以不会承担客户关系的维护工作。因此可以看出我这个岗位的一些特点：</p>
<ul>
<li>经常出差，需要到客户现场</li>
<li>几乎不会接触代码，不承担开发工作</li>
<li>需要了解各类云产品的技术细节，广且杂</li>
<li>需要沟通能力强，尤其是面对客户、一线、研发等</li>
</ul>
<p>到目前为止，我主要做了这些工作：</p>
<p>2023 年 8 月到 11 月，我在 SAC（Solution As Code）团队承担开发工作。这个团队主要负责孵化华为云的解决方案，并将其转化为 Terraform 代码，以便于用户快速部署。这个《<a href="https://www.huaweicloud.com/solution/implementations/cci-based-cce-container-cluster-ultra-elastic-transformation-architecture.html">基于CCI的CCE容器集群极致弹性转换架构</a>》方案就是我做的。</p>
<p>2023 年 11 月到 2024 年 2 月，我在互联网 NA<sup><a href="#fn_2" id="reffn_2">2</a></sup> 团队的昇腾云小组，支撑了某旅游网站等重点客户。</p>
<p>2024 年 2 月，部门被重组，四级部门与其他部门合并，互联网 NA 团队变成了泛互联网赛道团队，自此，我在其中所谓「综合赛道」，支撑了某汽车网站、某在线教育网站等客户的通用云服务业务。</p>
<h3 id="1-2-第二年的工作：华为终端（2024-9-now）"><a href="#1-2-第二年的工作：华为终端（2024-9-now）" class="headerlink" title="1.2 第二年的工作：华为终端（2024.9-now）"></a>1.2 第二年的工作：华为终端（2024.9-now）</h3><p>2024 年 8 月，我决定跑路，公司内部转岗。实际上 6 月底我就开始有这个计划，其中一波三折，让我整个 7、8 月都过得非常不舒服，具体事情我就不细说了，没什么值得回忆的。</p>
<p>这里可以说的是，云服务 SA 并不适合新入职的员工，也不适合性格内向的我。比如以上提到的 4 个岗位的特点：</p>
<ul>
<li>经常出差：其实我对出差本身并不抵触，毕竟可以住高档酒店，还有出差补贴。但我从 4 月开始就一直在出差，最长的一段时间连续 7 周每周都在出差，长时间在外让我很不适应，也很担心叉叉<sup><a href="#fn_3" id="reffn_3">3</a></sup>一个人在家。</li>
<li>不写代码：虽然很多人劝我说，写代码是很低级的工作，将来你写代码久了后就不会再写了。但是目前对我来说，写代码更能找到舒适的感觉，我在现在的工作上很难钻研。</li>
<li>云产品：云产品是一个很抽象的东西，我学了很久都很难学进去，尤其是华为云自己做得也不算好，很有尾大不掉的感觉。相比抽象的技术，我更喜欢具体的技术，比如这段代码是为什么这么写（API 调用链），这段代码写了会发生什么（前端），等等如此。</li>
<li>沟通能力强：内向、脸皮薄、自信不够，这让我不仅很难面对客户，也很难与公司自己的同事交流。我很难做到对一个我不了解的东西刨根问底，<del>看似懂了其实一点没懂</del>。</li>
</ul>
<p>看起来这是一个很适合 ENTP 的工作。<del>但我是 ISFJ（无奈）</del></p>
<p>此外这份工作还有很多其他缺点，例如华为云本身的问题、部门发展上的问题等，这里就不赘述了。其实我也并没有很反对华为云的工作模式（<del>毕竟它给了我工作不是</del>），但我还是觉得每个工作总有合适它的人，而这个工作并不适合我。</p>
<p>总之，当我在第一个部门满一年（2024 年 8 月）后，我马上开始筹备转岗计划。大概了解了十几个部门后，我转到了现在的部门，并在 9 月底入职，现在差不多有 4 个月了。</p>
<p>首先我现在的一级部门从华为云换到了 <strong>华为终端</strong>。这是华为最庞大也是最主要的 BU（事业群），顾名思义就是负责华为手机等一系列面向消费者的产品。</p>
<p>众所周知 2024 年华为的重头戏是 <strong>纯血鸿蒙系统</strong>（也就是 HarmonyOS NEXT），我所在的部门就是参与 HarmonyOS 的底座 <a href="https://openharmony.cn/">OpenHarmony</a> 的开发。OpenHarmony 类似于 AOSP（安卓开源项目），在我加入的时候 5.0.0 版本已经发布，也就是为 HarmonyOS NEXT 准备的底座版本。</p>
<p>OpenHarmony 也是很大的，我所在的团队主要负责 OpenHarmony 中 <a href="https://docs.openharmony.cn/pages/v5.0/zh-cn/application-dev/ui/arkui-overview.md">ArkUI 框架</a> 的开发，主要写 TypeScript 和 C++ 代码。更具体的就不再说了，<del>再说就要涉密了</del>。</p>
<p>在现在部门工作 4 个月以来，虽然还处于适应阶段，但我还是处理了相当数量的问题单，并已经交付了一些需求。目前的工作环境还挺好的，我也能基本适应。</p>
<p>可以简单讲讲我做这些选择的理由：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>选择</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>当前部门的部分优势</td>
<td>1. 流程化好，wiki 完备，对新员工很友好，不会说完全无法下手<br>2. 大家都是搞技术的，很好交流，工作环境舒适<br>3. 团队就在杭州，与领导、与团队接触时间多，沟通方便<br>4. 终端福利相对较好</td>
</tr>
<tr>
<td>为什么不去其他部门</td>
<td>好几个部门的工作并没有完全符合我的兴趣，我觉得一份工作干得开不开心还是很重要的，要是每天干得想跑路，何必折磨自己呢</td>
</tr>
<tr>
<td>当前部门的部分不足</td>
<td>1. 工作压力会更大，上班时间相比之前多了一倍还不止<br>2. 交付节奏快，我经历过一个需求周一写完周五上库下周一转测，太肝了</td>
</tr>
</tbody>
</table>
</div>
<p>不过现在还没有工作太久，目前来说我对我所做的选择还是挺满意的。至于以后如何看待当时的选择，就交给时间吧。</p>
<p>由于 OpenHarmony 是开源代码，我们很多工作还要在国内的开源平台 <a href="https://gitee.com/">Gitee</a> 上进行开发，所以你能在 <a href="https://gitee.com/kaluojushi">我的 Gitee 主页上</a> 看见我的开发记录。这也是我在研究生期间 <a href="/2021/10/27/frontend-technical-summary-of-developing-remote-operation-and-maintenance-platform-of-a-machine-tool-factory-1/" title="开发某机床厂远程运维平台的前端技术总结（1）">开发某机床厂远程运维平台</a> 后，继续使用 Gitee 进行开发。说实话，第一次看到自己写的代码上库，并运行在手机里时，我的心里是十分激动的。如果读者有在使用 HarmonyOS NEXT 系统最新版本时，里面已经有我写的代码了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-1.png" alt="截止即日我的 Gitee 贡献"></p>
<h2 id="2-科研与毕设"><a href="#2-科研与毕设" class="headerlink" title="2 科研与毕设"></a>2 科研与毕设</h2><p>2022 年初的时候，当时基本确定了自己的研究方向是「数控滚齿加工的智能化发展及工业互联网、人工智能等信息化技术在数控滚齿加工中的应用」。从此研究生的工作就从这里开始。</p>
<h2 id="2-1-第一阶段：初步构思（2022-1-2022-7）"><a href="#2-1-第一阶段：初步构思（2022-1-2022-7）" class="headerlink" title="2.1 第一阶段：初步构思（2022.1-2022.7）"></a>2.1 第一阶段：初步构思（2022.1-2022.7）</h2><p>2022 年 7 月初，当时我正在实习，还抽空返校完成了中期答辩。这让我非常紧张，因为整个 2022 年上半年我在科研上投入的时间非常少，按正常的硕士研究生进度，在研二的暑假也就是中期答辩这个节点，理应对毕业论文每一部分应当做什么有一个大概的认知了。</p>
<p>当时我以很快的速度，基于我这半年来所看的资料，做了一个大概的构想，用于中期答辩：</p>
<ul>
<li>论文标题是《基于 <strong>云知识库</strong> 数控滚齿加工 <strong>参数化自动编程</strong> 云平台的研究开发》</li>
<li>论文的三个主要部分分别是：<ul>
<li>数控滚齿加工自动编程方法</li>
<li>数控滚齿加工工艺决策关键技术</li>
<li>数控滚齿加工工艺云知识库搭建</li>
</ul>
</li>
<li>最后再进行云平台搭建</li>
</ul>
<p>这个构想也可以说是后面我论文成型的基础。但是有了构想还不够，还要说每一部分需要做什么。我当时的进度是用之前做过的云平台直接 copy 了过来进行魔改，编程方法也只有大概了解而无法实操。</p>
<p>最终我用我在我在网上看到的一个 SVG 齿轮模型参数化生成方法（这个项目我已经搭建好，点击 <a href="https://corecabin.cn/IGHS-JStest/" target="_blank">这里</a> 查看 Demo），加上自动编程方法的理论，再加上半成品平台，凑成了中期答辩的内容。</p>
<p>现在看来，当时的构想并不成熟，且当时所做的工作也仅占论文结构的 10% 都不到，中期答辩过得还是太侥幸了。</p>
<h2 id="2-2-第二阶段：被动开始（2022-11-2023-2）"><a href="#2-2-第二阶段：被动开始（2022-11-2023-2）" class="headerlink" title="2.2 第二阶段：被动开始（2022.11-2023.2）"></a>2.2 第二阶段：被动开始（2022.11-2023.2）</h2><p>中间我隔了一段时间没有投入科研，先是暑期实习，再是研三开始的秋招。这个秋招实在是折磨了我相当一段时间，直到我签好三方 <del>并开始爱华等华信华</del> 的时候，已经 11 月了，这个时候我才开始投入论文的工作。</p>
<p>11 月是我非常难熬的一个月。这个月除了一些情感的波动外，论文要如何写完也是很让我头疼的一件事。当时的我完全没有思路，中期答辩提到的内容也只是很理想的东西，并没有把握可以落地，也不清楚每个模块到底怎么做。</p>
<p>11 月中旬，我去了一趟湖州出差，也就是之前提到的某滚齿机床厂，向他们要了一些资料，得到了一些他们实际使用的滚齿代码及相关解释。在这整个月，我也翻遍了所有涉及滚齿加工的论文，看看哪些技术或工作可以融入我的论文中。<strong>这时不仅我的毕业论文还并未开始，相关的研究也尚未开始，同时间的同学论文进度已经过半。</strong></p>
<p>紧接着更不幸的事来了，11 月底学校疫情大爆发，我们被封在寝室，然后 12 月底我又感染上了新冠，祸不单行。</p>
<p>可是时间不等人。我从滚齿工艺理论部分写起，先把加工原理和数学建模部分写好，这也是其他滚齿加工论文中必有的部分。我还清楚记得 2023 年学位预审时间是 1 月 18 日，那时我的论文还写了不到一章。</p>
<p>我做出了一个非常重要的决定：<strong>延毕</strong>，从 3 月毕业延到 6 月毕业。</p>
<blockquote>
<p>不过后来我得知，当年的延毕率从往年的 <strong>三分之一</strong> 一下子上升到了 <strong>三分之二</strong>。这真是可怕的一件事。不仅是我，那一年大家受到秋招和疫情的冲击论文都没写完。</p>
</blockquote>
<p>到过完年 2 月返校后，我的论文的理论部分基本完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-2.png" alt="辛辛苦苦画的图啊" style="zoom: 50%;" /></p>
<h2 id="2-3-第三阶段：力挽狂澜（2023-3-2023-4）"><a href="#2-3-第三阶段：力挽狂澜（2023-3-2023-4）" class="headerlink" title="2.3 第三阶段：力挽狂澜（2023.3-2023.4）"></a>2.3 第三阶段：力挽狂澜（2023.3-2023.4）</h2><p>2023 年 3 月，在其他同学已经在毕业答辩时，我继续加足马力准备我的论文。</p>
<p>此前，我对论文第一部分研究工作已经有了一个构想，那就是写滚齿加工中的 <strong>多目标参数优化</strong>。这一研究已经有很多人做过，尤其是重庆大学的机械传动实验室，几乎是祖传做这个的。我所做的工作就是建立一个我自己的数学模型，并选择一个合适的算法进行多目标参数优化求解。</p>
<p>这里我依次使用了 HDBSCAN（基于层次密度的噪声应用空间聚类） 算法、GMOMPA（引导性多目标海洋捕食者算法）、AHP（层次分析法）和 TOPSIS（逼近理想解排序法）进行了研究。所有的算法我都进行了一些微调，以适应我的研究场景，<del>可以说就是个缝合怪</del>。尤其是几乎整个 3 月我都投入在用 Python 复现 GMOMPA 算法的过程上，这个成果十分宝贵，有机会我会拿出来讲一讲。</p>
<p>此前这一部分内容决定放在第二章，后来发现第二章内容实在过多。于是我整合了多目标参数优化和自动编程的理论部分，把它们统一放在第二章，第三章再写多目标参数优化。但第三章还是洋洋洒洒写了三十页，最后不得已删掉了十页的内容。</p>
<p>2023 年 4 月初，我完成了第二、三章内容。这两章我作为了我毕设的重头部分。然而面对接下来的章节，我还没有特别明确的想法。</p>
<p>但是一件很重要的事改变了我，那就是五一期间的 <strong>「南京咪豆音乐节」</strong>。这是吴青峰时隔 4 年、苏打绿时隔 7 年再来大陆公开演出，那么我一定要去。为了能玩得更放松，我立志 <strong>五一前一定要把论文写完</strong>，无论付出何种努力。有时候追星的力量还真的挺重要的，能让人做成任何事情。</p>
<p>于是这个 4 月，只要没有想法或者对我当前进度不满意，我就在办公室熬大夜。有时候挺有效的，可能某个晚上就有了灵感，能滔滔不绝地写下去。<strong><em>其实并不建议大家学习我的做法，很伤身体。</em></strong></p>
<p>哦对，还有一个工具帮助了我很多，那就是当时刚火起来的 <strong>ChatGPT</strong>，我甚至开通了每月 20 美元的 ChatGPT Plus。</p>
<div class="note warning">
            <p>不过我还是要指出，虽然很多人放言说 ChatGPT 能写整篇毕业论文，但它对论文思路等没有任何帮助。论文一定是人来主导，人来把握思路、设计逻辑和主笔，ChatGPT 只能在纠正语病、重新阐述、中英翻译上起到辅助作用，绝不可能用来写正文，即使是现在 AI 技术有显著提升后也是如此。</p>
          </div>
<p>当时我已经决定把滚齿的自动编程技术放最后一章，也就是基于第三章确定加工工艺参数后，再去做自动编程。这中间有个衔接的部分，我头脑风暴了很久，也看了很多论文，最后参考室友的论文，这一部分决定填充上 <strong>加工工艺决策</strong>，这样逻辑就串上了。我需要进行一个滚齿加工，那么我先对加工参数优化一下，再确定一下加工方法，最后再去拿到加工代码。</p>
<p>加工工艺决策的方法其实不少，即使是最传统的决策树也是几十年前的产物了。于是我又把室友没有使用的方法拿了过来，决定用 <strong>「知识图谱」</strong> 来做。我又参考一些论文后，自己的论文所涉及的逻辑是：NLP（自然语言处理）做加工要求语义化分解，用模型表示分解后的加工要求，用知识图谱（Neo4j）存储已有加工知识，再用语义相似度做决策。</p>
<p>上述逻辑虽然最后拿掉了 NLP 部分，但整个内容也撑得起一章了。我用了几个晚上分别作出了简单的 Demo，用了几个晚上完成了正文，一周内就把第四章基本完成了。<em>这一章最主要的缺点是，理论部分相当多，保持创新性还生创了一些概念，这不是工科论文的工作量应该所体现的地方（应以落地为主），但我也已经没有办法了。</em></p>
<p>第五章，决定写一开始就准备的 <strong>「自动编程」</strong>。虽然这部分工作我准备得最久，看的论文最多，但我发现这一部分已经撑不起一章的工作量了。因为别人的论文都是把这部分和理论部分放一起写，但如前文所述我把理论部分单拎了一章出来，我又没法用滚齿机去操作，实验部分不足，导致这部分我可能只能写 5 页左右。</p>
<p>最后，还是在阅读了大量论文的情况下，我参考某一篇论文，使用表达式驱动算法<sup><a href="#fn_4" id="reffn_4">4</a></sup>填充内容，填充到了 10 页左右。虽然还是不够，但也是我目前能做到的最好了。</p>
<p>于是在五一之前，我基本完成了四个章节（一章理论加三章实际工作）的内容。虽然没有达到全写完论文这个宏伟目标，但也不用绞尽脑汁去想每一部分该写什么了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-3.png" alt="当时发的微博，2023 年 4 月 25 日的凌晨 4 点 46 分，还在办公室写 Neo4j" style="zoom: 50%;" /></p>
<h2 id="2-4-第四阶段：大功告成（2023-5-2023-6）"><a href="#2-4-第四阶段：大功告成（2023-5-2023-6）" class="headerlink" title="2.4 第四阶段：大功告成（2023.5-2023.6）"></a>2.4 第四阶段：大功告成（2023.5-2023.6）</h2><p>咪豆回来后，我继续准备毕业论文的其他部分。</p>
<p>根据我论文的历史记录（我隔一段时间就会完整存档一次），我首先写完的是中文摘要、第六章（平台搭建）的理论部分、第七章（总结与展望）全部。同时为了解决第五章提到的实验不足问题，我在网上 <del>花钱买</del> 找了一个 Vericut<sup><a href="#fn_5" id="reffn_5">5</a></sup> 滚齿模型，并按我自己的参数进行了调整。紧接着花了三天时间，写完了我认为最难的第一章（绪论）的全部内容。<em>不过我也坦言这导致我的绪论质量并不算太好。</em></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-4.png" alt="我使用的 Vericut 仿真模型"></p>
<p>2023 年 5 月中旬，我又去了一趟湖州出差，向工程师要到了实际加工过的齿轮，并让他们测量了齿轮的加工误差，上述内容补充到了第五章里，这样第五章就完整了。</p>
<p>然后，我继续完成英文摘要以及第六章平台的实际搭建。平台的搭建工作比较顺利，因为这其实是我的老本行。最后就是文中的一些流程图表，这个工作我放到最后来做的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-6.png" alt="这张封面是我花 40 块钱从素材网上买来的，有时候一些钱还是得花"></p>
<p>论文的标题我开始确定的是《数控滚齿智能化加工中关键技术的研究与应用》，后来被导师改为《数控滚齿加工工艺智能优化技术研究》。也就是把「智能化加工关键技术」这个比较大的范畴改成了「加工工艺智能优化」这个比较小的技术。论文正文我也修改了一点以便扣题，论文标题真重要啊。</p>
<p>到 2023 年 5 月 24 日，我的论文已全部完成，就这三个月我完成了我论文的全部内容，真是个奇迹。我提交所内预审的时间是 5 月 26 日，6 月 2 日我拿到了预审结果，把论文做了一点修改，并在第二天马上送了盲审。</p>
<p>6 月 13 日，我准备好了答辩 PPT，但当时我的盲审结果只出了两个 B<sup><a href="#fn_6" id="reffn_6">6</a></sup>，因此我还是无缘 14 日的组内答辩。好在 15 日第三个结果出来了，导师马上给我安排了 16 日的单人答辩（有的评委由于出差还是线上参与）。结果当然是顺利通过了，真的感谢各位老师。</p>
<p>要提到的是，我们论文送盲审后评审给结果的期限是 14 天，6 月 3 日送盲审，最迟出结果的时间就是 6 月 17 日。当年我们答辩结果从学院送到学校的学术评定委员会是 6 月 20 日，否则无法赶上 6 月 24 日的毕业典礼。中间还有一个周末，所以我真的是卡着最后关头完成了答辩，非常极限。</p>
<h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><p>虽然我的论文最主要的三个工作是三个月时间写完的，但这并不代表我的经验可以被复制。我很多地方能很快写完，也得益于之前所做的一些工作。当然，如果我能早点开始，早点有一些想法，相信论文质量也会更高一点。</p>
<p>同时我的一点感受是，很多工作，是边写边做的。你如果不写，你做了再多工作，可能也无法写到论文里凑数。所以我觉得在做科研时一定要把现在的工作当做毕业论文的标准来做，最好是写下来，这真的对最后真正写论文时很有帮助。</p>
<p>此外这个过程中导师在论文工作上对我的帮助也不大，这与我被导师放养还是有一定关系的，平时很爽快毕业很痛苦。所以论文每一章写什么、遇到什么难处还是要和导师说，时间充足的话导师都能解决，一旦时间不够，导师也无力回天。</p>
<p>总之，不管怎么说，那段难熬的时光还是过去了，你浙终究还是把我送出了它的大门。感谢这个过程中所有帮助过我的人吧，还有我自己。</p>
<h2 id="3-个人项目"><a href="#3-个人项目" class="headerlink" title="3 个人项目"></a>3 个人项目</h2><p>2023 年到 2024 年，这两年我仍然在坚持创作这件事。但是我觉得我很大的一个改变就是，我开始将 <strong>爱好与技能</strong> 结合在一起。</p>
<p>虽然这两年我在追星途中，也有做周边这种「创作」，但并不是本文主题。下文谈到的更多是涉及互联网的创作。</p>
<h3 id="3-1-苏打盖-Sodaguide"><a href="#3-1-苏打盖-Sodaguide" class="headerlink" title="3.1 苏打盖 Sodaguide"></a>3.1 苏打盖 Sodaguide</h3><p>为你隆重介绍我这两年最自豪的项目：<strong>苏打盖 Sodaguide</strong>，网址是 <a href="https://sodaguide.cn">https://sodaguide.cn</a>。</p>
<p>这个项目我做的是关于苏打绿 aka 鱼丁糸、吴青峰的追星百科，搜集了他们的相关资料并进行整理。在我的追星生涯中我可以说是非常了解他们，因此做这个项目得心应手。起源最初是我在即将写完毕业论文前，恰好快到苏打绿日（5 月 30 日），当时没有动力去修改论文，我就先开启了这个项目，因为它太有意思了，于是我以很大的动力改完了论文并把全部精力投入了上面。</p>
<p>这个项目也是我第二次把我的个人项目公之于众（第一次是 <a href="https://github.com/kaluojushi/zju-health-report">zju-health-report</a>），受到了很多人的喜欢。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-7.png" alt="苏打盖 Sodaguide 主页"></p>
<p>苏打盖 Sodaguide 我使用的框架是 <a href="https://v2.vuepress.vuejs.org/zh/">Vuepress</a>，这其实是 Vue 驱动的一个文档生成器，适合用来做一些技术文档的生成。但我居然拿它来做一个追星网站，还挺奇妙的。</p>
<p>苏打盖 Sodaguide 的一个衍生项目是我写的 <a href="https://20yike-report.sodaguide.io/">我的 2024 二十年一刻观演报告</a>。这是我第一次写年度报告这种页面，挺考验人的。前端用 Vue 来写，后端接口和数据库使用的是 <a href="https://laf.run/">laf</a>。虽然页面做得很辛苦，功能也比较完善，但我觉得还是不够太满意，以后再努力吧。</p>
<h3 id="3-2-苏打绿伴奏"><a href="#3-2-苏打绿伴奏" class="headerlink" title="3.2 苏打绿伴奏"></a>3.2 苏打绿伴奏</h3><p>2023 年初，我偶然间刷到了一个讲 <a href="https://github.com/Anjok07/ultimatevocalremovergui"><strong>UVR5</strong></a> 的视频。这是一个用大模型来处理音乐文件，分离伴奏与人声的工具。</p>
<p>当时苏打绿刚发行了复刻专辑《无与伦比的美丽》和《陪我歌唱》，我就在我电脑上配置好了 UVR5，并分离出了这两张专辑的和声伴奏和器乐伴奏，效果非常好。</p>
<p>我本来就是一个很喜欢伴奏的人，当年很多时候甚至把伴奏当音乐听，能听出和原曲完全不一样的感觉。有时候我在网上找一些冷门歌曲的伴奏，不是质量不好就是被塞了很多广告，根本没法听。于是当我做出了质量非常高的伴奏后，我很想把它们分享出去。</p>
<p>最初我选择的平台是网易云音乐，模仿那些苏打绿翻唱播客的形式，但很遗憾网易云很聪明地识别出了伴奏原曲并告诉我没有版权，只能作罢。而 QQ 音乐的播客不允许这种纯音乐的上传，于是我把每个伴奏都配上画面做成了视频，上传到我的 B 站上。</p>
<p>这也开始了我的 B 站 up 主之路。后来我的视频作品也不限于所有歌曲的伴奏，有咪豆的 vlog，有苏打绿抢票答题的解析，还有二创的一些视频。</p>
<p>现在我在 <a href="https://space.bilibili.com/1536096">B 站</a> 已经有了近 2000 粉丝，累计播放量也达到了 20w，有 4 个播放量破万的视频。两年前的我肯定想不到，我居然能得到这么多人的关注，对我而言也是一个新的突破吧。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-8.png" alt="截止即日我的 B 站视频数据"></p>
<h3 id="3-3-苏打音趴"><a href="#3-3-苏打音趴" class="headerlink" title="3.3 苏打音趴"></a>3.3 苏打音趴</h3><p>这个项目，我就直接把自己展示给大众了。</p>
<p>上面说到「苏打盖 Sodaguide」是 2023 年苏打绿日所做的礼物，那么这个叫「苏打音趴」的项目就是 2024 年我为苏打绿日所做的礼物。我的创作信条一直是，要创作出 <strong>令人惊叹</strong> 的东西。</p>
<p>苏打音趴是我和另一位苏打绿粉丝罗老师一起做的一个播客节目。起源来源于我们在成都看完苏打绿演唱会后，在酒店和其他粉丝们聊了一晚上各种有意思的话题，顿时我们觉得我们的表达其实可以做成节目传播给大众。我们一拍即合，通过远程录制的方式，在月底就做出了我们第一期的节目。「音趴」的意思其实是「音乐 Party」。</p>
<p>罗老师是初中物理老师，他的口才和接梗能力都是一流的。加上我在苏打绿演唱会的丰富经历，以及我的技术能力，我们的节目还起到了很不错的化学效果，有很多听众都在收听我们的节目并与我们互动。</p>
<p>我们的节目其实主要更新在 <a href="https://www.xiaoyuzhoufm.com/podcast/665697e4f87c424d606a8d5d">小宇宙播客</a>。但当我在 <a href="https://space.bilibili.com/1536096/lists/3247433">B 站</a> 做同步更新时，我发现还挺多人参与互动的，有这么多人愿意花一个小时时间在 B 站听一期播客节目，也挺神奇的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250118/20250118-9.jpg" alt="苏打音趴的节目 logo，由苏打绿粉丝 woohoo 设计" style="zoom: 8%;" /></p>
<p>唯一的遗憾是我们节目更新得太少了，至今只更新了 3 期。一方面是我们都有各自的本职工作，没有太多时间拿来录制，另一方面是播客的后期制作非常麻烦，我剪一个小时的节目可能要花费 3-5 个小时，这个确实是很累的。<del>其实最大的问题是我们都是懒癌晚期</del></p>
<h3 id="3-4-Carlo-Tools"><a href="#3-4-Carlo-Tools" class="headerlink" title="3.4 Carlo Tools"></a>3.4 Carlo Tools</h3><p>这是我 2023 年 1 月做的一个小项目，项目网址是 <a href="https://corecabin.cn/carlo-tools" target="_blank">https://corecabin.cn/carlo-tools</a>。</p>
<p>这个项目的起源是我在网上看到别人整理的一些有意思的网站合集，于是就自己整理了一个，并整合了现有的工具箱类网站和有趣项目网站到一起。</p>
<p>这个项目所用的框架是 <a href="https://docsify.js.org/#/zh-cn/">docsify</a>。这是一个比 Vuepress 更轻量级的文档网站生成器，当时对我来说也是一种技术的探索，想试试不同的文档生成器能做出怎样的场景。</p>
<p>我一直认为，开源框架和个人项目是相辅相成的。当你想做一个个人项目时，你有经验去选择一个最适合的框架；当你想尝试某个框架时，你可能会把它应用在某个实际的场景上。这样做出来的个人项目才是你自己的，不管是成功失败，不管用户数多少，都比那些跟着别人教程做的类似于「高仿某购物网站」好多了，那些项目往简历上写就是纯纯搞笑了。想学一门技术，要让它在自己的项目上落地。</p>
<p>Carlo Tools 上我还用 Vue 写了一些 <a href="https://corecabin.cn/carlo-tools/#/online/" target="_blank">在线工具</a>，比如随机数生成器、时间戳转换等。实际上就是把一些 JS 函数封装在 Vue 组件里以直观的方式暴露给用户使用，但有时候人们就是喜欢这些简单无脑的东西，好用才是王道。有一些工具我自己现在依然还经常使用，比如这个 <a href="https://corecabin.cn/carlo-tools/#/online/color" target="_blank">颜色转换</a> 工具。</p>
<h3 id="3-5-其他"><a href="#3-5-其他" class="headerlink" title="3.5 其他"></a>3.5 其他</h3><p>接下来是一些这两年做的其他项目。</p>
<p>「苏打黄猫谱」是我做的第一个小程序，使用 <a href="https://uniapp.dcloud.net.cn/">uni-app</a> 和 <a href="https://laf.run/">laf</a> 开发，于 2024 年 7 月上线。这个小程序只给我的好朋友们使用，用来记录我们所有的猫猫。</p>
<p>「JS Guide」是我 2022 年秋招期间做的一个网站，理论上不应该出现在这次年终总结里，但之前没有提到过就顺带说一下。网址是 <a href="https://jsguide.cn/">https://jsguide.cn/</a>（不过域名可能之后不再续费，使用 <a href="https://corecabin.cn/jsguide" target="_blank">https://corecabin.cn/jsguide</a> 也能访问）。这个项目是想模仿 <a href="https://javaguide.cn/">JavaGuide</a> 做一个面经网站，我也把自己秋招期间的面试经验都添加到了这个网站上。但后来的事大家也知道了，我找到的工作不做前端，后来我也忙于毕业论文，就没有再管这个项目，现在这个项目时效性已经过了。但在做这个项目过程中，还是有很宝贵的学习经历，尤其是对 Vuepress 的熟练使用对我后面做苏打盖 Sodaguide 很有帮助。</p>
<p>一些更小的项目就不再说了，你可以去我的 <a href="https://github.com/kaluojushi?tab=repositories">Github 仓库</a> 或我在核心舱整理的 <a href="/about/projects">个人项目页面</a> 查看。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>OK，拖更两年的核心舱更新终于结束了。这两年我的生活发生了翻天覆地的变化。我不再是学生，我也有想法去做我想做的事。</p>
<p>2025 年一开始，我就买了 M4 Pro 芯片的新款 Macbook Pro 16，这是我的新的生产力。满足了自己的愿望后，在新的一年，给自己提几点希望吧。</p>
<ol>
<li>在新的生产力中坚持创作，不懒惰。多更新自己的项目、博客、网站。</li>
<li>继续在音乐中追寻人生。</li>
<li>拥抱这个世界。</li>
</ol>
<p>一直以来的信条是，Tomorrow will be fine.</p>
<blockquote id="fn_1">
<sup>1</sup>. 一线在华为云中是各地区代表处的意思，直接对接客户，负责客户关系的拓展和维护。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_2">
<sup>2</sup>. NA 是 Named Account 的缩写，意思是价值客户，即华为云的重点客户。<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_3">
<sup>3</sup>. 叉叉是我的猫，一只可爱的美短加白 <del>小男孩</del> 小太监，2023 年 11 月出生。<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_4">
<sup>4</sup>. 表达式驱动算法，用数学表达式来描述算法，说白了就是把代码的字符串拼接换了个高大上的说法而已。<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_5">
<sup>5</sup>. Vericut，数控加工仿真软件。<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_6">
<sup>6</sup>. 我们要求出三个盲审结果才可以答辩，并且要求至多一个 C（一般）。<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>Myself</category>
      </categories>
      <tags>
        <tag>研究</tag>
        <tag>工业互联网</tag>
        <tag>编程</tag>
        <tag>2023</tag>
        <tag>2024</tag>
        <tag>2025</tag>
        <tag>求职</tag>
        <tag>云计算</tag>
        <tag>解决方案</tag>
        <tag>OpenHarmony</tag>
        <tag>HarmonyOS</tag>
        <tag>个人项目</tag>
        <tag>苏打绿</tag>
        <tag>苏打盖 Sodaguide</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 网络通信编程的笔记和实例</title>
    <url>/2021/09/13/notes-and-examples-of-java-network-communication-programming/</url>
    <content><![CDATA[<p>本文整理了学习 Java 网络通信编程的笔记，并分析了若干程序实例，以巩固学习成果。</p>
<span id="more"></span>
<h2 id="1-网络通信编程笔记"><a href="#1-网络通信编程笔记" class="headerlink" title="1 网络通信编程笔记"></a>1 网络通信编程笔记</h2><h3 id="1-1-网络程序设计基础"><a href="#1-1-网络程序设计基础" class="headerlink" title="1.1 网络程序设计基础"></a>1.1 网络程序设计基础</h3><h4 id="1-1-1-基本概念"><a href="#1-1-1-基本概念" class="headerlink" title="1.1.1 基本概念"></a>1.1.1 基本概念</h4><ul>
<li>局域网（LAN）、广域网（WAN）</li>
<li>IP 协议，IP 地址（IPv4，4 个字节表示）</li>
<li>TCP 协议（传输控制协议）：类似拨打电话，固接连线，可靠性高，有顺序</li>
<li>UDP 协议（数据用户报协议）：类似发送信件，无连接通信，可靠性低，不保证顺序</li>
<li>端口（port）：假想的连接装置，计算机与网络的物理连接，为整数</li>
<li>套接字（Socket）：假想的连接装置，连接程序与端口</li>
</ul>
<h4 id="1-1-2-网络通信的要素"><a href="#1-1-2-网络通信的要素" class="headerlink" title="1.1.2 网络通信的要素"></a>1.1.2 网络通信的要素</h4><ul>
<li><strong>通信双方地址：</strong> IP、端口号</li>
<li><strong>网络通信协议：</strong> TCP/IP 协议</li>
</ul>
<h3 id="1-2-TCP-程序设计基础"><a href="#1-2-TCP-程序设计基础" class="headerlink" title="1.2 TCP 程序设计基础"></a>1.2 TCP 程序设计基础</h3><h4 id="1-2-1-InetAddress-类"><a href="#1-2-1-InetAddress-类" class="headerlink" title="1.2.1 InetAddress 类"></a>1.2.1 <code>InetAddress</code> 类</h4><p>与 IP 地址相关的类，注意该类会抛 <code>UnknownHostException</code> 异常</p>
<ul>
<li>IP 地址：<ul>
<li>本机 <code>localhost</code>（127.0.0.1）</li>
<li>IPv4（4 个字节组成，42 亿），IPv6（128 位，8 个无符 16 进制整数）</li>
<li>公网（互联网），私网（局域网），ABCD 类地址</li>
</ul>
</li>
<li>无构造器，不可被 <code>new</code>，只可被自己的方法返回</li>
<li>常用方法：<ul>
<li><code>getByName(String host)</code> 获取与 Host 对应的 <code>InetAddress</code> 对象</li>
<li><code>getHostAddress()</code> 获取对象所包含的 IP 地址，返回 String</li>
<li><code>getHostName()</code> 获取 IP 主机名，返回 String</li>
<li><code>getLocalHost()</code> 获取本地主机的 <code>InetAddress</code> 对象</li>
</ul>
</li>
</ul>
<h4 id="1-2-2-ServerSocket-类"><a href="#1-2-2-ServerSocket-类" class="headerlink" title="1.2.2 ServerSocket 类"></a>1.2.2 <code>ServerSocket</code> 类</h4><p>服务器套接字，等待网络请求，注意该类会抛 <code>IOException</code> 异常</p>
<ul>
<li>端口：<ul>
<li>0~65535</li>
<li>不同的进程用不同的端口号，类似于门牌</li>
<li>端口分类：<ul>
<li>公有端口 0~1023（<code>HTTP</code> 80、<code>HTTPS</code> 443、<code>FTP</code> 21、<code>Telent</code> 23）</li>
<li>程序注册端口 1024~49151（<code>Tomcat</code> 8080、<code>MySQL</code> 3306、<code>Oracle</code> 1521）</li>
<li>动态（私有）端口 49152~65535</li>
</ul>
</li>
</ul>
</li>
<li><code>InetSocketAddress</code> 类：与 <code>InetAddress</code> 类似，加入了端口，可以 <code>new</code>，传入 String 地址和 int 端口，有 <code>getPort()</code> 等方法</li>
<li><code>ServerSocket</code> 用于等待网络请求，构造方法：<ul>
<li><code>ServerSocket()</code> 非绑定服务器套接字</li>
<li><code>ServerSocket(int port)</code> 绑定特定端口</li>
<li><code>ServerSocket(int port, int backlog)</code> 指定本机端口、指定的 <code>backlog</code></li>
<li><code>ServerSocket(int port, int backlog, InetAddress bindAddress)</code> 指定端口、侦听 <code>backlog</code> 和绑定到的本地 IP 地址</li>
</ul>
</li>
<li><code>ServerSocket</code> 的常用方法：<ul>
<li><code>accept()</code> 等待客户机连接，若连接返回一个 Socket 套接字</li>
<li><code>isBound()</code> 判断绑定状态</li>
<li><code>getInetAddress()</code> 返回本地地址的 <code>InetAddress</code></li>
<li><code>isClosed()</code> 返回关闭状态</li>
<li><code>close()</code> 关闭服务器套接字</li>
<li><code>bind(SocketAddress endpoint)</code> 绑定到特定地址（IP 和端口）</li>
<li><code>getLocalPort()</code> 获取等待端口</li>
</ul>
</li>
</ul>
<h4 id="1-2-3-TCP-网络程序"><a href="#1-2-3-TCP-网络程序" class="headerlink" title="1.2.3 TCP 网络程序"></a>1.2.3 TCP 网络程序</h4><ul>
<li><p>通信协议：速率、传输码率、代码结构、传输控制等</p>
<ul>
<li>TCP/IP 协议：协议簇，最出名的是 TCP 协议和 IP 协议</li>
<li>TCP：连接、稳定，三次握手四次挥手，客户端服务端架构，传输完成释放连接，效率低</li>
<li>UDP：不连接、不稳定，客户端服务端无明确界限，效率高</li>
</ul>
</li>
<li><p>参见第 2 章的实例</p>
</li>
</ul>
<h4 id="1-2-4-Tomcat-基础"><a href="#1-2-4-Tomcat-基础" class="headerlink" title="1.2.4 Tomcat 基础"></a>1.2.4 Tomcat 基础</h4><ul>
<li>Tomcat 是一个服务端，客户端通过浏览器进入</li>
<li>一般使用 8080 端口</li>
</ul>
<h3 id="1-4-UDP-程序设计基础"><a href="#1-4-UDP-程序设计基础" class="headerlink" title="1.4 UDP 程序设计基础"></a>1.4 UDP 程序设计基础</h3><h4 id="1-4-1-UDP-通信"><a href="#1-4-1-UDP-通信" class="headerlink" title="1.4.1 UDP 通信"></a>1.4.1 UDP 通信</h4><ul>
<li>基本模式：<ul>
<li>数据打包（数据包），发往目的地</li>
<li>接收数据包并查看</li>
</ul>
</li>
<li>发送数据包步骤：<ul>
<li>创建数据报套接字（<code>DatagramSocket()</code>）</li>
<li>创建发送的数据包（<code>DatagramPacket(byte[] buf, int offset, int length, InetAddress ip, int port)</code>）</li>
<li>发送数据包（<code>DatagramSocket().send()</code>）</li>
</ul>
</li>
<li>接收数据包步骤：<ul>
<li>创建数据报套接字并绑定到端口（<code>DatagramSocket(int port)</code>）</li>
<li>创建字节数组接收数据包（<code>DatagramPacket(byte[] buf, int length)</code>）</li>
<li>接收 UDP 包（<code>DatagramSocket().receive()</code>）</li>
</ul>
</li>
</ul>
<h4 id="1-4-2-DatagramPacket-类"><a href="#1-4-2-DatagramPacket-类" class="headerlink" title="1.4.2 DatagramPacket 类"></a>1.4.2 <code>DatagramPacket</code> 类</h4><ul>
<li>表示数据包</li>
<li>构造方法：<ul>
<li><code>DatagramPacket(byte[] buf, int length)</code> 指定数据包的内存空间和大小</li>
<li><code>DatagramPacket(byte[] buf, int length, InetAddress ip, int port)</code> 指定数据包的目标地址和端口</li>
</ul>
</li>
</ul>
<h4 id="1-4-3-DatagramSocket-类"><a href="#1-4-3-DatagramSocket-类" class="headerlink" title="1.4.3 DatagramSocket 类"></a>1.4.3 <code>DatagramSocket</code> 类</h4><ul>
<li>表示发送和接收数据包的数据报套接字</li>
<li>构造方法：<ul>
<li><code>DatagramSocket()</code> 绑定到本地主机任何可用端口</li>
<li><code>DatagramSocket(int port)</code> 绑定到本地主机指定端口</li>
<li><code>DatagramSocket(int port, InetAddress ip)</code> 绑定到指定的本地地址</li>
</ul>
</li>
</ul>
<h4 id="1-4-4-UDP-网络程序"><a href="#1-4-4-UDP-网络程序" class="headerlink" title="1.4.4 UDP 网络程序"></a>1.4.4 UDP 网络程序</h4><ul>
<li><p>服务端、客户端没有明确的界限</p>
</li>
<li><p>参见第 3 章的实例</p>
</li>
</ul>
<h3 id="1-5-URL-类"><a href="#1-5-URL-类" class="headerlink" title="1.5 URL 类"></a>1.5 URL 类</h3><p>统一资源定位器，通过地址定位互联网上的资源</p>
<ul>
<li><p>URL 的形式：<code>协议 : // ip 地址 : 端口 / 项目名 / 资源</code></p>
</li>
<li><p>构造方法：传入字符串，<code>URL(String url)</code></p>
</li>
<li><p>常用方法：</p>
<ul>
<li><code>getProtocol()</code> 获取协议名</li>
<li><code>getHost()</code> 获取主机 IP</li>
<li><code>getPort()</code> 获取端口</li>
<li><code>getPath()</code> 获取路径</li>
<li><code>getFile()</code> 获取完整路径</li>
<li><code>getQuery()</code> 获取查询名</li>
</ul>
</li>
<li><p>参见第 4 章的实例</p>
</li>
</ul>
<h2 id="2-TCP-网络程序示例"><a href="#2-TCP-网络程序示例" class="headerlink" title="2 TCP 网络程序示例"></a>2 TCP 网络程序示例</h2><h3 id="2-1-简单的接收器（服务端）、发送器（客户端）程序"><a href="#2-1-简单的接收器（服务端）、发送器（客户端）程序" class="headerlink" title="2.1 简单的接收器（服务端）、发送器（客户端）程序"></a>2.1 简单的接收器（服务端）、发送器（客户端）程序</h3><p>接收器（<code>MyReceiver.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9005</span>);	<span class="comment">// 实例化一个服务器套接字，端口9005</span></span><br><span class="line">            socket = serverSocket.accept();	<span class="comment">// 使用套接字对象接收客户端连接该端口，连接后返回套接字，可以理解为“插座”</span></span><br><span class="line">            is = socket.getInputStream();	<span class="comment">// 获取“插座”套接字的输入流</span></span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();	<span class="comment">// 实例化字节数组输出流</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];	<span class="comment">// 字节数组</span></span><br><span class="line">            <span class="type">int</span> len;	<span class="comment">//长度</span></span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;	<span class="comment">// 读取输入流到字节数组，若长度有效</span></span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);	<span class="comment">// 则将字节数组写入到字节数组输出流中</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos);	<span class="comment">// 打印字节数组输出流</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;	<span class="comment">// 以下关闭流和套接字，注意顺序先打开的后关闭</span></span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送器（<code>MyTransmitter.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransmitter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);	<span class="comment">// 获取本地主机的IP对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9005</span>;	<span class="comment">// 端口9005</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP, port);	<span class="comment">// 使用IP和端口实例化套接字，可以理解为“插头”，并连接到“插座”</span></span><br><span class="line">            os = socket.getOutputStream();	<span class="comment">// 获取“插头”套接字的输出流</span></span><br><span class="line">            os.write(<span class="string">&quot;你好！&quot;</span>.getBytes());	<span class="comment">// 输出流写入字符串转换的字节数组</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;	<span class="comment">// 以下关闭流和套接字</span></span><br><span class="line">            <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>服务端和客户端都需要有套接字，分别是 <code>ServerSocket</code> 和 <code>Socket</code>，并且绑定到统一端口。服务端还有一个 <code>Socket</code>，是连接端口的返回结果。</li>
<li>注意输入流和输出流的使用，客户端使用 <strong>输出流</strong>，通过套接字输出；服务端使用 <strong>输入流</strong>，通过套接字输入，而这股输入流需要输出的话，还需要一个输出流。</li>
</ol>
<p>先启动 <code>MyReceiver.java</code>，再启动 <code>MyTransmitter.java</code>，观察到 <code>MyReceiver.java</code> 输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好！</span><br></pre></td></tr></table></figure>
<h3 id="2-2-较复杂的服务端、客户端程序"><a href="#2-2-较复杂的服务端、客户端程序" class="headerlink" title="2.2 较复杂的服务端、客户端程序"></a>2.2 较复杂的服务端、客户端程序</h3><p>服务端（<code>MyTCPServer.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket server;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyTCPServer</span> <span class="variable">tcp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTCPServer</span>();	<span class="comment">// 实例化服务端</span></span><br><span class="line">        tcp.getServer();	<span class="comment">// 服务端启动服务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getServer</span><span class="params">()</span> &#123;	<span class="comment">// 服务端启用服务方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8998</span>);	<span class="comment">// 实例化一个服务器套接字，端口8998</span></span><br><span class="line">            System.out.println(<span class="string">&quot;服务器套接字创建成功！&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;等待客户端连接...&quot;</span>);</span><br><span class="line">                socket = server.accept();	<span class="comment">// 使用套接字对象接收客户端连接该端口，连接后返回“插座”套接字</span></span><br><span class="line">                System.out.println(<span class="string">&quot;客户端连接成功！&quot;</span>);</span><br><span class="line">                reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));	<span class="comment">// 将“插座”套接字的输入流放到缓存读取器中</span></span><br><span class="line">                getClientMessage();	<span class="comment">// 获取客户端信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getClientMessage</span><span class="params">()</span> &#123;	<span class="comment">// 获取客户端信息方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端：&quot;</span> + reader.readLine());	<span class="comment">// 将缓存读取器的读取内容输出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server != <span class="literal">null</span>) &#123;</span><br><span class="line">                server.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端（<code>MyTCPClient.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.BevelBorder;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTCPClient</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    Container c;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">JTextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">JTextField</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    Socket socket;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter writer;	<span class="comment">// 这是一个字符输出流过滤器，可以对字符流进行处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyTCPClient</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title);	<span class="comment">// 标题</span></span><br><span class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        c = getContentPane();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">JScrollPane</span> <span class="variable">sp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>();	<span class="comment">// 滚动面板</span></span><br><span class="line">        sp.setBorder(<span class="keyword">new</span> <span class="title class_">BevelBorder</span>(BevelBorder.RAISED));	<span class="comment">// 设置滚动面板的边框为斜角边框，且为凸起斜面</span></span><br><span class="line">        c.add(sp, BorderLayout.CENTER);	<span class="comment">// 把滚动面板放到窗体中间</span></span><br><span class="line">        sp.setViewportView(ta);	<span class="comment">// 创建视口并设置视图为文本域（即把文本域放到滚动面板中）</span></span><br><span class="line">        ta.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">        ta.setEditable(<span class="literal">false</span>);	<span class="comment">// 文本域不可编辑</span></span><br><span class="line">        c.add(tf, BorderLayout.SOUTH);	<span class="comment">// 把文本框放到窗体底部</span></span><br><span class="line">        tf.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">        tf.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;	<span class="comment">// 监听文本框回车事件</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                writer.println(tf.getText());	<span class="comment">// 将文本框的信息写入流，这股流会通过端口传输到服务端</span></span><br><span class="line">                ta.append(tf.getText() + <span class="string">&#x27;\n&#x27;</span>);	<span class="comment">// 在文本域中，把文本框写入的文本加进去</span></span><br><span class="line">                ta.setSelectionEnd(ta.getText().length());	<span class="comment">// 把文本域选择的结束位置放到文本域文本末尾</span></span><br><span class="line">                tf.setText(<span class="string">&quot;&quot;</span>);	<span class="comment">// 清空文本框</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyTCPClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTCPClient</span>(<span class="string">&quot;客户端系统&quot;</span>);	<span class="comment">// 实例化客户端</span></span><br><span class="line">        client.setBounds(<span class="number">600</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        client.setVisible(<span class="literal">true</span>);</span><br><span class="line">        client.connect();	<span class="comment">// 客户端连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;	<span class="comment">// 客户端连接方法</span></span><br><span class="line">        ta.append(<span class="string">&quot;尝试连接中...\n&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8998</span>);	<span class="comment">// 使用IP和端口实例化“插头”套接字，并连接到“插座”</span></span><br><span class="line">            writer = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);	<span class="comment">// 将“插头”套接器的输出流放到过滤器中，true表示自动行刷新</span></span><br><span class="line">            ta.append(<span class="string">&quot;完成连接！\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            ta.append(<span class="string">&quot;连接失败！请检查服务器端\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>服务端将获取客户端的方法放在无限循环中，以便无限接收客户端的信息。</li>
<li>根据屏幕提示的信息，确定客户端是何时连接上服务端的。</li>
</ol>
<p>先启动 <code>MyTCPServer.java</code>，再启动 <code>MyTCPClient.java</code>，在窗体输入文字，观察到窗体变化与 <code>MyTCPServer.java</code> 输出：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/007.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器套接字创建成功！</span><br><span class="line">等待客户端连接...</span><br><span class="line">客户端连接成功！</span><br><span class="line">客户端：你好！</span><br><span class="line">客户端：我是客户端</span><br></pre></td></tr></table></figure>
<h3 id="2-3-简单的文件传输程序"><a href="#2-3-简单的文件传输程序" class="headerlink" title="2.3 简单的文件传输程序"></a>2.3 简单的文件传输程序</h3><p>服务端（<code>FileReceiver.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);	<span class="comment">// 端口9000</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();	<span class="comment">// 监听客户端连接</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();	<span class="comment">// 获得套接字输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;receive.png&quot;</span>);	<span class="comment">// 实例化文件输出流</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;	<span class="comment">// 读取套接字输入流</span></span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);	<span class="comment">// 写入到文件输出流</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">endBw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));	<span class="comment">// 获得套接字输出流，并放到缓存字符写入器中</span></span><br><span class="line">        endBw.write(<span class="string">&quot;接收完毕&quot;</span>);	<span class="comment">// 写入字符串到输出流</span></span><br><span class="line"></span><br><span class="line">        endBw.close();	<span class="comment">// 关闭流与套接字</span></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端（<code>FileSender.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileSender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9000</span>);	<span class="comment">// 连接端口</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();	<span class="comment">// 获得套接字输出流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;send.png&quot;</span>);	<span class="comment">// 实例化文件输入流</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;	<span class="comment">// 读取文件输入流</span></span><br><span class="line">            os.write(buffer, <span class="number">0</span>, len);	<span class="comment">// 写入到套接字输出流</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput();	<span class="comment">// 单向关闭客户端的套接字输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">endBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));	<span class="comment">// 获得套接字输入流，并放到缓存字符读取器中</span></span><br><span class="line">        System.out.println(endBr.readLine());	<span class="comment">// 打印读取器读取到的字符串</span></span><br><span class="line"></span><br><span class="line">        endBr.close();	<span class="comment">// 关闭流与套接字</span></span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>示例中涉及到的输入输出流分别有（以输入流为例）：<code>InputStream</code>（接收套接字流）、<code>FileInputStream</code>（用于文件与系统间的传输流）、<code>InputStreamReader</code>（管道）、<code>BufferedReader</code>（用于处理服务端的回传字符）。</li>
<li>注意客户端第 15 行的<code>socket.shutdownOutput();</code>，若不写这一行，即使客户端已写入完毕（并开始进行输入流的等待），服务端仍在继续读取（因为服务端第 13 行的 <code>is.read(buffer)</code>，读取的字节数已为 0，因此循环无法退出，处于读取 0 字节写入 0 字节的状态），因此要单向关闭客户端的套接字输出流，保证服务端结束读取。</li>
</ol>
<p>先启动 <code>FileReceiver.java</code>，再启动 <code>FileSender.java</code>，观察到文件 <code>receive.png</code> 生成，以及 <code>FileSender.java</code> 输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">接收完毕</span><br></pre></td></tr></table></figure>
<h2 id="3-UDP-网络程序示例"><a href="#3-UDP-网络程序示例" class="headerlink" title="3 UDP 网络程序示例"></a>3 UDP 网络程序示例</h2><h3 id="3-1-简单的发送器、接收器程序"><a href="#3-1-简单的发送器、接收器程序" class="headerlink" title="3.1 简单的发送器、接收器程序"></a>3.1 简单的发送器、接收器程序</h3><p>发送器（<code>MyUDPSender.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUDPSender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();	<span class="comment">// 创建数据报套接字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;你好！&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = msg.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localhost</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9090</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length, localhost, port);	<span class="comment">// 创建要发送的数据包，并绑定内容和发送地址</span></span><br><span class="line">        socket.send(packet);	<span class="comment">// 发送数据包</span></span><br><span class="line">        socket.close();	<span class="comment">// 关闭套接字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接收器（<code>MyUDPReceiver.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUDPReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9090</span>);	<span class="comment">// 创建数据报套接字，绑定到9090端口</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];	<span class="comment">// 创建缓存数组</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length);	<span class="comment">// 创建要接收的数据包载体</span></span><br><span class="line">        socket.receive(packet);	<span class="comment">// 接收数据包（程序阻塞）</span></span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());	<span class="comment">// 获取数据包的地址</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength()));	<span class="comment">// 获取数据包的数据</span></span><br><span class="line">        socket.close();	<span class="comment">// 关闭套接字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>发送器和接收器都有数据报套接字 <code>DatagramSocket</code> 和数据包 <code>DatagramPacket</code>，但使用方式不同。<ul>
<li>发送器的 <code>DatagramSocket</code> 不用绑定端口，因为它只用 <code>send()</code> 方法，无需绑定发送者的端口；接收器的 <code>DatagramSocket</code> 需要绑定端口，因为它用 <code>receive()</code> 方法需要明确自己的地址。</li>
<li>发送器的 <code>DatagramPacket</code> 需要绑定发送地址，因为它已有内容并打包好，需要向特定地址传递；接收器的 <code>DatagramPacket</code> 不用绑定地址，因为它是一个空的容器，只起接收载体作用。</li>
</ul>
</li>
<li>接收器第 10 行，<code>packet.getLength()</code> 不能用 <code>packet.getData().length</code> 代替，数据包大小与数据字节数组的大小是不同的。</li>
</ol>
<p>先启动 <code>MyUDPReceiver.java</code>，观察到程序开始等待，再启动 <code>MyUDPSender.java</code>，观察到 <code>MyUDPReceiver.java</code> 输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1</span><br><span class="line">你好！</span><br></pre></td></tr></table></figure>
<h3 id="3-2-较复杂的聊天器程序（多线程）"><a href="#3-2-较复杂的聊天器程序（多线程）" class="headerlink" title="3.2 较复杂的聊天器程序（多线程）"></a>3.2 较复杂的聊天器程序（多线程）</h3><p>聊天发送端线程（<code>MyChatSender.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyChatSender</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;	<span class="comment">// 数据报套接字</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;	<span class="comment">// 缓存输入流</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String toIP;	<span class="comment">// 发送的IP地址（理解为“写信时的对方地址”）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> toPort;	<span class="comment">// 发送的端口（理解为“写信时的对方门牌号”）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyChatSender</span><span class="params">(String toIP, <span class="type">int</span> toPort)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.toIP = toIP;</span><br><span class="line">        <span class="built_in">this</span>.toPort = toPort;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();	<span class="comment">// 创建发送端的套接字</span></span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));	<span class="comment">// 缓存输入流放入系统输入</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> reader.readLine();	<span class="comment">// 读取输入流的一行字符串</span></span><br><span class="line">                <span class="type">byte</span>[] dataBytes = data.getBytes();	<span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(dataBytes, <span class="number">0</span>, dataBytes.length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(toIP, toPort));	<span class="comment">// 将字节数组打包，并绑定到对应IP和端口</span></span><br><span class="line">                socket.send(packet);	<span class="comment">// 发送数据包</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(data)) &#123;	<span class="comment">// 如果输入&quot;bye&quot;，退出发送循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader.close();	<span class="comment">// 关闭流</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();	<span class="comment">// 关闭套接字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>聊天接收端线程（<code>MyChatReceiver.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyChatReceiver</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;	<span class="comment">// 数据报套接字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fromName;	<span class="comment">// 来源的名字（理解为“写信时的寄件人姓名”）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyChatReceiver</span><span class="params">(<span class="type">int</span> port, String fromName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fromName = fromName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);	<span class="comment">// 创建接收端的套接字，并绑定到一个接收端口</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] container = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];	<span class="comment">// 字节数组容器</span></span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(container, <span class="number">0</span>, container.length);	<span class="comment">// 创建数据包容器</span></span><br><span class="line">                socket.receive(packet);	<span class="comment">// 阻塞式接收数据包</span></span><br><span class="line">                <span class="type">byte</span>[] dataBytes = packet.getData();	<span class="comment">// 把数据包的缓存数据放到字节数组里</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dataBytes, <span class="number">0</span>, packet.getLength());	<span class="comment">// 将缓存数据转换为字符串</span></span><br><span class="line">                System.out.println(fromName + <span class="string">&quot;：&quot;</span> + data);	<span class="comment">// 输出</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(data)) &#123;<span class="comment">// 如果收到&quot;bye&quot;，退出接收循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();	<span class="comment">// 关闭套接字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>聊天者 A（<code>ChatterA.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatterA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyChatSender</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>)).start();	<span class="comment">// 启动A的发送端线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyChatReceiver</span>(<span class="number">8888</span>, <span class="string">&quot;B&quot;</span>)).start();	<span class="comment">// 启动A的接收端线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>聊天者 B（<code>ChatterB.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatterB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyChatSender</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>)).start();	<span class="comment">// 启动B的发送端线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyChatReceiver</span>(<span class="number">9999</span>, <span class="string">&quot;A&quot;</span>)).start();	<span class="comment">// 启动B的接收端线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：每个聊天者有两个线程，以及两个所需端口。A 向 <code>localhost</code> 的 9999 端口发信息，同时接收发送到 8888 端口名为 B 发来的信息；B 向 <code>localhost</code> 的 8888 端口发信息，同时接收发送到 9999 端口名为 A 发来的信息。</p>
<p>分别启动 <code>ChatterA.java</code> 和 <code>ChatterB.java</code>，并输入文字，观察到两个程序分别输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好！</span><br><span class="line">B：你好啊！</span><br><span class="line">今天天气真不错。</span><br><span class="line">B：是啊，今天天气晴朗。</span><br><span class="line">bye</span><br><span class="line">B：bye</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A：你好！</span><br><span class="line">你好啊！</span><br><span class="line">A：今天天气真不错。</span><br><span class="line">是啊，今天天气晴朗。</span><br><span class="line">A：bye</span><br><span class="line">bye</span><br></pre></td></tr></table></figure>
<h3 id="3-3-较复杂的广播、收音机程序"><a href="#3-3-较复杂的广播、收音机程序" class="headerlink" title="3.3 较复杂的广播、收音机程序"></a>3.3 较复杂的广播、收音机程序</h3><p>广播（<code>MyBroadcast.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBroadcast</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;	<span class="comment">// 实现线程</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;欢迎收听广播节目。&quot;</span>;	<span class="comment">// 广播信息</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9898</span>;	<span class="comment">// 端口9898</span></span><br><span class="line">    InetAddress ipGroup;	<span class="comment">//IP组</span></span><br><span class="line">    MulticastSocket socket;	<span class="comment">// 多点广播套接字</span></span><br><span class="line"></span><br><span class="line">    MyBroadcast() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ipGroup = InetAddress.getByName(<span class="string">&quot;224.255.10.0&quot;</span>);	<span class="comment">// 指定地址</span></span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(port);	<span class="comment">// 创建一个指定端口的套接字</span></span><br><span class="line">        socket.setTimeToLive(<span class="number">1</span>);	<span class="comment">// 指定发送范围是本地网络</span></span><br><span class="line">        socket.joinGroup(ipGroup);	<span class="comment">// 加入广播组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] data = msg.getBytes();	<span class="comment">// 字节数组</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, ipGroup, port);	<span class="comment">//数据打包并绑定地址端口</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));	<span class="comment">// 输出广播信息</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.send(packet);	<span class="comment">// 发送数据包</span></span><br><span class="line">                sleep(<span class="number">3000</span>);	<span class="comment">// 休眠3秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyBroadcast</span> <span class="variable">broadcast</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBroadcast</span>();	<span class="comment">// 创建广播</span></span><br><span class="line">        broadcast.start();	<span class="comment">// 启动广播</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>收音机（<code>MyRadio.java</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRadio</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>, ActionListener &#123;</span><br><span class="line">    <span class="type">int</span> port;	<span class="comment">// 端口</span></span><br><span class="line">    InetAddress ipGroup;	<span class="comment">// IP组</span></span><br><span class="line">    MulticastSocket socket;	<span class="comment">// 多点广播套接字</span></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;开始接收&quot;</span>);	<span class="comment">// 开始按钮</span></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;停止接收&quot;</span>);	<span class="comment">// 停止按钮</span></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">startArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">10</span>, <span class="number">10</span>);	<span class="comment">// 广播信息区域（显示目前接收到的一条信息）</span></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">receivedArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">10</span>, <span class="number">10</span>);	<span class="comment">// 接收信息区域（显示历史接收到的所有信息）</span></span><br><span class="line">    Thread thread;	<span class="comment">// 线程</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isStopped</span> <span class="operator">=</span> <span class="literal">false</span>;	<span class="comment">// 是否停止</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyRadio</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;数据报收音机&quot;</span>);	<span class="comment">// 标题</span></span><br><span class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>);	<span class="comment">// 代理自己</span></span><br><span class="line">        start.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        stop.addActionListener(<span class="built_in">this</span>);	<span class="comment">// 按钮添加监听器</span></span><br><span class="line">        startArea.setForeground(Color.BLUE);</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();	<span class="comment">// 顶部面板</span></span><br><span class="line">        north.add(start);</span><br><span class="line">        north.add(stop);</span><br><span class="line">        add(north, BorderLayout.NORTH);</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>, <span class="number">2</span>));	<span class="comment">// 中部面板</span></span><br><span class="line">        center.add(startArea);</span><br><span class="line">        center.add(receivedArea);</span><br><span class="line">        add(center, BorderLayout.CENTER);</span><br><span class="line">        validate();	<span class="comment">// 刷新布局</span></span><br><span class="line"></span><br><span class="line">        port = <span class="number">9898</span>;	<span class="comment">// 端口9898</span></span><br><span class="line">        ipGroup = InetAddress.getByName(<span class="string">&quot;224.255.10.0&quot;</span>);	<span class="comment">// IP组指定地址</span></span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(port);	<span class="comment">// 套接字绑定端口</span></span><br><span class="line">        socket.joinGroup(ipGroup);	<span class="comment">// 套接字加入广播组</span></span><br><span class="line"></span><br><span class="line">        setBounds(<span class="number">100</span>, <span class="number">50</span>, <span class="number">360</span>, <span class="number">380</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];	<span class="comment">// 字节数组</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, ipGroup, port);	<span class="comment">// 数据包容器</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.receive(packet);	<span class="comment">// 接收数据包</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());	<span class="comment">// 缓存数据转换为字符串</span></span><br><span class="line">                startArea.setText(<span class="string">&quot;正在接收的内容：\n&quot;</span> + msg);	<span class="comment">// 打印在广播区域上</span></span><br><span class="line">                receivedArea.append(msg + <span class="string">&quot;\n&quot;</span>);	<span class="comment">// 添加在接收区域上</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isStopped) &#123;	<span class="comment">// 如果停止接收，退出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;	<span class="comment">// 监听</span></span><br><span class="line">        <span class="keyword">if</span> (e.getSource() == start) &#123;</span><br><span class="line">            start.setBackground(Color.RED);</span><br><span class="line">            stop.setBackground(Color.YELLOW);</span><br><span class="line">            <span class="keyword">if</span> (!(thread.isAlive())) &#123;	<span class="comment">// 如果线程不处于新建状态</span></span><br><span class="line">                thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>);	<span class="comment">// 新建线程</span></span><br><span class="line">            &#125;</span><br><span class="line">            thread.start();	<span class="comment">// 启动线程</span></span><br><span class="line">            isStopped = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.getSource() == stop) &#123;</span><br><span class="line">            start.setBackground(Color.YELLOW);</span><br><span class="line">            stop.setBackground(Color.RED);</span><br><span class="line">            isStopped = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyRadio</span> <span class="variable">radio</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRadio</span>();	<span class="comment">// 创建广播</span></span><br><span class="line">        radio.setSize(<span class="number">460</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>发出广播和接收广播的地址必须位于同一个组内，地址范围是 224.0.0.0~224.255.255.255，该地址不代表某个特定主机的位置。</li>
<li>加入同一个组的主机可以在某个端口广播信息，也可以在某个端口接收信息。</li>
</ol>
<p>启动 <code>MyBroadcast.java</code>，观察到其开始输出；启动 <code>MyRadio.java</code> 并点击开始接收按钮，观察到其开始接收广播信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">欢迎收听广播节目。</span><br><span class="line">欢迎收听广播节目。</span><br><span class="line">欢迎收听广播节目。</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/java/008.png" alt=""></p>
<h2 id="4-利用-URL-下载网络资源示例"><a href="#4-利用-URL-下载网络资源示例" class="headerlink" title="4 利用 URL 下载网络资源示例"></a>4 利用 URL 下载网络资源示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.net.ssl.HttpsURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>);	<span class="comment">// 新建URL，并初始化为网络资源地址</span></span><br><span class="line">        <span class="type">HttpsURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpsURLConnection) url.openConnection();	<span class="comment">// URL开启连接</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> connection.getInputStream();	<span class="comment">// 获取连接输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;logo.png&quot;</span>);	<span class="comment">// 新建文件输出流</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;	<span class="comment">// 读入连接输入流</span></span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);	<span class="comment">// 写入到文件输入流</span></span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();	<span class="comment">// 关闭流与连接</span></span><br><span class="line">        is.close();</span><br><span class="line">        connection.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>观察到文件 <code>logo.png</code> 的生成。</p>
<h2 id="5-I-O-补充"><a href="#5-I-O-补充" class="headerlink" title="5 I/O 补充"></a>5 I/O 补充</h2><p><strong>使用输入流、输出流时以下这段代码的原理：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxx&quot;</span>);	<span class="comment">// 文件输入流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStream</span>();	<span class="comment">// 输出流</span></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>buffer</code> 是一个字节数组，长度为 1024，类似于一个缓冲区。</li>
<li><code>fis.read(buffer)</code>，这一步从输入流读取 <code>buffer</code> 大小的字节（即 1024），把这些字节赋给 <code>buffer</code>，并返回读取的字节数。</li>
<li>把读取的字节数赋值给 <code>len</code>，然后对 <code>len</code> 进行判断。</li>
<li>把 <code>buffer</code> 数组的 0 到 <code>len</code> 位置的字节写入输出流。</li>
<li>每次循环，<code>buffer</code> 就被重新赋值一次，因此文件大小与 <code>buffer</code> 的长度 1024 是没有关系的。</li>
<li>读取到输入流末尾时，<code>read()</code> 方法返回 -1，循环结束。</li>
<li>注意：缓冲区的大小不应太小，否则会涉及到编码问题，部分字节被强行拆分到两个缓冲区时可能会出现乱码。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
        <tag>网络通信</tag>
        <tag>网络编程</tag>
        <tag>TCP</tag>
        <tag>IP</tag>
        <tag>UDP</tag>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 基本语法与示例</title>
    <url>/2021/08/04/markdown-basic-syntax-and-examples/</url>
    <content><![CDATA[<p>Markdown 是一种纯文本格式标记语言，它通过简单的标记语法实现了格式排版，且易学、易读、易写，因此非常流行。本文及本博客的文章均使用 Markdown 语法书写。</p>
<span id="more"></span>
<h2 id="0-简单介绍"><a href="#0-简单介绍" class="headerlink" title="0 简单介绍"></a>0 简单介绍</h2><p><strong>优点：</strong></p>
<ol>
<li>纯文本，编辑效果一致，可以无视排版，专心写作。</li>
<li>操作简单，例如新增标题只需要在标题内容前加 <code>#</code> 即可。</li>
<li>与 HTML 高度契合，可以直接使用原生 HTML 标签。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>需要记一些语法，但非常简单。</li>
<li>有些平台不支持 Markdown 编辑模式。</li>
<li>对于富文本支持不好，例如无法设置不同大小的文字（但可通过 CSS 样式修改）。</li>
</ol>
<p><strong>常用编辑器：</strong></p>
<ul>
<li>Typora（Windows &amp; MacOS，大力推荐，与其他编辑器不同的是编辑效果即排版效果，无需左右分栏对照）</li>
<li>VS Code（Windows &amp; MacOS，可以结合相关插件实现更好的编辑和展示效果）</li>
<li>Simplenote（iOS，免费，支持中文、云端存储、iPad）</li>
<li><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1 标题"></a>1 标题</h2></li>
</ul>
<p>标题文字前面加 <code>#</code> 即可，注意 <code>#</code> 与文字之间要有空格。几级标题加几个 <code>#</code>，共有六级标题。例如本段落标题的源码为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 1、标题</span></span><br></pre></td></tr></table></figure>
<h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2 字体"></a>2 字体</h2><h3 id="2-1-粗体"><a href="#2-1-粗体" class="headerlink" title="2.1 粗体"></a>2.1 粗体</h3><p>使用 <code>**</code> 或 <code>__</code> 包在文字两端。例如：<code>**粗体**</code> 效果为 <strong>粗体</strong>。</p>
<h3 id="2-2-斜体"><a href="#2-2-斜体" class="headerlink" title="2.2 斜体"></a>2.2 斜体</h3><p>使用 <code>*</code> 或 <code>_</code> 包在文字两端。例如：<code>*斜体*</code> 效果为 <em>斜体</em>。</p>
<p>当然，粗体斜体可以嵌套使用，例如：<code>***粗体+斜体***</code> 效果为 <strong><em>粗体+斜体</em></strong>。</p>
<h3 id="2-3-高亮"><a href="#2-3-高亮" class="headerlink" title="2.3 高亮"></a>2.3 高亮</h3><p><del>使用 <code>==</code> 包在文字两端。例如：<code>==高亮==</code> 效果为 ==高亮==。</del></p>
<p>Typora 需要设置开启高亮。并且如你所见，核心舱不支持高亮。</p>
<p>但我们可以使用 HTML 的 <code>mark</code> 标签来实现高亮。例如：<code>&lt;mark&gt;高亮&lt;/mark&gt;</code> 效果为 <mark>高亮</mark>。</p>
<h3 id="2-4-删除线"><a href="#2-4-删除线" class="headerlink" title="2.4 删除线"></a>2.4 删除线</h3><p>使用 <code>~~</code> 包在文字两端。例如：<code>~~删除线~~</code> 效果为 <del>删除线</del>。</p>
<h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3 引用"></a>3 引用</h2><p>引用文字前面加 <code>&gt;</code> 即可。引用可以嵌套，使用 <code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code>……以此类推。</p>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 一级引用</span></span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class="line"><span class="quote">&gt; &gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; 回退到三级引用</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 回退到一级引用</span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<blockquote>
<blockquote>
<p>五级引用</p>
</blockquote>
</blockquote>
<p>回退到三级引用</p>
</blockquote>
</blockquote>
<p>回退到一级引用</p>
</blockquote>
<h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4 分割线"></a>4 分割线</h2><p>三个或三个以上的 <code>-</code> 或 <code>*</code>（Typora 还支持 <code>+</code>）。</p>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">---</span></span><br><span class="line">-----</span><br><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<hr>
<hr>
<hr>
<hr>
<p>（一毛一样）</p>
<h2 id="5-HTML"><a href="#5-HTML" class="headerlink" title="5 HTML"></a>5 HTML</h2><p>直接输入就行，会自动渲染。例如：<code>&lt;b&gt;HTML 加粗&lt;/b&gt;</code> 效果为 <b>HTML 加粗</b>。再例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>HTML 内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<font face="黑体" size="5" color="red">HTML 内容</font>

<p>甚至可以来段更复杂的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密　码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">性　别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span>男<span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Submit&quot;</span> <span class="attr">Onclick</span>=<span class="string">&quot;alert(&#x27;成功&#x27;)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<form>
用户名: <input type="text" name="user"><br>
密　码: <input type="password" name="pwd"><br>
性　别: <input type="radio" name="sex" value="男" checked>男&nbsp;
    <input type="radio" name="sex" value="女">女<br>
<button type="button" name="Submit" Onclick="alert('成功')">提交</button>
<button type="reset" name="Reset">重置</button>
</form>

<p>（点一下试试）</p>
<h2 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6 超链接"></a>6 超链接</h2><p>使用 <code>[name](link &quot;tooltip&quot;)</code> 表示超链接，其中 <code>name</code> 是超链接文字，<code>link</code> 是超链接地址，<code>tooltip</code> 是悬浮文字提示（可选）。</p>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">卡洛的核心舱</span>](<span class="link">https://corecabin.cn &quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>效果为</p>
<p><a href="https://corecabin.cn" title="你好">卡洛的核心舱</a></p>
<p>还可以用 HTML 的 <code>a</code> 标签，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corecabin.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>卡洛的核心舱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<p><a href="https://corecabin.cn" target="_blank">卡洛的核心舱</a></p>
<p>其中 <code>target=&quot;_blank&quot;</code> 表示在新标签打开。</p>
<p>当遇到纯链接时，可以用 <code>&lt;</code> 和 <code>&gt;</code> 将其包起来，防止后面的文字被解析，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://corecabin.cn/&gt;</span>这是包起来的效果</span><br><span class="line">https://corecabin.cn/这是不包起来的效果</span><br></pre></td></tr></table></figure>
<p><a href="https://corecabin.cn/">https://corecabin.cn/</a>这是包起来的效果<br><a href="https://corecabin.cn/这是不包起来的效果">https://corecabin.cn/这是不包起来的效果</a></p>
<h2 id="7-图片"><a href="#7-图片" class="headerlink" title="7 图片"></a>7 图片</h2><p>使用 <code>![text](link &quot;tooltip&quot;)</code> 表示图片，其中 <code>text</code> 是显示在图片下方的说明，<code>link</code> 是图片路径，可以用相对路径、绝对路径、互联网路径，<code>tooltip</code> 是悬浮文字提示（可选）。</p>
<p>例如（互联网路径）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">中国空间站</span>](<span class="link">https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/kongjianzhan.jpg &quot;天和核心舱&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>效果为</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/kongjianzhan.jpg" alt="中国空间站" title="天和核心舱"></p>
<p>以及套娃设置图片的超链接，例如（相对路径）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">![卡洛的核心舱</span>](<span class="link">/img/corecabin-textlogo-bgcolor.jpg</span>)](<span class="link">https://corecabin.cn</span>)</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p><a href="https://corecabin.cn"><img src="/img/corecabin-textlogo-bgcolor.jpg" alt="卡洛的核心舱"></a></p>
<p>注意以上情况在当前主题下可能会遇到图片文字说明的显示 bug。</p>
<h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8 列表"></a>8 列表</h2><h3 id="8-1-无序列表"><a href="#8-1-无序列表" class="headerlink" title="8.1 无序列表"></a>8.1 无序列表</h3><p>文字前面加 <code>-</code> 或 <code>*</code> 或 <code>+</code> 即可，注意符号与文字之间要有空格。</p>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表 1</span><br><span class="line"><span class="bullet">*</span> 无序列表 2</span><br><span class="line"><span class="bullet">+</span> 无序列表 3</span><br></pre></td></tr></table></figure>
<p>效果为</p>
<ul>
<li>无序列表 1</li>
</ul>
<ul>
<li>无序列表 2</li>
</ul>
<ul>
<li>无序列表 3</li>
</ul>
<h3 id="8-2-有序列表"><a href="#8-2-有序列表" class="headerlink" title="8.2 有序列表"></a>8.2 有序列表</h3><p>文字前面加数字与 <code>.</code> 即可，注意符号与文字之间要有空格。注意显示效果与实际输入数字无关，而与当前次序有关。</p>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一点</span><br><span class="line"><span class="bullet">2.</span> 第二点</span><br><span class="line"><span class="bullet">4.</span> 大概是第四点？</span><br></pre></td></tr></table></figure>
<p>效果为</p>
<ol>
<li>第一点</li>
<li>第二点</li>
<li>大概是第四点？</li>
</ol>
<h3 id="8-3-列表嵌套"><a href="#8-3-列表嵌套" class="headerlink" title="8.3 列表嵌套"></a>8.3 列表嵌套</h3><p>不同级列表之间通过缩进即可嵌套，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 一级无序</span><br><span class="line"><span class="bullet">	+</span> 二级无序 1</span><br><span class="line"><span class="bullet">	+</span> 二级无序 2</span><br><span class="line"><span class="bullet">1.</span> 一级有序</span><br><span class="line"><span class="bullet">	1.</span> 二级有序</span><br><span class="line"><span class="bullet">		+</span> 三级无序</span><br></pre></td></tr></table></figure>
<p>效果为</p>
<ul>
<li>一级无序<ul>
<li>二级无序 1</li>
<li>二级无序 2</li>
</ul>
</li>
</ul>
<ol>
<li>一级有序<ol>
<li>二级有序<ul>
<li>三级无序</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="9-代码"><a href="#9-代码" class="headerlink" title="9 代码"></a>9 代码</h2><h3 id="9-1-行内代码"><a href="#9-1-行内代码" class="headerlink" title="9.1 行内代码"></a>9.1 行内代码</h3><p>使用 <code>`</code> 包在代码两端。例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`javascript`</span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<p><code>javascript</code></p>
<p>本文也大量用到行内代码引用文字。</p>
<h3 id="9-2-代码块"><a href="#9-2-代码块" class="headerlink" title="9.2 代码块"></a>9.2 代码块</h3><p>使用 3 个 <code>`</code> 包在代码两端，第一行可以加入代码语言，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function fact(num) &#123;</span></span><br><span class="line"><span class="code">  if (num === 1) &#123;</span></span><br><span class="line"><span class="code">    return 1;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  else &#123;</span></span><br><span class="line"><span class="code">    return num * fact(num - 1);</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fact</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="title function_">fact</span>(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本文也大量用到代码块表示 Markdown 示例。</p>
<p>需要在代码块中使用代码块时，外层代码块可以使用 4 个 <code>`</code>。</p>
<h2 id="10-数学公式"><a href="#10-数学公式" class="headerlink" title="10 数学公式"></a>10 数学公式</h2><p>Markdown 支持 LaTeX 公式。行内公式用 <code>$</code> 包在公式两端（Typora 需要设置开启），公式块用 <code>$$</code> 包在公式两端，例如：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">当 <span class="built_in">$</span>a <span class="keyword">\ne</span> 0<span class="built_in">$</span>，此方程式有两个解 <span class="built_in">$</span>ax<span class="built_in">^</span>2 + bx + c = 0<span class="built_in">$</span>，他们是</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">x = &#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2-4ac&#125; <span class="keyword">\over</span> 2a&#125;.</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果为</p>
<p>当 $a \ne 0$，此方程式有两个解 $ax^2 + bx + c = 0$，他们是</p>
<script type="math/tex; mode=display">
x = {-b \pm \sqrt{b^2-4ac} \over 2a}.</script><p>更多公式相关见《<a href="/2021/08/11/latex-mathematical-formula-handbook/" title="LaTeX 数学公式手册">LaTeX 数学公式手册</a>》。</p>
<h2 id="11-任务列表（Todo-List）"><a href="#11-任务列表（Todo-List）" class="headerlink" title="11 任务列表（Todo List）"></a>11 任务列表（Todo List）</h2><p>文字前面加 <code>- [ ]</code> 或 <code>- [x]</code> 即可，空格表示未完成，<code>x</code> 表示已完成。</p>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 甜甜圈</span><br><span class="line"><span class="bullet">-</span> [x] 珍珠奶茶</span><br><span class="line"><span class="bullet">-</span> [ ] 方便面</span><br><span class="line"><span class="bullet">-</span> [x] 火锅</span><br><span class="line"><span class="bullet">-</span> [ ] 米饭</span><br><span class="line"><span class="bullet">-</span> [ ] 大盘鸡</span><br></pre></td></tr></table></figure>
<p>效果为</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked></input> 甜甜圈</li>
<li style="list-style: none"><input type="checkbox" checked></input> 珍珠奶茶</li>
<li style="list-style: none"><input type="checkbox"></input> 方便面</li>
<li style="list-style: none"><input type="checkbox" checked></input> 火锅</li>
<li style="list-style: none"><input type="checkbox"></input> 米饭</li>
<li style="list-style: none"><input type="checkbox"></input> 大盘鸡</li>
</ul>
<h2 id="12-表格"><a href="#12-表格" class="headerlink" title="12 表格"></a>12 表格</h2><p>语法为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|---|---</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure>
<p>第二行用来分割表头与内容。<code>-</code> 的个数有一个就行，此处多加了几个。</p>
<p>文字默认居左。<code>-</code> 的两边加 <code>:</code> 表示该列居中，<code>-</code> 的右边加 <code>:</code> 表示该列居右。</p>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">姓名（居左）|年级（居中）|年龄（居右）</span><br><span class="line">-----|:-----:|-----:</span><br><span class="line">张三|大三|21</span><br><span class="line">李四|大一|18</span><br><span class="line">王五|研二|24</span><br></pre></td></tr></table></figure>
<p>效果为</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>姓名（居左）</th>
<th style="text-align:center">年级（居中）</th>
<th style="text-align:right">年龄（居右）</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td style="text-align:center">大三</td>
<td style="text-align:right">21</td>
</tr>
<tr>
<td>李四</td>
<td style="text-align:center">大一</td>
<td style="text-align:right">18</td>
</tr>
<tr>
<td>王五</td>
<td style="text-align:center">研二</td>
<td style="text-align:right">24</td>
</tr>
</tbody>
</table>
</div>
<h2 id="13-转义字符"><a href="#13-转义字符" class="headerlink" title="13 转义字符"></a>13 转义字符</h2><p>在输入特殊符号，尤其是 Markdown 和 HTML 中的部分符号时，可以使用转义字符。</p>
<h3 id="13-1-Markdown-转义字符"><a href="#13-1-Markdown-转义字符" class="headerlink" title="13.1 Markdown 转义字符"></a>13.1 Markdown 转义字符</h3><p>使用 <code>\</code> 置于符号前。</p>
<p>例如输入 <code>*你好*</code> 会显示 <em>你好</em>，输入 <code>\*你好\*</code> 效果为 *你好*。</p>
<p>具体如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">转义字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">反斜杠</td>
<td style="text-align:center"><code>\\</code></td>
</tr>
<tr>
<td style="text-align:center"><span>`</span></td>
<td style="text-align:center">反引号</td>
<td style="text-align:center"><code>\`</code></td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">星号</td>
<td style="text-align:center"><code>\*</code></td>
</tr>
<tr>
<td style="text-align:center">_</td>
<td style="text-align:center">下划线</td>
<td style="text-align:center"><code>\_</code></td>
</tr>
<tr>
<td style="text-align:center">{}</td>
<td style="text-align:center">花括号</td>
<td style="text-align:center"><code>\&#123;\&#125;</code></td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:center">方括号</td>
<td style="text-align:center"><code>\[\]</code></td>
</tr>
<tr>
<td style="text-align:center">()</td>
<td style="text-align:center">小括号</td>
<td style="text-align:center"><code>\(\)</code></td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">井号</td>
<td style="text-align:center"><code>\#</code></td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加号</td>
<td style="text-align:center"><code>\+</code></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减号</td>
<td style="text-align:center"><code>\-</code></td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">英文句点</td>
<td style="text-align:center"><code>\.</code></td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">英文感叹号</td>
<td style="text-align:center"><code>\!</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="13-2-HTML-转义字符"><a href="#13-2-HTML-转义字符" class="headerlink" title="13.2 HTML 转义字符"></a>13.2 HTML 转义字符</h3><p>直接输入 HTML 转义字符，具体如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">显示结果</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">输入</th>
<th style="text-align:center">实体编号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">空格</td>
<td style="text-align:center"><code>&amp;nbsp;</code></td>
<td style="text-align:center"><code>&amp;#160;</code></td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于号</td>
<td style="text-align:center"><code>&amp;lt;</code></td>
<td style="text-align:center"><code>&amp;#60;</code></td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于号</td>
<td style="text-align:center"><code>&amp;gt;</code></td>
<td style="text-align:center"><code>&amp;#62;</code></td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">和号</td>
<td style="text-align:center"><code>&amp;amp;</code></td>
<td style="text-align:center"><code>&amp;#38;</code></td>
</tr>
<tr>
<td style="text-align:center">“</td>
<td style="text-align:center">引号</td>
<td style="text-align:center"><code>&amp;quot;</code></td>
<td style="text-align:center"><code>&amp;#34;</code></td>
</tr>
<tr>
<td style="text-align:center">‘</td>
<td style="text-align:center">撇号</td>
<td style="text-align:center"><code>&amp;apos;</code>(IE 不支持)</td>
<td style="text-align:center"><code>&amp;#39;</code></td>
</tr>
<tr>
<td style="text-align:center">￠</td>
<td style="text-align:center">分</td>
<td style="text-align:center"><code>&amp;cent;</code></td>
<td style="text-align:center"><code>&amp;#162;</code></td>
</tr>
<tr>
<td style="text-align:center">£</td>
<td style="text-align:center">镑</td>
<td style="text-align:center"><code>&amp;pound;</code></td>
<td style="text-align:center"><code>&amp;#163;</code></td>
</tr>
<tr>
<td style="text-align:center">¥</td>
<td style="text-align:center">日圆</td>
<td style="text-align:center"><code>&amp;yen;</code></td>
<td style="text-align:center"><code>&amp;#165;</code></td>
</tr>
<tr>
<td style="text-align:center">§</td>
<td style="text-align:center">节</td>
<td style="text-align:center"><code>&amp;sect;</code></td>
<td style="text-align:center"><code>&amp;#167;</code></td>
</tr>
<tr>
<td style="text-align:center">©</td>
<td style="text-align:center">版权</td>
<td style="text-align:center"><code>&amp;copy;</code></td>
<td style="text-align:center"><code>&amp;#169;</code></td>
</tr>
<tr>
<td style="text-align:center">®</td>
<td style="text-align:center">注册商标</td>
<td style="text-align:center"><code>&amp;reg;</code></td>
<td style="text-align:center"><code>&amp;#174;</code></td>
</tr>
<tr>
<td style="text-align:center">×</td>
<td style="text-align:center">乘号</td>
<td style="text-align:center"><code>&amp;times;</code></td>
<td style="text-align:center"><code>&amp;#215;</code></td>
</tr>
<tr>
<td style="text-align:center">÷</td>
<td style="text-align:center">除号</td>
<td style="text-align:center"><code>&amp;divide;</code></td>
<td style="text-align:center"><code>&amp;#247;</code></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>HTML</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>作为 B 站 up 主，我使用的技术栈</title>
    <url>/2025/03/03/my-bilibili-technology-stack/</url>
    <content><![CDATA[<p>从 2022 年 11 月我上传第 1 个视频开始，我成为 B 站 up 主已经有两年多的时间了。期间也拥有了两千粉丝，并收获了二十多万的播放量。</p>
<p>本文整理了我作为 B 站 up 主所使用的一些「技术栈」，也就是各种软件、网站、工具等，供大家参考学习。</p>
<span id="more"></span>
<h2 id="1-音频获取"><a href="#1-音频获取" class="headerlink" title="1 音频获取"></a>1 音频获取</h2><h3 id="1-1-QQ-音乐、网易云音乐"><a href="#1-1-QQ-音乐、网易云音乐" class="headerlink" title="1.1 QQ 音乐、网易云音乐"></a>1.1 <a href="https://y.qq.com">QQ 音乐</a>、<a href="https://music.163.com/">网易云音乐</a></h3><p>没想到吧，这俩是我用来下音乐资源最常用的软件，而不是其他音乐资源网。</p>
<p>因为我是绿钻+黑胶会员，所以我可以直接下载音乐文件。但是由于这两者下载的音乐文件是特定格式（QQ 音乐为 mgg 格式，网易云音乐为 ncm 格式），只支持会员期在本地播放，所以想要拿到能直接使用的音乐格式，还需要下一步的音乐解锁。</p>
<p>网易云音乐下载的音乐文件，会带上歌曲的专辑封面，这是比较好的一点。</p>
<h3 id="1-2-音乐解锁"><a href="#1-2-音乐解锁" class="headerlink" title="1.2 音乐解锁"></a>1.2 <a href="https://demo.unlock-music.dev/">音乐解锁</a></h3><p>网址为 <a href="https://demo.unlock-music.dev/">https://demo.unlock-music.dev/</a>。</p>
<p>该网站可用于解锁加密音乐文件，也就是 QQ 音乐、网易云音乐等软件下载下来的会员歌曲。</p>
<p>该网站的 <a href="https://github.com/unlock-music/unlock-music">GitHub 仓库</a> 已经被 ban 了，现在他们使用 <a href="https://git.unlock-music.dev/um">自建 Git</a> 来管理代码。</p>
<p>由于我现在使用 Macbook 作为日常生产力，所以我使用的是 <a href="https://um-react.netlify.app/">音乐解锁 React 版</a> 进行音乐解锁。其中，QQ 音乐的版本应降级到 8.8.0，并在网站上传密钥，跟着网站提示操作就可以了。</p>
<h2 id="2-音频处理"><a href="#2-音频处理" class="headerlink" title="2 音频处理"></a>2 音频处理</h2><h3 id="2-1-UVR5"><a href="#2-1-UVR5" class="headerlink" title="2.1 UVR5"></a>2.1 <a href="https://github.com/Anjok07/ultimatevocalremovergui">UVR5</a></h3><p>仓库为 <a href="https://github.com/Anjok07/ultimatevocalremovergui">https://github.com/Anjok07/ultimatevocalremovergui</a>。</p>
<p>UVR5 全称 Ultimate Vocal Remover，是一个用大模型提取伴奏的工具。</p>
<p><a href="/2025/01/18/my-2023-and-2024-annual-summary/#3-2-%E8%8B%8F%E6%89%93%E7%BB%BF%E4%BC%B4%E5%A5%8F" title="我的 2023 和 2024 年度总结">之前的文章</a> 提到过，我最开始在 B 站上传视频，就是发布苏打绿歌曲的伴奏。UVR5 就是我用来提取伴奏的工具。这个工具对音乐的处理极好，比网上或者 KTV 那种消音伴奏、单声道伴奏效果好多了。</p>
<p>UVR5 使用各种大模型来处理音乐，因此需要极大的空间（好像软件安装包就 1 个 G，更别说软件本体了）和超强的性能（支持 GPU 加速）。我当前使用的是 M4 Pro 芯片的 Macbook Pro，跑完一首歌大概只需要 10 秒钟，而我当时研究生期间，用办公室电脑的 CPU 跑时，一首歌需要 1-2 分钟，而且 CPU 占用率被拉到 100% 根本没法做别的事情。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20250303/20250303-UVR.png" alt="UVR5 页面" style="zoom:35%;" /></p>
<p>我目前使用的模型主要是两个。需要带和声的伴奏，我使用的模型是 <strong>VR Architecture</strong> 的 <strong>6_HP-Karaoke-UVR</strong> 模型。需要去除所有人声只留乐器的伴奏，我使用的模型是 <strong>MDX-Net</strong> 的 <strong>UVR-MDX-NET Inst Main</strong> 模型。</p>
<p>目前在我使用的过程中，UVR5 也存在一些缺点，如下：</p>
<ul>
<li>毕竟是从混音音轨提取，所以可能会有一些瑕疵，比如会带上喘息、气口，或是乐器不够突出等</li>
<li>对二胡等中国传统乐器的支持不太好，模型会认为是人声</li>
<li>对男女对唱或多人合唱的处理效果不太好，这种时候我会建议观众使用器乐伴奏</li>
<li>大模型的下载需要科学上网</li>
</ul>
<h3 id="2-2-Adobe-Audition"><a href="#2-2-Adobe-Audition" class="headerlink" title="2.2 Adobe Audition"></a>2.2 <a href="https://www.adobe.com/products/audition.html">Adobe Audition</a></h3><p>Audition（简称 AU）是 Adobe 家专业的音频处理软件。我从高中就开始使用 AU 剪辑音频，虽然到现在开始，我还只掌握了点皮毛。</p>
<p>我使用 AU 主要的场景是用于录制「<a href="/2025/01/18/my-2023-and-2024-annual-summary/#3-3-%E8%8B%8F%E6%89%93%E9%9F%B3%E8%B6%B4" title="我的 2023 和 2024 年度总结">苏打音趴</a>」节目，以及节目后的剪辑。主要涉及到我和另一位主持人的录音，需要相互剪辑为一个音轨，以及加上节目 BGM。其次，我有时候还会使用 AU 剪辑单个音乐文件。</p>
<p>我目前使用的 AU 也并不是破解版，而是浙大的正版。得益于我毕业前给我浙 VPN 充值数千块钱，我目前依然可以享受到在校生福利，足够我使用到 60 岁。<del>也许到我 60 那年发现自己充少了，因为还没退休</del></p>
<h2 id="3-图片获取"><a href="#3-图片获取" class="headerlink" title="3 图片获取"></a>3 图片获取</h2><h3 id="3-1-Facebook"><a href="#3-1-Facebook" class="headerlink" title="3.1 Facebook"></a>3.1 <a href="https://www.facebook.com/">Facebook</a></h3><p>Facebook 上主要用于获取苏打绿的一些动态图片。不从微博找主要是因为一是微博图片有水印，二是苏打绿微博开了半年可见，对于我这种需要经常考古的粉丝来说简直是灾难。</p>
<p>Facebook 的图片可以直接右键保存，没啥好说的。</p>
<h3 id="3-2-Instagram"><a href="#3-2-Instagram" class="headerlink" title="3.2 Instagram"></a>3.2 <a href="https://www.instagram.com/">Instagram</a></h3><h3 id="3-3-小红书"><a href="#3-3-小红书" class="headerlink" title="3.3 小红书"></a>3.3 <a href="https://www.xiaohongshu.com/">小红书</a></h3><h3 id="3-4-iSearch-4-5"><a href="#3-4-iSearch-4-5" class="headerlink" title="3.4 iSearch 4.5"></a>3.4 <a href="https://i.oppsu.cn/">iSearch 4.5</a></h3><p>网址为 <a href="https://i.oppsu.cn/">https://i.oppsu.cn/</a>。</p>
<h2 id="4-图片处理"><a href="#4-图片处理" class="headerlink" title="4 图片处理"></a>4 图片处理</h2><h3 id="4-1-美图秀秀"><a href="#4-1-美图秀秀" class="headerlink" title="4.1 美图秀秀"></a>4.1 <a href="https://www.meitu.com/">美图秀秀</a></h3><h2 id="5-视频获取"><a href="#5-视频获取" class="headerlink" title="5 视频获取"></a>5 视频获取</h2><h3 id="5-1-Youtube"><a href="#5-1-Youtube" class="headerlink" title="5.1 Youtube"></a>5.1 <a href="https://www.youtube.com/">Youtube</a></h3><h3 id="5-2-Bilibili"><a href="#5-2-Bilibili" class="headerlink" title="5.2 Bilibili"></a>5.2 <a href="https://www.bilibili.com/">Bilibili</a></h3><h2 id="6-视频处理"><a href="#6-视频处理" class="headerlink" title="6 视频处理"></a>6 视频处理</h2><h3 id="6-1-剪映专业版"><a href="#6-1-剪映专业版" class="headerlink" title="6.1 剪映专业版"></a>6.1 <a href="https://www.capcut.cn/">剪映专业版</a></h3>]]></content>
      <categories>
        <category>Bilibili</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>个人项目</tag>
        <tag>苏打绿</tag>
        <tag>Bilibili</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 数学公式手册</title>
    <url>/2021/08/11/latex-mathematical-formula-handbook/</url>
    <content><![CDATA[<p>LaTeX 是一种基于 TeX 的排版系统。由于其对复杂的数学公式排版效果很好，所以常用于大型论文排版和数学公式输入。本文及本博客的文章均使用 LaTeX 输入数学公式。</p>
<span id="more"></span>
<h2 id="0-简单介绍"><a href="#0-简单介绍" class="headerlink" title="0 简单介绍"></a>0 简单介绍</h2><p><strong>LaTeX</strong></p>
<p>标准写法为 $ L^AT_EX $，读音为「拉泰赫」。它是一种基于 TeX 的排版系统，对于生成复杂表格和数学公式表现尤为突出，适用于论文写作、数学科研类 PPT 制作等。</p>
<p><strong>MathJax</strong></p>
<p>它是一个 JavaScript 引擎，用来显示网络上的数学公式。本博客的公式使用 MathJax 引擎渲染。本质上，Typora 的公式也是用 MathJax 渲染的。</p>
<p><strong>本文的公式显示环境</strong></p>
<ul>
<li>Markdown</li>
<li>LaTeX</li>
<li>MathJax v3.0.0</li>
<li>hexo-renderer-kramed 渲染器</li>
</ul>
<p><strong>注意</strong></p>
<p>应特别注意 Markdown 渲染为 HTML 及其与 LaTeX 语法的冲突，这会影响文章效果。如应避免大括号重复出现，应加上空格。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#125;&#125; <span class="comment">% Bad</span></span><br><span class="line">&#125; &#125; <span class="comment">% Good</span></span><br></pre></td></tr></table></figure>
<h2 id="1-公式插入"><a href="#1-公式插入" class="headerlink" title="1 公式插入"></a>1 公式插入</h2><p>公式分为行内公式和公式块，前者嵌入行内，后者单独成行。</p>
<p>行内公式表示方法为：<code>$ 公式 $</code>，公式块表示方法为：<code>$$ 公式 $$</code>，公式中的空格会被忽略。公式块可通过 <code>\tag&#123;n&#125;</code> 进行手动编号。</p>
<p><strong>行内公式</strong>    </p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span> f(x) = a+b <span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>$ f(x) = a+b $</p>
<p><strong>公式块</strong></p>
<p>注意 Typora 中建议写成以下形式，否则仍会显示为行内公式：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">x+2 = 3*4</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
x+2 = 3*4</script><p>除强调区分行内公式与公式块外，下文的公式示例均省略 <code>$</code> 符号。</p>
<p><strong>手动编号</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">x+2 = 3*4 <span class="keyword">\tag</span>&#123;1.1&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
x+2 = 3*4 \tag{1.1}</script><h2 id="2-简单运算"><a href="#2-简单运算" class="headerlink" title="2 简单运算"></a>2 简单运算</h2><h3 id="2-1-四则运算与基本括号"><a href="#2-1-四则运算与基本括号" class="headerlink" title="2.1 四则运算与基本括号"></a>2.1 四则运算与基本括号</h3><p>拉丁字母、阿拉伯数字与 <code>+-*/=</code> 可以直接通过键盘输入。乘号可以用 <code>\times</code> 表示，除号可以用 <code>\div</code> 表示，点乘可以用 <code>\cdot</code> 表示。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">a + b - c*2 + d/e = 5 <span class="keyword">\times</span> 3 + 8 <span class="keyword">\div</span> 4 - f <span class="keyword">\cdot</span> g</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
a + b - c*2 + d/e = 5 \times 3 + 8 \div 4 - f \cdot g</script><p>小括号 <code>()</code>、方括号 <code>[]</code> 表示其本身，花括号 <code>&#123;&#125;</code> 需要 <code>\</code> 转义表示。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">(1+2) <span class="keyword">\quad</span> [1+2] <span class="keyword">\quad</span> <span class="keyword">\&#123;</span>1+2<span class="keyword">\&#125;</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
(1+2) \quad [1+2] \quad \{1+2\}</script><p>由于 LaTeX 会忽略空格，因此用 <code>\quad</code> 表示空格，见上例。</p>
<h3 id="2-2-基本上下标"><a href="#2-2-基本上下标" class="headerlink" title="2.2 基本上下标"></a>2.2 基本上下标</h3><p>用 <code>_</code> 表示下标，用 <code>^</code> 表示上标，并只处理一个字符，多个字符用 <code>&#123;&#125;</code> 括起来。<code>&#39;</code> 表示求导，可使用多个。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">x<span class="built_in">_</span>1 + x<span class="built_in">_</span>&#123;1,2&#125;<span class="built_in">^</span>2 = y<span class="built_in">_</span>0 + y&#x27; + y&#x27;&#x27;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
x_1 + x_{1,2}^2 = y_0 + y' + y''</script><h3 id="2-3-基本分式、根式"><a href="#2-3-基本分式、根式" class="headerlink" title="2.3 基本分式、根式"></a>2.3 基本分式、根式</h3><p>用 <code>\frac&#123;a&#125;&#123;b&#125;</code> 表示分式，用 <code>\sqrt</code> 表示平方根，用 <code>\sqrt[n]</code> 表示 n 次方根。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\frac</span>&#123;x&#125;&#123;2&#125; + <span class="keyword">\sqrt</span> x = <span class="keyword">\sqrt</span>[3] &#123;x<span class="built_in">^</span>2+y<span class="built_in">^</span>2&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\frac{x}{2} + \sqrt x = \sqrt[3] {x^2+y^2}</script><h2 id="3-符号、函数、特殊字符"><a href="#3-符号、函数、特殊字符" class="headerlink" title="3 符号、函数、特殊字符"></a>3 符号、函数、特殊字符</h2><p>本章为符号、函数、特殊字符的输入方法，若关注语法可以直接跳过本章。</p>
<h3 id="3-1-声调-变音-标记符号"><a href="#3-1-声调-变音-标记符号" class="headerlink" title="3.1 声调/变音/标记符号"></a>3.1 声调/变音/标记符号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\dot</span>&#123;a&#125;, <span class="keyword">\ddot</span>&#123;a&#125;, <span class="keyword">\dddot</span>&#123;a&#125;, <span class="keyword">\acute</span>&#123;a&#125;, <span class="keyword">\grave</span>&#123;a&#125;</span><br></pre></td></tr></table></figure>
<p>$ \dot{a}, \ddot{a}, \dddot{a}, \acute{a}, \grave{a} $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\check</span>&#123;a&#125;, <span class="keyword">\breve</span>&#123;a&#125;, <span class="keyword">\tilde</span>&#123;a&#125;, <span class="keyword">\widetilde</span>&#123;a&#125;, <span class="keyword">\bar</span>&#123;a&#125;, <span class="keyword">\mathring</span>&#123;a&#125;</span><br></pre></td></tr></table></figure>
<p>$ \check{a}, \breve{a}, \tilde{a}, \widetilde{a}, \bar{a}, \mathring{a} $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\hat</span>&#123;a&#125;, <span class="keyword">\widehat</span>&#123;a&#125;, <span class="keyword">\vec</span>&#123;a&#125;</span><br></pre></td></tr></table></figure>
<p>$ \hat{a}, \widehat{a}, \vec{a} $</p>
<h3 id="3-2-标准函数"><a href="#3-2-标准函数" class="headerlink" title="3.2 标准函数"></a>3.2 标准函数</h3><p><strong>指数</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\exp</span><span class="built_in">_</span>a b, <span class="keyword">\exp</span> b, x<span class="built_in">^</span>2</span><br></pre></td></tr></table></figure>
<p>$ \exp_a b, \exp b, x^2 $</p>
<p><strong>对数</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\log</span> a, <span class="keyword">\lg</span> b, <span class="keyword">\ln</span> c, <span class="keyword">\log</span><span class="built_in">_</span>&#123;2&#125; d</span><br></pre></td></tr></table></figure>
<p>$ \log a, \lg b, \ln c, \log_{2} d $</p>
<p><strong>三角函数</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\sin</span> a, <span class="keyword">\cos</span> b, <span class="keyword">\tan</span> c, <span class="keyword">\cot</span> d, <span class="keyword">\sec</span> e, <span class="keyword">\csc</span> f</span><br></pre></td></tr></table></figure>
<p>$ \sin a, \cos b, \tan c, \cot d, \sec e, \csc f $</p>
<p><strong>反三角函数</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\arcsin</span> a, <span class="keyword">\arccos</span> b, <span class="keyword">\arctan</span> c</span><br></pre></td></tr></table></figure>
<p>$ \arcsin a, \arccos b, \arctan c $</p>
<p>注意 <code>\arccot, \arcsec, \arccsc</code> 不被转义，需要用 <code>\operatorname</code> 替代。</p>
<p><strong>双曲函数</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\sinh</span> a, <span class="keyword">\cosh</span> b, <span class="keyword">\tanh</span> c, <span class="keyword">\coth</span> d</span><br></pre></td></tr></table></figure>
<p>$ \sinh a, \cosh b, \tanh c, \coth d $</p>
<p>注意 <code>\sech, \csch</code> 不被转义，需要用 <code>\operatorname</code> 替代。</p>
<p><strong>绝对值</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span><span class="keyword">\vert</span> a <span class="keyword">\right</span><span class="keyword">\vert</span>, |b|, | <span class="keyword">\dfrac</span> cd |, <span class="keyword">\left</span>| <span class="keyword">\dfrac</span> cd <span class="keyword">\right</span>|</span><br></pre></td></tr></table></figure>
<p>$ \left\vert a \right\vert, |b|, | \dfrac cd |, \left| \dfrac cd \right| $</p>
<p><strong>最大值，最小值</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\max</span>(x,y), <span class="keyword">\min</span>(x,y)</span><br></pre></td></tr></table></figure>
<p>$ \max(x,y), \min(x,y) $</p>
<p><strong>其他不能转义的标准函数</strong></p>
<p>用 <code>\operatorname&#123;function&#125;</code> 表示，如符号函数：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\operatorname</span>&#123;sgn&#125; x</span><br></pre></td></tr></table></figure>
<p>$ \operatorname{sgn} x $</p>
<h3 id="3-3-界限，极限"><a href="#3-3-界限，极限" class="headerlink" title="3.3 界限，极限"></a>3.3 界限，极限</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\min</span> x, <span class="keyword">\max</span> y, <span class="keyword">\inf</span> a, <span class="keyword">\sup</span> b</span><br></pre></td></tr></table></figure>
<p>$ \min x, \max y, \inf a, \sup b $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lim</span> x, <span class="keyword">\liminf</span> y, <span class="keyword">\limsup</span> z</span><br></pre></td></tr></table></figure>
<p>$ \lim x, \liminf y, \limsup z $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\dim</span> p, <span class="keyword">\deg</span> q, <span class="keyword">\det</span> m, <span class="keyword">\ker</span><span class="keyword">\phi</span></span><br></pre></td></tr></table></figure>
<p>$ \dim p, \deg q, \det m, \ker\phi $</p>
<p>更多极限见 <a href="#4-5-大型运算符（求和求积、极限、积分等）">4.5 节</a>。</p>
<h3 id="3-4-投射"><a href="#3-4-投射" class="headerlink" title="3.4 投射"></a>3.4 投射</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Pr</span> j, <span class="keyword">\hom</span> l, <span class="keyword">\lVert</span> z <span class="keyword">\rVert</span>, <span class="keyword">\arg</span> z</span><br></pre></td></tr></table></figure>
<p>$ \Pr j, \hom l, \lVert z \rVert, \arg z $</p>
<h3 id="3-5-微分，导数"><a href="#3-5-微分，导数" class="headerlink" title="3.5 微分，导数"></a>3.5 微分，导数</h3><p>用 <code>\mathrm&#123;x&#125;</code> 处理非斜体字符，如微分符号 <code>d</code>。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">dx, <span class="keyword">\mathrm</span>&#123;d&#125;x, <span class="keyword">\partial</span> t, <span class="keyword">\nabla</span><span class="keyword">\psi</span></span><br></pre></td></tr></table></figure>
<p>$ dx, \mathrm{d}x, \partial t, \nabla\psi $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mathrm</span>&#123;d&#125;y/<span class="keyword">\mathrm</span>&#123;d&#125;x, <span class="keyword">\frac</span>&#123;<span class="keyword">\mathrm</span>&#123;d&#125;y&#125;&#123;<span class="keyword">\mathrm</span>&#123;d&#125;x&#125;, <span class="keyword">\frac</span>&#123;<span class="keyword">\partial</span><span class="built_in">^</span>2&#125;&#123;<span class="keyword">\partial</span> x <span class="keyword">\partial</span> y&#125;z</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\mathrm{d}y/\mathrm{d}x, \frac{\mathrm{d}y}{\mathrm{d}x}, \frac{\partial^2}{\partial x \partial y}z</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#x27;, <span class="keyword">\prime</span>, <span class="keyword">\backprime</span>, f<span class="built_in">^</span><span class="keyword">\prime</span>, f&#x27;, f&#x27;&#x27;, f<span class="built_in">^</span>&#123;(3)&#125;, <span class="keyword">\dot</span> y, <span class="keyword">\ddot</span> y, <span class="keyword">\dddot</span> y</span><br></pre></td></tr></table></figure>
<p>$ ‘, \prime, \backprime, f^\prime, f’, f’’, f^{(3)}, \dot y, \ddot y, \dddot y $</p>
<h3 id="3-6-字母符号与常数"><a href="#3-6-字母符号与常数" class="headerlink" title="3.6 字母符号与常数"></a>3.6 字母符号与常数</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\infty</span>, <span class="keyword">\aleph</span>, <span class="keyword">\complement</span>, <span class="keyword">\backepsilon</span>, <span class="keyword">\eth</span>, <span class="keyword">\Finv</span>, <span class="keyword">\hbar</span></span><br></pre></td></tr></table></figure>
<p>$ \infty, \aleph, \complement, \backepsilon, \eth, \Finv, \hbar $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\imath</span>, <span class="keyword">\jmath</span>, <span class="keyword">\Bbbk</span>, <span class="keyword">\ell</span>, <span class="keyword">\mho</span>, <span class="keyword">\wp</span>, <span class="keyword">\Re</span>, <span class="keyword">\circledS</span></span><br></pre></td></tr></table></figure>
<p>$ \imath, \jmath, \Bbbk, \ell, \mho, \wp, \Re, \circledS $</p>
<h3 id="3-7-模运算"><a href="#3-7-模运算" class="headerlink" title="3.7 模运算"></a>3.7 模运算</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\pmod</span>&#123;m&#125;, a <span class="keyword">\bmod</span> b</span><br></pre></td></tr></table></figure>
<p>$ \pmod{m}, a \bmod b $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\gcd</span>(m,n), <span class="keyword">\operatorname</span>&#123;lcm&#125;(m,n)</span><br></pre></td></tr></table></figure>
<p>$ \gcd(m,n), \operatorname{lcm}(m,n) $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mid</span>, <span class="keyword">\nmid</span>, <span class="keyword">\shortmid</span>, <span class="keyword">\nshortmid</span></span><br></pre></td></tr></table></figure>
<p>$ \mid, \nmid, \shortmid, \nshortmid $</p>
<h3 id="3-8-根号"><a href="#3-8-根号" class="headerlink" title="3.8 根号"></a>3.8 根号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\surd</span>, <span class="keyword">\sqrt</span>&#123;2&#125;, <span class="keyword">\sqrt</span>[n]&#123;&#125;, <span class="keyword">\sqrt</span>[3]&#123;x<span class="built_in">^</span>2+y<span class="built_in">^</span>2&#125;</span><br></pre></td></tr></table></figure>
<p>$ \surd, \sqrt{2}, \sqrt[n]{}, \sqrt[3]{x^2+y^2} $</p>
<h3 id="3-9-运算符"><a href="#3-9-运算符" class="headerlink" title="3.9 运算符"></a>3.9 运算符</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">+, -, <span class="keyword">\pm</span>, <span class="keyword">\mp</span>, <span class="keyword">\dotplus</span></span><br></pre></td></tr></table></figure>
<p>$ +, -, \pm, \mp, \dotplus $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">*, /, <span class="keyword">\times</span>, <span class="keyword">\div</span>, <span class="keyword">\divideontimes</span>, <span class="keyword">\cdot</span>, <span class="keyword">\ast</span>, <span class="keyword">\backslash</span></span><br></pre></td></tr></table></figure>
<p>$ *, /, \times, \div, \divideontimes, \cdot, \ast, \backslash $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\star</span>, <span class="keyword">\circ</span>, <span class="keyword">\bullet</span></span><br></pre></td></tr></table></figure>
<p>$ \star, \circ, \bullet $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\boxplus</span>, <span class="keyword">\boxminus</span>, <span class="keyword">\boxtimes</span>, <span class="keyword">\boxdot</span></span><br></pre></td></tr></table></figure>
<p>$ \boxplus, \boxminus, \boxtimes, \boxdot $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\oplus</span>, <span class="keyword">\ominus</span>, <span class="keyword">\otimes</span>, <span class="keyword">\oslash</span>, <span class="keyword">\odot</span></span><br></pre></td></tr></table></figure>
<p>$ \oplus, \ominus, \otimes, \oslash, \odot $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\circleddash</span>, <span class="keyword">\circledcirc</span>, <span class="keyword">\circledast</span></span><br></pre></td></tr></table></figure>
<p>$ \circleddash, \circledcirc, \circledast $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\bigoplus</span>, <span class="keyword">\bigotimes</span>, <span class="keyword">\bigodot</span></span><br></pre></td></tr></table></figure>
<p>$ \bigoplus, \bigotimes, \bigodot $</p>
<h3 id="3-10-集合"><a href="#3-10-集合" class="headerlink" title="3.10 集合"></a>3.10 集合</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\&#123;</span>, <span class="keyword">\&#125;</span>, <span class="keyword">\emptyset</span>, <span class="keyword">\varnothing</span></span><br></pre></td></tr></table></figure>
<p>$ \{, \}, \emptyset, \varnothing $</p>
<p>注意本环境下不支持用 <code>\O, \empty</code> 表示空集，需要用 <code>\emptyset</code> 替代。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\in</span>, <span class="keyword">\notin</span>, <span class="keyword">\not</span><span class="keyword">\in</span>, <span class="keyword">\ni</span>, <span class="keyword">\not</span><span class="keyword">\ni</span></span><br></pre></td></tr></table></figure>
<p>$ \in, \notin, \not\in, \ni, \not\ni $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\cap</span>, <span class="keyword">\Cap</span>, <span class="keyword">\sqcap</span>, <span class="keyword">\bigcap</span></span><br></pre></td></tr></table></figure>
<p>$ \cap, \Cap, \sqcap, \bigcap $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\cup</span>, <span class="keyword">\Cup</span>, <span class="keyword">\sqcup</span>, <span class="keyword">\bigcup</span>, <span class="keyword">\bigsqcup</span>, <span class="keyword">\uplus</span>, <span class="keyword">\biguplus</span></span><br></pre></td></tr></table></figure>
<p>$ \cup, \Cup, \sqcup, \bigcup, \bigsqcup, \uplus, \biguplus $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\setminus</span>, <span class="keyword">\smallsetminus</span></span><br></pre></td></tr></table></figure>
<p>$ \setminus, \smallsetminus $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\subset</span>, <span class="keyword">\Subset</span>, <span class="keyword">\sqsubset</span></span><br></pre></td></tr></table></figure>
<p>$ \subset, \Subset, \sqsubset $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\supset</span>, <span class="keyword">\Supset</span>, <span class="keyword">\sqsupset</span></span><br></pre></td></tr></table></figure>
<p>$ \supset, \Supset, \sqsupset $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\subseteq</span>, <span class="keyword">\nsubseteq</span>, <span class="keyword">\subsetneq</span>, <span class="keyword">\varsubsetneq</span>, <span class="keyword">\sqsubseteq</span></span><br></pre></td></tr></table></figure>
<p>$ \subseteq, \nsubseteq, \subsetneq, \varsubsetneq, \sqsubseteq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\supseteq</span>, <span class="keyword">\nsupseteq</span>, <span class="keyword">\supsetneq</span>, <span class="keyword">\varsupsetneq</span>, <span class="keyword">\sqsupseteq</span></span><br></pre></td></tr></table></figure>
<p>$ \supseteq, \nsupseteq, \supsetneq, \varsupsetneq, \sqsupseteq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\subseteqq</span>, <span class="keyword">\nsubseteqq</span>, <span class="keyword">\subsetneqq</span>, <span class="keyword">\varsubsetneqq</span></span><br></pre></td></tr></table></figure>
<p>$ \subseteqq, \nsubseteqq, \subsetneqq, \varsubsetneqq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\supseteqq</span>, <span class="keyword">\nsupseteqq</span>, <span class="keyword">\supsetneqq</span>, <span class="keyword">\varsupsetneqq</span></span><br></pre></td></tr></table></figure>
<p>$ \supseteqq, \nsupseteqq, \supsetneqq, \varsupsetneqq $</p>
<h3 id="3-11-关系符号"><a href="#3-11-关系符号" class="headerlink" title="3.11 关系符号"></a>3.11 关系符号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">=, <span class="keyword">\ne</span>, <span class="keyword">\neq</span>, <span class="keyword">\equiv</span>, <span class="keyword">\not</span><span class="keyword">\equiv</span></span><br></pre></td></tr></table></figure>
<p>$ =, \ne, \neq, \equiv, \not\equiv $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\doteq</span>, <span class="keyword">\doteqdot</span>, :=, <span class="keyword">\overset</span>&#123;<span class="keyword">\underset</span>&#123;<span class="keyword">\mathrm</span>&#123;def&#125; &#125; &#123;&#125; &#125; &#123;=&#125;</span><br></pre></td></tr></table></figure>
<p>$ \doteq, \doteqdot, :=, \overset{\underset{\mathrm{def} } {} } {=} $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\sim</span>, <span class="keyword">\nsim</span>, <span class="keyword">\backsim</span>, <span class="keyword">\thicksim</span>, <span class="keyword">\simeq</span>, <span class="keyword">\backsimeq</span>, <span class="keyword">\eqsim</span>, <span class="keyword">\cong</span>, <span class="keyword">\ncong</span></span><br></pre></td></tr></table></figure>
<p>$ \sim, \nsim, \backsim, \thicksim, \simeq, \backsimeq, \eqsim, \cong, \ncong $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\approx</span>, <span class="keyword">\thickapprox</span>, <span class="keyword">\approxeq</span>, <span class="keyword">\asymp</span>, <span class="keyword">\propto</span>, <span class="keyword">\varpropto</span></span><br></pre></td></tr></table></figure>
<p>$ \approx, \thickapprox, \approxeq, \asymp, \propto, \varpropto $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&lt;, <span class="keyword">\nless</span>, <span class="keyword">\ll</span>, <span class="keyword">\not</span><span class="keyword">\ll</span>, <span class="keyword">\lll</span>, <span class="keyword">\not</span><span class="keyword">\lll</span>, <span class="keyword">\lessdot</span></span><br></pre></td></tr></table></figure>
<p>$ &lt;, \nless, \ll, \not\ll, \lll, \not\lll, \lessdot $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&gt;, <span class="keyword">\ngtr</span>, <span class="keyword">\gg</span>, <span class="keyword">\not</span><span class="keyword">\gg</span>, <span class="keyword">\ggg</span>, <span class="keyword">\not</span><span class="keyword">\ggg</span>, <span class="keyword">\gtrdot</span></span><br></pre></td></tr></table></figure>
<p>$ &gt;, \ngtr, \gg, \not\gg, \ggg, \not\ggg, \gtrdot $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\le</span>, <span class="keyword">\leq</span>, <span class="keyword">\lneq</span>, <span class="keyword">\leqq</span>, <span class="keyword">\nleq</span>, <span class="keyword">\nleqq</span>, <span class="keyword">\lneqq</span>, <span class="keyword">\lvertneqq</span></span><br></pre></td></tr></table></figure>
<p>$ \le, \leq, \lneq, \leqq, \nleq, \nleqq, \lneqq, \lvertneqq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\ge</span>, <span class="keyword">\geq</span>, <span class="keyword">\gneq</span>, <span class="keyword">\geqq</span>, <span class="keyword">\ngeq</span>, <span class="keyword">\ngeqq</span>, <span class="keyword">\gneqq</span>, <span class="keyword">\gvertneqq</span></span><br></pre></td></tr></table></figure>
<p>$ \ge, \geq, \gneq, \geqq, \ngeq, \ngeqq, \gneqq, \gvertneqq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lessgtr</span>, <span class="keyword">\lesseqgtr</span>, <span class="keyword">\lesseqqgtr</span>, <span class="keyword">\gtrless</span>, <span class="keyword">\gtreqless</span>, <span class="keyword">\gtreqqless</span></span><br></pre></td></tr></table></figure>
<p>$ \lessgtr, \lesseqgtr, \lesseqqgtr, \gtrless, \gtreqless, \gtreqqless $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\leqslant</span>, <span class="keyword">\nleqslant</span>, <span class="keyword">\eqslantless</span></span><br></pre></td></tr></table></figure>
<p>$ \leqslant, \nleqslant, \eqslantless $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\geqslant</span>, <span class="keyword">\ngeqslant</span>, <span class="keyword">\eqslantgtr</span></span><br></pre></td></tr></table></figure>
<p>$ \geqslant, \ngeqslant, \eqslantgtr $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lesssim</span>, <span class="keyword">\lnsim</span>, <span class="keyword">\lessapprox</span>, <span class="keyword">\lnapprox</span></span><br></pre></td></tr></table></figure>
<p>$ \lesssim, \lnsim, \lessapprox, \lnapprox $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\gtrsim</span>, <span class="keyword">\gnsim</span>, <span class="keyword">\gtrapprox</span>, <span class="keyword">\gnapprox</span></span><br></pre></td></tr></table></figure>
<p>$ \gtrsim, \gnsim, \gtrapprox, \gnapprox $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\prec</span>, <span class="keyword">\nprec</span>, <span class="keyword">\preceq</span>, <span class="keyword">\npreceq</span>, <span class="keyword">\precneqq</span></span><br></pre></td></tr></table></figure>
<p>$ \prec, \nprec, \preceq, \npreceq, \precneqq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\succ</span>, <span class="keyword">\nsucc</span>, <span class="keyword">\succeq</span>, <span class="keyword">\nsucceq</span>, <span class="keyword">\succneqq</span></span><br></pre></td></tr></table></figure>
<p>$ \succ, \nsucc, \succeq, \nsucceq, \succneqq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\preccurlyeq</span>, <span class="keyword">\curlyeqprec</span></span><br></pre></td></tr></table></figure>
<p>$ \preccurlyeq, \curlyeqprec $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\succcurlyeq</span>, <span class="keyword">\curlyeqsucc</span></span><br></pre></td></tr></table></figure>
<p>$ \succcurlyeq, \curlyeqsucc $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\precsim</span>, <span class="keyword">\precnsim</span>, <span class="keyword">\precapprox</span>, <span class="keyword">\precnapprox</span></span><br></pre></td></tr></table></figure>
<p>$ \precsim, \precnsim, \precapprox, \precnapprox $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\succsim</span>, <span class="keyword">\succnsim</span>, <span class="keyword">\succapprox</span>, <span class="keyword">\succnapprox</span></span><br></pre></td></tr></table></figure>
<p>$ \succsim, \succnsim, \succapprox, \succnapprox $</p>
<h3 id="3-12-几何符号"><a href="#3-12-几何符号" class="headerlink" title="3.12 几何符号"></a>3.12 几何符号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\parallel</span>, <span class="keyword">\nparallel</span>, <span class="keyword">\shortparallel</span>, <span class="keyword">\nshortparallel</span></span><br></pre></td></tr></table></figure>
<p>$ \parallel, \nparallel, \shortparallel, \nshortparallel $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\perp</span>, <span class="keyword">\angle</span>, <span class="keyword">\sphericalangle</span>, <span class="keyword">\measuredangle</span>, 45<span class="built_in">^</span><span class="keyword">\circ</span></span><br></pre></td></tr></table></figure>
<p>$ \perp, \angle, \sphericalangle, \measuredangle, 45^\circ $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Box</span>, <span class="keyword">\blacksquare</span>, <span class="keyword">\diamond</span>, <span class="keyword">\Diamond</span>, <span class="keyword">\lozenge</span>, <span class="keyword">\blacklozenge</span>, <span class="keyword">\bigstar</span>, <span class="keyword">\bigcirc</span></span><br></pre></td></tr></table></figure>
<p>$ \Box, \blacksquare, \diamond, \Diamond, \lozenge, \blacklozenge, \bigstar, \bigcirc $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\triangle</span>, <span class="keyword">\triangledown</span> ,<span class="keyword">\bigtriangleup</span>, <span class="keyword">\bigtriangledown</span>, <span class="keyword">\vartriangle</span></span><br></pre></td></tr></table></figure>
<p>$ \triangle, \triangledown ,\bigtriangleup, \bigtriangledown, \vartriangle $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\blacktriangle</span>, <span class="keyword">\blacktriangledown</span>, <span class="keyword">\blacktriangleleft</span>, <span class="keyword">\blacktriangleright</span></span><br></pre></td></tr></table></figure>
<p>$ \blacktriangle, \blacktriangledown, \blacktriangleleft, \blacktriangleright $</p>
<h3 id="3-13-逻辑符号"><a href="#3-13-逻辑符号" class="headerlink" title="3.13 逻辑符号"></a>3.13 逻辑符号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\forall</span>, <span class="keyword">\not</span><span class="keyword">\forall</span>, <span class="keyword">\exists</span>, <span class="keyword">\nexists</span></span><br></pre></td></tr></table></figure>
<p>$ \forall, \not\forall, \exists, \nexists $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\because</span>, <span class="keyword">\therefore</span>, <span class="keyword">\And</span></span><br></pre></td></tr></table></figure>
<p>$ \because, \therefore, \And $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lor</span>, <span class="keyword">\vee</span>, <span class="keyword">\curlyvee</span>, <span class="keyword">\bigvee</span></span><br></pre></td></tr></table></figure>
<p>$ \lor, \vee, \curlyvee, \bigvee $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\land</span>, <span class="keyword">\wedge</span>, <span class="keyword">\curlywedge</span>, <span class="keyword">\bigwedge</span></span><br></pre></td></tr></table></figure>
<p>$ \land, \wedge, \curlywedge, \bigwedge $</p>
<p>注意本环境下不支持用 <code>\or, \and</code> 表示或、且，需要用 <code>\lor, \land</code> 替代。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\bar</span>&#123;x&#125;, <span class="keyword">\bar</span>&#123;abc&#125;, <span class="keyword">\overline</span>&#123;x&#125;, <span class="keyword">\overline</span>&#123;abc&#125;</span><br></pre></td></tr></table></figure>
<p>$ \bar{x}, \bar{abc}, \overline{x}, \overline{abc} $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lnot</span>, <span class="keyword">\neg</span>, <span class="keyword">\not</span><span class="keyword">\operatorname</span>&#123;R&#125;, <span class="keyword">\bot</span>, <span class="keyword">\top</span></span><br></pre></td></tr></table></figure>
<p>$ \lnot, \neg, \not\operatorname{R}, \bot, \top $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\vdash</span>, <span class="keyword">\dashv</span>, <span class="keyword">\vDash</span>, <span class="keyword">\Vdash</span>, <span class="keyword">\Vvdash</span>, <span class="keyword">\models</span></span><br></pre></td></tr></table></figure>
<p>$ \vdash, \dashv, \vDash, \Vdash, \Vvdash, \models $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\nvdash</span>, <span class="keyword">\nVdash</span>, <span class="keyword">\nvDash</span>, <span class="keyword">\nVDash</span></span><br></pre></td></tr></table></figure>
<p>$ \nvdash, \nVdash, \nvDash, \nVDash $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\ulcorner</span>, <span class="keyword">\urcorner</span>, <span class="keyword">\llcorner</span>, <span class="keyword">\lrcorner</span></span><br></pre></td></tr></table></figure>
<p>$ \ulcorner, \urcorner, \llcorner, \lrcorner $</p>
<h3 id="3-14-箭头"><a href="#3-14-箭头" class="headerlink" title="3.14 箭头"></a>3.14 箭头</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\to</span>, <span class="keyword">\rightarrow</span>, <span class="keyword">\nrightarrow</span>, <span class="keyword">\longrightarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \to, \rightarrow, \nrightarrow, \longrightarrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\gets</span>, <span class="keyword">\leftarrow</span>, <span class="keyword">\nleftarrow</span>, <span class="keyword">\longleftarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \gets, \leftarrow, \nleftarrow, \longleftarrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\leftrightarrow</span>, <span class="keyword">\nleftrightarrow</span>, <span class="keyword">\longleftrightarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \leftrightarrow, \nleftrightarrow, \longleftrightarrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\uparrow</span>, <span class="keyword">\downarrow</span>, <span class="keyword">\updownarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \uparrow, \downarrow, \updownarrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Rightarrow</span>, <span class="keyword">\nRightarrow</span>, <span class="keyword">\Longrightarrow</span>, <span class="keyword">\implies</span></span><br></pre></td></tr></table></figure>
<p>$ \Rightarrow, \nRightarrow, \Longrightarrow, \implies $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Leftarrow</span>, <span class="keyword">\nLeftarrow</span>, <span class="keyword">\Longleftarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \Leftarrow, \nLeftarrow, \Longleftarrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Leftrightarrow</span>, <span class="keyword">\nLeftrightarrow</span>, <span class="keyword">\Longleftrightarrow</span>, <span class="keyword">\iff</span></span><br></pre></td></tr></table></figure>
<p>$ \Leftrightarrow, \nLeftrightarrow, \Longleftrightarrow, \iff $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Uparrow</span>, <span class="keyword">\Downarrow</span>, <span class="keyword">\Updownarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \Uparrow, \Downarrow, \Updownarrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Rrightarrow</span>, <span class="keyword">\Lleftarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \Rrightarrow, \Lleftarrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\nearrow</span>, <span class="keyword">\swarrow</span>, <span class="keyword">\nwarrow</span>, <span class="keyword">\searrow</span></span><br></pre></td></tr></table></figure>
<p>$ \nearrow, \swarrow, \nwarrow, \searrow $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mapsto</span>, <span class="keyword">\longmapsto</span></span><br></pre></td></tr></table></figure>
<p>$ \mapsto, \longmapsto $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\rightharpoonup</span>, <span class="keyword">\rightharpoondown</span>, <span class="keyword">\leftharpoonup</span>, <span class="keyword">\leftharpoondown</span>, <span class="keyword">\upharpoonleft</span>, <span class="keyword">\upharpoonright</span>, <span class="keyword">\downharpoonleft</span>, <span class="keyword">\downharpoonright</span>, <span class="keyword">\rightleftharpoons</span>, <span class="keyword">\leftrightharpoons</span></span><br></pre></td></tr></table></figure>
<p>$ \rightharpoonup, \rightharpoondown, \leftharpoonup, \leftharpoondown, \upharpoonleft, \upharpoonright, \downharpoonleft, \downharpoonright, \rightleftharpoons, \leftrightharpoons $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\curvearrowleft</span>, <span class="keyword">\circlearrowleft</span>, <span class="keyword">\Lsh</span>, <span class="keyword">\upuparrows</span>, <span class="keyword">\rightrightarrows</span>, <span class="keyword">\rightleftarrows</span>, <span class="keyword">\rightarrowtail</span>, <span class="keyword">\looparrowright</span></span><br></pre></td></tr></table></figure>
<p>$ \curvearrowleft, \circlearrowleft, \Lsh, \upuparrows, \rightrightarrows, \rightleftarrows, \rightarrowtail, \looparrowright $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\curvearrowright</span>, <span class="keyword">\circlearrowright</span>, <span class="keyword">\Rsh</span>, <span class="keyword">\downdownarrows</span>, <span class="keyword">\leftleftarrows</span>, <span class="keyword">\leftrightarrows</span>, <span class="keyword">\leftarrowtail</span>, <span class="keyword">\looparrowleft</span></span><br></pre></td></tr></table></figure>
<p>$ \curvearrowright, \circlearrowright, \Rsh, \downdownarrows, \leftleftarrows, \leftrightarrows, \leftarrowtail, \looparrowleft $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\hookrightarrow</span>, <span class="keyword">\hookleftarrow</span>, <span class="keyword">\multimap</span>, <span class="keyword">\leftrightsquigarrow</span>, <span class="keyword">\rightsquigarrow</span>, <span class="keyword">\twoheadrightarrow</span>, <span class="keyword">\twoheadleftarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \hookrightarrow, \hookleftarrow, \multimap, \leftrightsquigarrow, \rightsquigarrow, \twoheadrightarrow, \twoheadleftarrow $</p>
<h3 id="3-15-省略号"><a href="#3-15-省略号" class="headerlink" title="3.15 省略号"></a>3.15 省略号</h3><p>用 <code>\cdots</code> 表示居中的三个点，<code>\ldots</code> 表示居底线的三个点，<code>\vdots</code> 和 <code>\ddots</code> 分别表示垂直和对角线。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\cdots</span>, <span class="keyword">\ldots</span>, <span class="keyword">\vdots</span>, <span class="keyword">\ddots</span></span><br></pre></td></tr></table></figure>
<p>$ \cdots, \ldots, \vdots, \ddots $</p>
<h3 id="3-16-其他"><a href="#3-16-其他" class="headerlink" title="3.16 其他"></a>3.16 其他</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\amalg</span>, <span class="keyword">\%</span>, <span class="keyword">\&amp;</span>, <span class="keyword">\dagger</span>, <span class="keyword">\ddagger</span></span><br></pre></td></tr></table></figure>
<p>$ \amalg, \%, \&amp;, \dagger, \ddagger $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\smile</span>, <span class="keyword">\frown</span>, <span class="keyword">\wr</span>, <span class="keyword">\triangleleft</span>, <span class="keyword">\triangleright</span></span><br></pre></td></tr></table></figure>
<p>$ \smile, \frown, \wr, \triangleleft, \triangleright $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\diamondsuit</span>, <span class="keyword">\heartsuit</span>, <span class="keyword">\clubsuit</span>, <span class="keyword">\spadesuit</span>, <span class="keyword">\Game</span>, <span class="keyword">\flat</span>, <span class="keyword">\natural</span>, <span class="keyword">\sharp</span></span><br></pre></td></tr></table></figure>
<p>$ \diamondsuit, \heartsuit, \clubsuit, \spadesuit, \Game, \flat, \natural, \sharp $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\diagup</span>, <span class="keyword">\diagdown</span>, <span class="keyword">\centerdot</span>, <span class="keyword">\ltimes</span>, <span class="keyword">\rtimes</span>, <span class="keyword">\leftthreetimes</span>, <span class="keyword">\rightthreetimes</span></span><br></pre></td></tr></table></figure>
<p>$ \diagup, \diagdown, \centerdot, \ltimes, \rtimes, \leftthreetimes, \rightthreetimes $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\eqcirc</span>, <span class="keyword">\circeq</span>, <span class="keyword">\triangleq</span>, <span class="keyword">\bumpeq</span>, <span class="keyword">\Bumpeq</span>, <span class="keyword">\doteqdot</span>, <span class="keyword">\risingdotseq</span>, <span class="keyword">\fallingdotseq</span></span><br></pre></td></tr></table></figure>
<p>$ \eqcirc, \circeq, \triangleq, \bumpeq, \Bumpeq, \doteqdot, \risingdotseq, \fallingdotseq $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\intercal</span>, <span class="keyword">\barwedge</span>, <span class="keyword">\veebar</span>, <span class="keyword">\doublebarwedge</span>, <span class="keyword">\between</span>, <span class="keyword">\pitchfork</span></span><br></pre></td></tr></table></figure>
<p>$ \intercal, \barwedge, \veebar, \doublebarwedge, \between, \pitchfork $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\vartriangleleft</span>, <span class="keyword">\ntriangleleft</span>, <span class="keyword">\vartriangleright</span>, <span class="keyword">\ntriangleright</span></span><br></pre></td></tr></table></figure>
<p>$ \vartriangleleft, \ntriangleleft, \vartriangleright, \ntriangleright $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\trianglelefteq</span>, <span class="keyword">\ntrianglelefteq</span>, <span class="keyword">\trianglerighteq</span>, <span class="keyword">\ntrianglerighteq</span></span><br></pre></td></tr></table></figure>
<p>$ \trianglelefteq, \ntrianglelefteq, \trianglerighteq, \ntrianglerighteq $</p>
<h2 id="4-常用数学语法"><a href="#4-常用数学语法" class="headerlink" title="4 常用数学语法"></a>4 常用数学语法</h2><h3 id="4-1-上下标"><a href="#4-1-上下标" class="headerlink" title="4.1 上下标"></a>4.1 上下标</h3><p>用 <code>_</code> 表示下标，用 <code>^</code> 表示上标，并只处理一个字符，多个字符用 <code>&#123;&#125;</code> 括起来。上下标可嵌套或同时使用。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">a<span class="built_in">^</span>2, a<span class="built_in">_</span>2, a<span class="built_in">^</span>&#123;2+2&#125;, a<span class="built_in">_</span>&#123;i,j&#125;, x<span class="built_in">_</span>2<span class="built_in">^</span>3</span><br></pre></td></tr></table></figure>
<p>$ a^2, a_2, a^{2+2}, a_{i,j}, x_2^3 $</p>
<p>前置上下标可以用空花括号 <code>&#123;&#125;</code> 承载，也可以使用 <code>\sideset</code> 命令。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;&#125;<span class="built_in">_</span>1<span class="built_in">^</span>2X<span class="built_in">_</span>3<span class="built_in">^</span>4 <span class="keyword">\quad</span> <span class="keyword">\sideset</span>&#123;<span class="built_in">_</span>1<span class="built_in">^</span>2&#125;&#123;<span class="built_in">_</span>3<span class="built_in">^</span>4&#125; <span class="keyword">\bigotimes</span></span><br></pre></td></tr></table></figure>
<p>$ {}_1^2X_3^4 \quad \sideset{_1^2}{_3^4} \bigotimes $</p>
<h3 id="4-2-导数"><a href="#4-2-导数" class="headerlink" title="4.2 导数"></a>4.2 导数</h3><p>撇导数用 <code>&#39;</code> 或上标的 <code>\prime</code> 表示，注意不要漏掉上标。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">x&#x27;, x&#x27;&#x27;, x<span class="built_in">^</span><span class="keyword">\prime</span></span><br></pre></td></tr></table></figure>
<p>$ x’, x’’, x^\prime $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">x<span class="keyword">\prime</span> <span class="comment">% Bad</span></span><br></pre></td></tr></table></figure>
<p>$ x\prime % Bad $</p>
<p>点导数用 <code>\dot</code>、<code>\ddot</code> 和 <code>\dddot</code> 表示。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\dot</span>&#123;y&#125;, <span class="keyword">\ddot</span>&#123;y&#125;, <span class="keyword">\dddot</span>&#123;y&#125;</span><br></pre></td></tr></table></figure>
<p>$ \dot{y}, \ddot{y}, \dddot{y} $</p>
<h3 id="4-3-向量"><a href="#4-3-向量" class="headerlink" title="4.3 向量"></a>4.3 向量</h3><p>用 <code>\vec</code>、<code>\boldsymbol</code>、<code>\over--arrow</code> 或 <code>\widehat</code> 表示。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\vec</span>&#123;a&#125;, <span class="keyword">\boldsymbol</span>&#123;b&#125;, <span class="keyword">\overleftarrow</span>&#123;ab&#125;, <span class="keyword">\overrightarrow</span>&#123;cd&#125;, <span class="keyword">\overleftrightarrow</span>&#123;ab&#125;, <span class="keyword">\widehat</span>&#123;abc&#125;</span><br></pre></td></tr></table></figure>
<p>$ \vec{a}, \boldsymbol{b}, \overleftarrow{ab}, \overrightarrow{cd}, \overleftrightarrow{ab}, \widehat{abc} $</p>
<h3 id="4-4-上下线"><a href="#4-4-上下线" class="headerlink" title="4.4 上下线"></a>4.4 上下线</h3><p><strong>上弧、上划线、下划线</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\overset</span>&#123;<span class="keyword">\frown</span>&#125; &#123;AB&#125;, <span class="keyword">\overline</span> &#123;abc&#125;, <span class="keyword">\underline</span>&#123;def&#125;</span><br></pre></td></tr></table></figure>
<p>$ \overset{\frown} {AB}, \overline {abc}, \underline{def} $</p>
<p><strong>上括号</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\overbrace</span>&#123;1+2+<span class="keyword">\cdots</span>+n&#125; <span class="keyword">\quad</span> <span class="keyword">\overbrace</span>&#123;1+2+<span class="keyword">\cdots</span>+n&#125;<span class="built_in">^</span>&#123;n&#125;</span><br></pre></td></tr></table></figure>
<p>$ \overbrace{1+2+\cdots+n} \quad \overbrace{1+2+\cdots+n}^{n} $</p>
<p>可以写成矩阵形式，使得上面的字符变大：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125; n <span class="keyword">\\</span> <span class="keyword">\overbrace</span>&#123;1+2+<span class="keyword">\cdots</span>+n&#125; <span class="keyword">\end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure>
<p>$ \begin{matrix} n \\ \overbrace{1+2+\cdots+n} \end{matrix} $</p>
<p><strong>下括号</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\underbrace</span>&#123;a+b+<span class="keyword">\cdots</span>+z&#125; <span class="keyword">\quad</span> <span class="keyword">\underbrace</span>&#123;a+b+<span class="keyword">\cdots</span>+z&#125;<span class="built_in">_</span>&#123;26&#125;</span><br></pre></td></tr></table></figure>
<p>$ \underbrace{a+b+\cdots+z} \quad \underbrace{a+b+\cdots+z}_{26} $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125; <span class="keyword">\underbrace</span>&#123;a+b+<span class="keyword">\cdots</span>+z&#125; <span class="keyword">\\</span> 26 <span class="keyword">\end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure>
<p>$ \begin{matrix} \underbrace{a+b+\cdots+z} \\ 26 \end{matrix} $</p>
<h3 id="4-5-大型运算符（求和求积、极限、积分等）"><a href="#4-5-大型运算符（求和求积、极限、积分等）" class="headerlink" title="4.5 大型运算符（求和求积、极限、积分等）"></a>4.5 大型运算符（求和求积、极限、积分等）</h3><p><strong>注意</strong></p>
<p>大型运算符通常含有上下部分，LaTeX 用上下标表示。其中行内公式位于右上右下，公式块位于正上正下（积分除外）。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span> <span class="keyword">\sum</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; i<span class="built_in">^</span>2 <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\sum</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; i<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>$ \sum_{i=1}^{n} i^2 $</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n} i^2</script><p>若要在行内公式显示为正上正下，可以使用 <code>\limits</code> 命令跟在运算符后：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span> <span class="keyword">\sum</span><span class="keyword">\limits</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; i<span class="built_in">^</span>2 <span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>$ \sum\limits_{i=1}^{n} i^2 $</p>
<p>若要在公式块显示为右上右下，可以使用一阶无框矩阵形式或使用 <code>\nolimits</code> 命令：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; i<span class="built_in">^</span>2 <span class="keyword">\end</span>&#123;matrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{matrix} \sum_{i=1}^{n} i^2 \end{matrix}</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\sum</span><span class="keyword">\nolimits</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; i<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\sum\nolimits_{i=1}^{n} i^2</script><p>下文的显示形式均为公式块。</p>
<p><strong>求和（累加）、求积（累乘）</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\sum</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; i<span class="built_in">^</span>2 <span class="keyword">\quad</span> <span class="keyword">\prod</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; x<span class="built_in">_</span>i</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\sum_{i=1}^{n} i^2 \quad \prod_{i=1}^{n} x_i</script><p><strong>极限</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lim</span><span class="built_in">_</span>&#123;x <span class="keyword">\to</span> <span class="keyword">\infty</span>&#125; (1+<span class="keyword">\frac</span>&#123;1&#125;&#123;x&#125;)<span class="built_in">^</span>x = e</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\lim_{x \to \infty} (1+\frac{1}{x})^x = e</script><p><strong>普通积分</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125; e<span class="built_in">^</span>x <span class="keyword">\,</span> <span class="keyword">\mathrm</span>&#123;d&#125;x</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\int_{a}^{b} e^x \, \mathrm{d}x</script><p><code>\,</code> 可省略，但建议加入使式子更美观；<code>\mathrm&#123;d&#125;</code> 可替换为 <code>&#123;\rm d&#125;</code>。</p>
<p><strong>二重积分、三重积分</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\iint</span><span class="built_in">_</span>&#123;D&#125; f(x,y) <span class="keyword">\,</span> <span class="keyword">\mathrm</span>&#123;d&#125;<span class="keyword">\sigma</span> <span class="keyword">\quad</span> <span class="keyword">\iiint</span><span class="built_in">_</span>&#123;<span class="keyword">\Omega</span>&#125; f(x,y,z) <span class="keyword">\,</span> <span class="keyword">\mathrm</span>&#123;d&#125;V</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\iint_{D} f(x,y) \, \mathrm{d}\sigma \quad \iiint_{\Omega} f(x,y,z) \, \mathrm{d}V</script><p><strong>闭合曲线积分</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\oint</span><span class="built_in">_</span>&#123;L&#125; f(x,y) <span class="keyword">\,</span> <span class="keyword">\mathrm</span>&#123;d&#125;s</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\oint_{L} f(x,y) \, \mathrm{d}s</script><p><strong>其他积分符号</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\int</span>, <span class="keyword">\iint</span>, <span class="keyword">\iiint</span>, <span class="keyword">\iiiint</span>, <span class="keyword">\idotsint</span>, <span class="keyword">\oint</span></span><br></pre></td></tr></table></figure>
<p>$ \int, \iint, \iiint, \iiiint, \idotsint, \oint $</p>
<p>注意本环境下不支持用 <code>\oiint, \oiiint</code> 表示二重闭合积分、三重闭合积分。</p>
<p><strong>交集、并集、余积</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\bigcap</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125; A<span class="built_in">_</span>i <span class="keyword">\quad</span> <span class="keyword">\bigcup</span><span class="built_in">_</span>&#123;j=1&#125;<span class="built_in">^</span>&#123;m&#125; B<span class="built_in">_</span>j</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\bigcap_{i=1}^{n} A_i \quad \bigcup_{j=1}^{m} B_j</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\coprod</span><span class="built_in">_</span>&#123;i <span class="keyword">\in</span> I&#125; A<span class="built_in">_</span>i</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\coprod_{i \in I} A_i</script><h2 id="5-分式"><a href="#5-分式" class="headerlink" title="5 分式"></a>5 分式</h2><h3 id="5-1-基本输入"><a href="#5-1-基本输入" class="headerlink" title="5.1 基本输入"></a>5.1 基本输入</h3><p>分式可以通过 <code>\over</code> 命令，两侧标记分子分母，且整体需要用花括号括起来。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">x = &#123; &#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2-4ac&#125; &#125; <span class="keyword">\over</span> &#123;2a&#125; &#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
x = { {-b \pm \sqrt{b^2-4ac} } \over {2a} }</script><p>常用的分式用 <code>\frac&#123;分子&#125;&#123;分母&#125;</code> 命令，便捷时使用 <code>\frac ab</code> 快速生成 $ \frac ab $。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\frac</span>&#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2-4ac&#125; &#125;&#123;2a&#125; <span class="keyword">\quad</span> <span class="keyword">\frac</span> ab</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\frac{-b \pm \sqrt{b^2-4ac} }{2a} \quad \frac ab</script><h3 id="5-2-分式排版"><a href="#5-2-分式排版" class="headerlink" title="5.2 分式排版"></a>5.2 分式排版</h3><p>普通分式在行内公式会自动缩小，在公式块会显示为完整大小。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;1&#125;&#123;2&#125;=0.5 <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;1&#125;&#123;2&#125;=0.5</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>$ \frac{1}{2}=0.5 $</p>
<script type="math/tex; mode=display">
\frac{1}{2}=0.5</script><p><code>\tfrac</code> 命令用于使分式显示为 <em>行内公式样式</em>。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\tfrac</span>&#123;1&#125;&#123;2&#125;=0.5</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\tfrac{1}{2}=0.5</script><p><code>\dfrac</code> 命令用于使分式显示为 <em>公式块样式</em>。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span> <span class="keyword">\dfrac</span>&#123;1&#125;&#123;2&#125;=0.5 <span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>$ \dfrac{1}{2}=0.5 $</p>
<p><strong>注意</strong></p>
<p>在指数函数、极限、积分等场景下，建议不使用 <code>\frac</code> 命令，而使用 <code>/</code> 表示为横式分式。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">e<span class="built_in">^</span>&#123;<span class="keyword">\frac</span>&#123;i<span class="keyword">\pi</span>&#125;&#123;2&#125; &#125; <span class="keyword">\quad</span> <span class="keyword">\int</span><span class="built_in">_</span>&#123;-<span class="keyword">\frac</span>&#123;<span class="keyword">\pi</span>&#125;&#123;2&#125; &#125;<span class="built_in">^</span>&#123;<span class="keyword">\frac</span>&#123;<span class="keyword">\pi</span>&#125;&#123;2&#125; &#125; <span class="keyword">\sin</span> x <span class="keyword">\,</span> <span class="keyword">\mathrm</span>&#123;d&#125;x</span><br><span class="line"><span class="comment">% OK</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
e^{\frac{i\pi}{2} } \quad \int_{-\frac{\pi}{2} }^{\frac{\pi}{2} } \sin x \, \mathrm{d}x
% OK</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">e<span class="built_in">^</span>&#123;i<span class="keyword">\pi</span>/2&#125; <span class="keyword">\quad</span> <span class="keyword">\int</span><span class="built_in">_</span>&#123;-<span class="keyword">\pi</span>/2&#125;<span class="built_in">^</span>&#123;<span class="keyword">\pi</span>/2&#125; <span class="keyword">\sin</span> x <span class="keyword">\,</span> <span class="keyword">\mathrm</span>&#123;d&#125;x</span><br><span class="line"><span class="comment">% Good</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
e^{i\pi/2} \quad \int_{-\pi/2}^{\pi/2} \sin x \, \mathrm{d}x
% Good</script><h3 id="5-3-连分式"><a href="#5-3-连分式" class="headerlink" title="5.3 连分式"></a>5.3 连分式</h3><p>用 <code>\cfrac</code> 命令输入连分式，会自动处理分子分母的高度。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\cfrac</span>&#123;1&#125;&#123;2 + <span class="keyword">\cfrac</span>&#123;1&#125;&#123;2 + <span class="keyword">\cfrac</span>&#123;1&#125;&#123;2 + <span class="keyword">\cdots</span>&#125; &#125; &#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\cfrac{1}{2 + \cfrac{1}{2 + \cfrac{1}{2 + \cdots} } }</script><h3 id="5-4-二项式系数"><a href="#5-4-二项式系数" class="headerlink" title="5.4 二项式系数"></a>5.4 二项式系数</h3><p>用 <code>\binom</code> 命令输入，<code>\tbinom</code> 使二项式系数显示为行内公式样式，<code>\dbinom</code> 使二项式系数显示为公式块样式。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\mathrm</span>&#123;C&#125;<span class="built_in">_</span>n<span class="built_in">^</span>r = <span class="keyword">\binom</span>&#123;n&#125;&#123;r&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\mathrm{C}_n^r = \binom{n}{r}</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\tbinom</span>&#123;n&#125;&#123;r&#125; = <span class="keyword">\tbinom</span>&#123;n&#125;&#123;n-r&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\tbinom{n}{r} = \tbinom{n}{n-r}</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span> <span class="keyword">\dbinom</span>&#123;n&#125;&#123;r&#125; = <span class="keyword">\dfrac</span>&#123;n!&#125;&#123;k!<span class="keyword">\,</span>(n-k)!&#125; <span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>$ \dbinom{n}{r} = \dfrac{n!}{k!\,(n-k)!} $</p>
<h2 id="6-矩阵、条件表达式、方程组"><a href="#6-矩阵、条件表达式、方程组" class="headerlink" title="6 矩阵、条件表达式、方程组"></a>6 矩阵、条件表达式、方程组</h2><p>语法为：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;类型&#125;</span><br><span class="line">内容</span><br><span class="line"><span class="keyword">\end</span>&#123;类型&#125;</span><br></pre></td></tr></table></figure>
<p>类型可以是：矩阵 <code>matrix</code>、<code>pmatrix</code>、<code>bmatrix</code>、<code>Bmatrix</code>、<code>vmatrix</code>、<code>Vmatrix</code>，条件表达式 <code>cases</code>，多行对齐方程式 <code>aligned</code>、<code>alignedat</code>。</p>
<p>内容中，<code>&amp;</code> 符号表示每行的对齐内容，<code>\\</code> 表示结尾处换行。</p>
<h3 id="6-1-无框矩阵"><a href="#6-1-无框矩阵" class="headerlink" title="6.1 无框矩阵"></a>6.1 无框矩阵</h3><p>用 <code>&amp;</code> 分隔矩阵列，用 <code>\\</code> 分隔矩阵行。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{matrix}
a & b \\
c & d
\end{matrix}</script><h3 id="6-2-有框矩阵"><a href="#6-2-有框矩阵" class="headerlink" title="6.2 有框矩阵"></a>6.2 有框矩阵</h3><p><code>pmatrix</code> 为圆括号，<code>bmatrix</code> 为方括号，<code>Bmatrix</code> 为花括号，<code>vmatrix</code> 为竖线（行列式），<code>Vmatrix</code> 为双竖线。</p>
<p>使用 <code>\cdots</code> $\cdots$、<code>\ddots</code> $\ddots$、<code>\vdots</code> $\vdots$ 输入省略号。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;pmatrix&#125;</span><br><span class="line">0 <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> 0 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\ddots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> 0 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;pmatrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{pmatrix}
0 & \cdots & 0 \\
\vdots & \ddots & \vdots \\
0 & \cdots & 0 \\
\end{pmatrix}</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;bmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;bmatrix&#125;</span><br><span class="line"><span class="keyword">\quad</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;Bmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;Bmatrix&#125;</span><br><span class="line"><span class="keyword">\quad</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;vmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;vmatrix&#125;</span><br><span class="line"><span class="keyword">\quad</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;Vmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;Vmatrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{bmatrix}
a & b \\
c & d
\end{bmatrix}
\quad
\begin{Bmatrix}
a & b \\
c & d
\end{Bmatrix}
\quad
\begin{vmatrix}
a & b \\
c & d
\end{vmatrix}
\quad
\begin{Vmatrix}
a & b \\
c & d
\end{Vmatrix}</script><h3 id="6-3-条件表达式"><a href="#6-3-条件表达式" class="headerlink" title="6.3 条件表达式"></a>6.3 条件表达式</h3><p>用 <code>&amp;</code> 分隔公式与条件。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">f(n)=</span><br><span class="line"><span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">n/2, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;if &#125; n <span class="keyword">\text</span>&#123; is even&#125; <span class="keyword">\\</span></span><br><span class="line">3n+1, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;if &#125; n <span class="keyword">\text</span>&#123; is odd&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
f(n)=
\begin{cases}
n/2, & \text{if } n \text{ is even} \\
3n+1, & \text{if } n \text{ is odd}
\end{cases}</script><p><code>\text</code> 表示字符为文本格式，而非数学格式，注意空格处理。</p>
<h3 id="6-4-多行等式、同余式"><a href="#6-4-多行等式、同余式" class="headerlink" title="6.4 多行等式、同余式"></a>6.4 多行等式、同余式</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">f(x) <span class="built_in">&amp;</span> = (m+n)<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span> = m<span class="built_in">^</span>2+2mn+n<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{aligned}
f(x) & = (m+n)^2 \\
& = m^2+2mn+n^2 \\
\end{aligned}</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">3<span class="built_in">^</span>&#123;6n+3&#125;+4<span class="built_in">^</span>&#123;6n+3&#125;</span><br><span class="line"><span class="built_in">&amp;</span> <span class="keyword">\equiv</span> (3<span class="built_in">^</span>3)<span class="built_in">^</span>&#123;2n+1&#125;+(4<span class="built_in">^</span>3)<span class="built_in">^</span>&#123;2n+1&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span> <span class="keyword">\equiv</span> 27<span class="built_in">^</span>&#123;2n+1&#125;+64<span class="built_in">^</span>&#123;2n+1&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span> <span class="keyword">\equiv</span> 27<span class="built_in">^</span>&#123;2n+1&#125;+(-27)<span class="built_in">^</span>&#123;2n+1&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span> <span class="keyword">\equiv</span> 27<span class="built_in">^</span>&#123;2n+1&#125;-27<span class="built_in">^</span>&#123;2n+1&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span> <span class="keyword">\equiv</span> 0 <span class="keyword">\pmod</span>&#123;91&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{aligned}
3^{6n+3}+4^{6n+3}
& \equiv (3^3)^{2n+1}+(4^3)^{2n+1} \\
& \equiv 27^{2n+1}+64^{2n+1} \\
& \equiv 27^{2n+1}+(-27)^{2n+1} \\
& \equiv 27^{2n+1}-27^{2n+1} \\
& \equiv 0 \pmod{91} \\
\end{aligned}</script><p><code>\alignedat</code> 用于确定行数的对齐。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;alignedat&#125;&#123;3&#125;</span><br><span class="line">f(x) <span class="built_in">&amp;</span> = (m+n)<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line">g(x) <span class="built_in">&amp;</span> = (m-n)<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span> = m<span class="built_in">^</span>2-2mn+n<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;alignedat&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{alignedat}{3}
f(x) & = (m+n)^2 \\
g(x) & = (m-n)^2 \\
& = m^2-2mn+n^2 \\
\end{alignedat}</script><h3 id="6-5-方程组"><a href="#6-5-方程组" class="headerlink" title="6.5 方程组"></a>6.5 方程组</h3><p><strong>用 <code>cases</code> 表达</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">3x+5y+z=0 <span class="keyword">\\</span></span><br><span class="line">7x-2y+4z=0 <span class="keyword">\\</span></span><br><span class="line">-6x+3y+2z=0 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{cases}
3x+5y+z=0 \\
7x-2y+4z=0 \\
-6x+3y+2z=0 \\
\end{cases}</script><p><strong>用 <code>aligned</code> 表达</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span> <span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">3x+5y+z=0 <span class="keyword">\\</span></span><br><span class="line">7x-2y+4z=0 <span class="keyword">\\</span></span><br><span class="line">-6x+3y+2z=0 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125; <span class="keyword">\right</span>.</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\left\{ \begin{aligned}
3x+5y+z=0 \\
7x-2y+4z=0 \\
-6x+3y+2z=0 \\
\end{aligned} \right.</script><h2 id="7-数组与表格"><a href="#7-数组与表格" class="headerlink" title="7 数组与表格"></a>7 数组与表格</h2><h3 id="7-1-基本数组与表格"><a href="#7-1-基本数组与表格" class="headerlink" title="7.1 基本数组与表格"></a>7.1 基本数组与表格</h3><p>数组和表格以 <code>\begin&#123;array&#125;&#123;定义式&#125;</code> 开头，以 <code>\end&#123;array&#125;</code> 结尾。定义式中定义每列对齐方式，可用 <code>l</code>、<code>c</code>、<code>r</code> 分别代表居左、居中、居右。若插入水平分割线，在行内容间插入 <code>\hline</code>；若插入垂直分割线，在定义式中插入 <code>|</code>。表格内容用 <code>&amp;</code> 分隔列，用 <code>\\</code> 分隔行。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|lcr&#125;</span><br><span class="line">x <span class="built_in">&amp;</span> 1<span class="keyword">\text</span>&#123;(left)&#125; <span class="built_in">&amp;</span> 2<span class="keyword">\text</span>&#123;(center)&#125; <span class="built_in">&amp;</span> 3<span class="keyword">\text</span>&#123;(right)&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">f(x) <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 10 <span class="built_in">&amp;</span> 55.5 <span class="keyword">\\</span></span><br><span class="line">g(x) <span class="built_in">&amp;</span> -1 <span class="built_in">&amp;</span> 100 <span class="built_in">&amp;</span> 9 <span class="keyword">\\</span></span><br><span class="line">h(x) <span class="built_in">&amp;</span> 2i <span class="built_in">&amp;</span> 1000 <span class="built_in">&amp;</span> 1+10i</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|lcr}
x & 1\text{(left)} & 2\text{(center)} & 3\text{(right)} \\
\hline
f(x) & 0 & 10 & 55.5 \\
g(x) & -1 & 100 & 9 \\
h(x) & 2i & 1000 & 1+10i
\end{array}</script><h3 id="7-2-用数组与表格排版"><a href="#7-2-用数组与表格排版" class="headerlink" title="7.2 用数组与表格排版"></a>7.2 用数组与表格排版</h3><p>可以用数组与表格实现类似 <code>aligned</code> 的功能。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;lcr&#125;</span><br><span class="line">z <span class="built_in">&amp;</span> = <span class="built_in">&amp;</span> a <span class="keyword">\\</span></span><br><span class="line">f(x,y,z) <span class="built_in">&amp;</span> = <span class="built_in">&amp;</span> x+y+z</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{lcr}
z & = & a \\
f(x,y,z) & = & x+y+z
\end{array}</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;cccc&#125;</span><br><span class="line">x <span class="built_in">&amp;</span> y <span class="built_in">&amp;</span> x <span class="keyword">\lor</span> y <span class="built_in">&amp;</span> x <span class="keyword">\land</span> y <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 0 <span class="keyword">\\</span></span><br><span class="line">1 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 0 <span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 0 <span class="keyword">\\</span></span><br><span class="line">1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 1</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{cccc}
x & y & x \lor y & x \land y \\
\hline
0 & 0 & 0 & 0 \\
1 & 0 & 1 & 0 \\
0 & 1 & 1 & 0 \\
1 & 1 & 1 & 1
\end{array}</script><h3 id="7-3-嵌套数组与表格"><a href="#7-3-嵌套数组与表格" class="headerlink" title="7.3 嵌套数组与表格"></a>7.3 嵌套数组与表格</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% outer</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c&#125;</span><br><span class="line">	<span class="comment">% inner row 1</span></span><br><span class="line">	<span class="keyword">\begin</span>&#123;array&#125;&#123;cc&#125;</span><br><span class="line">		<span class="comment">% inner row 1 column 1</span></span><br><span class="line">		<span class="keyword">\begin</span>&#123;array&#125;&#123;c|cccc&#125;</span><br><span class="line">		<span class="keyword">\min</span> <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">		<span class="keyword">\hline</span></span><br><span class="line">		0 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 0 <span class="keyword">\\</span></span><br><span class="line">		1 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 1 <span class="keyword">\\</span></span><br><span class="line">		2 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 2 <span class="keyword">\\</span></span><br><span class="line">		3 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3</span><br><span class="line">		<span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line">	<span class="built_in">&amp;</span></span><br><span class="line">		<span class="comment">% inner row 1 column 2</span></span><br><span class="line">		<span class="keyword">\begin</span>&#123;array&#125;&#123;c|cccc&#125;</span><br><span class="line">		<span class="keyword">\max</span> <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">		<span class="keyword">\hline</span></span><br><span class="line">		0 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">		1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">		2 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">		3 <span class="built_in">&amp;</span> 3 <span class="built_in">&amp;</span> 3 <span class="built_in">&amp;</span> 3 <span class="built_in">&amp;</span> 3</span><br><span class="line">		<span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line">	<span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\\</span></span><br><span class="line">	<span class="comment">% inner row 2</span></span><br><span class="line">	<span class="keyword">\begin</span>&#123;array&#125;&#123;c|cccc&#125;</span><br><span class="line">	<span class="keyword">\Delta</span> <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">	<span class="keyword">\hline</span></span><br><span class="line">	0 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">	1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="keyword">\\</span></span><br><span class="line">	2 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 0 <span class="built_in">&amp;</span> 1 <span class="keyword">\\</span></span><br><span class="line">	3 <span class="built_in">&amp;</span> 3 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 0</span><br><span class="line">	<span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
% outer
\begin{array}{c}
    % inner row 1
    \begin{array}{cc}
        % inner row 1 column 1
        \begin{array}{c|cccc}
        \min & 0 & 1 & 2 & 3 \\
        \hline
        0 & 0 & 0 & 0 & 0 \\
        1 & 0 & 1 & 1 & 1 \\
        2 & 0 & 1 & 2 & 2 \\
        3 & 0 & 1 & 2 & 3
        \end{array}
    &
        % inner row 1 column 2
        \begin{array}{c|cccc}
        \max & 0 & 1 & 2 & 3 \\
        \hline
        0 & 0 & 1 & 2 & 3 \\
        1 & 1 & 1 & 2 & 3 \\
        2 & 2 & 2 & 2 & 3 \\
        3 & 3 & 3 & 3 & 3
        \end{array}
    \end{array}
\\
    % inner row 2
    \begin{array}{c|cccc}
    \Delta & 0 & 1 & 2 & 3 \\
    \hline
    0 & 0 & 1 & 2 & 3 \\
    1 & 1 & 0 & 1 & 2 \\
    2 & 2 & 1 & 0 & 1 \\
    3 & 3 & 2 & 1 & 0
    \end{array}
\end{array}</script><h3 id="7-4-分割矩阵"><a href="#7-4-分割矩阵" class="headerlink" title="7.4 分割矩阵"></a>7.4 分割矩阵</h3><p>在需要分割处的定义式加入 <code>|</code>。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span>[</span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;cc|c&#125;</span><br><span class="line">1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">4 <span class="built_in">&amp;</span> 5 <span class="built_in">&amp;</span> 6</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\right</span>]</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\left[
\begin{array}{cc|c}
1 & 2 & 3 \\
4 & 5 & 6
\end{array}
\right]</script><h2 id="8-字体"><a href="#8-字体" class="headerlink" title="8 字体"></a>8 字体</h2><p>普通字符可以通过 <code>\large</code>、<code>\small</code> 控制大小。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">A, <span class="keyword">\large</span>&#123;A&#125;, <span class="keyword">\small</span>&#123;A&#125;</span><br></pre></td></tr></table></figure>
<p>$ A, \large{A}, \small{A} $</p>
<h3 id="8-1-希腊字母"><a href="#8-1-希腊字母" class="headerlink" title="8.1 希腊字母"></a>8.1 希腊字母</h3><p>输入 <code>\</code> 加其字母名称即可，大写字母将名称首字母大写。注意本环境下部分大写希腊字母不支持转义，需要用相似的 <em>拉丁字母</em> 替代。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|l|c|l&#125;</span><br><span class="line">A <span class="keyword">\alpha</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">A \alpha</span>| <span class="built_in">&amp;</span> N <span class="keyword">\nu</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">N \nu</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">B <span class="keyword">\beta</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">B \beta</span>| <span class="built_in">&amp;</span> <span class="keyword">\Xi</span> <span class="keyword">\xi</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Xi \xi</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\Gamma</span> <span class="keyword">\gamma</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Gamma \gamma</span>| <span class="built_in">&amp;</span> O <span class="keyword">\omicron</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">O \omicron</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\Delta</span> <span class="keyword">\delta</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Delta \delta</span>| <span class="built_in">&amp;</span> <span class="keyword">\Pi</span> <span class="keyword">\pi</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Pi \pi</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">E <span class="keyword">\epsilon</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">E \epsilon</span>| <span class="built_in">&amp;</span> P <span class="keyword">\rho</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">P \rho</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">Z <span class="keyword">\zeta</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">Z \zeta</span>| <span class="built_in">&amp;</span> <span class="keyword">\Sigma</span> <span class="keyword">\sigma</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Sigma \sigma</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">H <span class="keyword">\eta</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">H \eta</span>| <span class="built_in">&amp;</span> T <span class="keyword">\tau</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">T \tau</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\Theta</span> <span class="keyword">\theta</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Theta \theta</span>| <span class="built_in">&amp;</span> <span class="keyword">\Upsilon</span> <span class="keyword">\upsilon</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Upsilon \upsilon</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">I <span class="keyword">\iota</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">I \iota</span>| <span class="built_in">&amp;</span> <span class="keyword">\Phi</span> <span class="keyword">\phi</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Phi \phi</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">K <span class="keyword">\kappa</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">K \kappa</span>| <span class="built_in">&amp;</span> X <span class="keyword">\chi</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">X \chi</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\Lambda</span> <span class="keyword">\lambda</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Lambda \lambda</span>| <span class="built_in">&amp;</span> <span class="keyword">\Psi</span> <span class="keyword">\psi</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Psi \psi</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">M <span class="keyword">\mu</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">M \mu</span>| <span class="built_in">&amp;</span> <span class="keyword">\Omega</span> <span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\verb</span>|<span class="string">\Omega \omega</span>| <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|l|c|l}
A \alpha & \verb|A \alpha| & N \nu & \verb|N \nu| \\
\hline
B \beta & \verb|B \beta| & \Xi \xi & \verb|\Xi \xi| \\
\hline
\Gamma \gamma & \verb|\Gamma \gamma| & O \omicron & \verb|O \omicron| \\
\hline
\Delta \delta & \verb|\Delta \delta| & \Pi \pi & \verb|\Pi \pi| \\
\hline
E \epsilon & \verb|E \epsilon| & P \rho & \verb|P \rho| \\
\hline
Z \zeta & \verb|Z \zeta| & \Sigma \sigma & \verb|\Sigma \sigma| \\
\hline
H \eta & \verb|H \eta| & T \tau & \verb|T \tau| \\
\hline
\Theta \theta & \verb|\Theta \theta| & \Upsilon \upsilon & \verb|\Upsilon \upsilon| \\
\hline
I \iota & \verb|I \iota| & \Phi \phi & \verb|\Phi \phi| \\
\hline
K \kappa & \verb|K \kappa| & X \chi & \verb|X \chi| \\
\hline
\Lambda \lambda & \verb|\Lambda \lambda| & \Psi \psi & \verb|\Psi \psi| \\
\hline
M \mu & \verb|M \mu| & \Omega \omega & \verb|\Omega \omega| \\
\end{array}</script><p>伽玛函数可以用 <code>digamma</code> 表示，另外部分变量形式可以用 <code>\var-</code> 开头。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\digamma</span>, <span class="keyword">\varepsilon</span>, <span class="keyword">\vartheta</span>, <span class="keyword">\varkappa</span>, <span class="keyword">\varpi</span>, <span class="keyword">\varrho</span>, <span class="keyword">\varsigma</span>, <span class="keyword">\varphi</span></span><br></pre></td></tr></table></figure>
<p>$ \digamma, \varepsilon, \vartheta, \varkappa, \varpi, \varrho, \varsigma, \varphi $</p>
<h3 id="8-2-希伯来符号"><a href="#8-2-希伯来符号" class="headerlink" title="8.2 希伯来符号"></a>8.2 希伯来符号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\aleph</span>, <span class="keyword">\beth</span>, <span class="keyword">\gimel</span>, <span class="keyword">\daleth</span></span><br></pre></td></tr></table></figure>
<p>$ \aleph, \beth, \gimel, \daleth $</p>
<h3 id="8-3-特殊字体形式"><a href="#8-3-特殊字体形式" class="headerlink" title="8.3 特殊字体形式"></a>8.3 特殊字体形式</h3><h4 id="8-3-1-黑板报粗体"><a href="#8-3-1-黑板报粗体" class="headerlink" title="8.3.1 黑板报粗体"></a>8.3.1 黑板报粗体</h4><p>用 <code>\mathbb&#123;text&#125;</code> 或 <code>\Bbb&#123;text&#125;</code> 表示。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathbb&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathbb</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathbb</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathbb</span>&#123;0123&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;Bbb&#125; <span class="built_in">&amp;</span> <span class="keyword">\Bbb</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\Bbb</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\Bbb</span>&#123;0123&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccc}
\text{defalut} & SAMPLE & sample & 0123 \\
\hline
\text{mathbb} & \mathbb{SAMPLE} & \mathbb{sample} & \mathbb{0123} \\
\hline
\text{Bbb} & \Bbb{SAMPLE} & \Bbb{sample} & \Bbb{0123}
\end{array}</script><h4 id="8-3-2-粗体"><a href="#8-3-2-粗体" class="headerlink" title="8.3.2 粗体"></a>8.3.2 粗体</h4><p>用 <code>\mathbf&#123;text&#125;</code> 或 <code>&#123;\bf text&#125;</code> 表示，注意控制范围，对特殊符号无效。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathbf&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathbf</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathbf</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathbf</span>&#123;0123&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;bf&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\bf</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\bf</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\bf</span> 0123&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccc}
\text{defalut} & SAMPLE & sample & 0123 \\
\hline
\text{mathbf} & \mathbf{SAMPLE} & \mathbf{sample} & \mathbf{0123} \\
\hline
\text{bf} & {\bf SAMPLE} & {\bf sample} & {\bf 0123}
\end{array}</script><h4 id="8-3-3-粗体符号"><a href="#8-3-3-粗体符号" class="headerlink" title="8.3.3 粗体符号"></a>8.3.3 粗体符号</h4><p>用 <code>\boldsymbol&#123;text&#125;</code> 表示，对特殊符号有效。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|cccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="built_in">&amp;</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span> <span class="built_in">&amp;</span> <span class="keyword">\sin</span><span class="keyword">\in</span><span class="keyword">\to</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;blodsymbol&#125; <span class="built_in">&amp;</span> <span class="keyword">\boldsymbol</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\boldsymbol</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\boldsymbol</span>&#123;0123&#125; <span class="built_in">&amp;</span> <span class="keyword">\boldsymbol</span>&#123;<span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\boldsymbol</span>&#123;<span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\boldsymbol</span>&#123;<span class="keyword">\sin</span><span class="keyword">\in</span><span class="keyword">\to</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|cccccc}
\text{defalut} & SAMPLE & sample & 0123 & \delta\theta\sigma\omega & \Delta\Theta\Sigma\Omega & \sin\in\to \\
\hline
\text{blodsymbol} & \boldsymbol{SAMPLE} & \boldsymbol{sample} & \boldsymbol{0123} & \boldsymbol{\delta\theta\sigma\omega} & \boldsymbol{\Delta\Theta\Sigma\Omega} & \boldsymbol{\sin\in\to} \\
\end{array}</script><h4 id="8-3-4-斜体（意大利体）"><a href="#8-3-4-斜体（意大利体）" class="headerlink" title="8.3.4 斜体（意大利体）"></a>8.3.4 斜体（意大利体）</h4><p>用 <code>\mathit&#123;text&#125;</code> 或 <code>&#123;\it text&#125;</code> 或 <code>&#123;\mit text&#125;</code> 表示，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="built_in">&amp;</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathit&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathit</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathit</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathit</span>&#123;0123&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathit</span>&#123;<span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathit</span>&#123;<span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;it&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\it</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\it</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\it</span> 0123&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\it</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\it</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mit&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\mit</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\mit</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\mit</span> 0123&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\mit</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\mit</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 & \delta\theta\sigma\omega & \Delta\Theta\Sigma\Omega \\
\hline
\text{mathit} & \mathit{SAMPLE} & \mathit{sample} & \mathit{0123} & \mathit{\delta\theta\sigma\omega} & \mathit{\Delta\Theta\Sigma\Omega} \\
\hline
\text{it} & {\it SAMPLE} & {\it sample} & {\it 0123} & {\it \delta\theta\sigma\omega} & {\it \Delta\Theta\Sigma\Omega} \\
\hline
\text{mit} & {\mit SAMPLE} & {\mit sample} & {\mit 0123} & {\mit \delta\theta\sigma\omega} & {\mit \Delta\Theta\Sigma\Omega} \\
\end{array}</script><p>可以看到 <code>\mathit</code> 与 <code>\it</code> 等效；对于 <em>拉丁字母、小写希腊字母</em>，默认字体即为 <code>\mit</code>。</p>
<h4 id="8-3-5-罗马体"><a href="#8-3-5-罗马体" class="headerlink" title="8.3.5 罗马体"></a>8.3.5 罗马体</h4><p>用 <code>\mathrm&#123;text&#125;</code> 或 <code>&#123;\rm text&#125;</code> 表示，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="built_in">&amp;</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathrm&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathrm</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathrm</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathrm</span>&#123;0123&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathrm</span>&#123;<span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathrm</span>&#123;<span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;rm&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\rm</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\rm</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\rm</span> 0123&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\rm</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\rm</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 & \delta\theta\sigma\omega & \Delta\Theta\Sigma\Omega \\
\hline
\text{mathrm} & \mathrm{SAMPLE} & \mathrm{sample} & \mathrm{0123} & \mathrm{\delta\theta\sigma\omega} & \mathrm{\Delta\Theta\Sigma\Omega} \\
\hline
\text{rm} & {\rm SAMPLE} & {\rm sample} & {\rm 0123} & {\rm \delta\theta\sigma\omega} & {\rm \Delta\Theta\Sigma\Omega} \\
\end{array}</script><p>可以看到 <em>小写希腊字母</em> 不支持罗马体；对于 <em>阿拉伯数字、大写希腊字母</em>，默认字体即为 <code>\rm</code>。</p>
<h4 id="8-3-6-等线体-无衬线体"><a href="#8-3-6-等线体-无衬线体" class="headerlink" title="8.3.6 等线体/无衬线体"></a>8.3.6 等线体/无衬线体</h4><p>用 <code>\mathsf&#123;text&#125;</code> 或 <code>&#123;\sf text&#125;</code> 表示，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="built_in">&amp;</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathsf&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathsf</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathsf</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathsf</span>&#123;0123&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathsf</span>&#123;<span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathsf</span>&#123;<span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;sf&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\sf</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\sf</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\sf</span> 0123&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\sf</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\sf</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 & \delta\theta\sigma\omega & \Delta\Theta\Sigma\Omega \\
\hline
\text{mathsf} & \mathsf{SAMPLE} & \mathsf{sample} & \mathsf{0123} & \mathsf{\delta\theta\sigma\omega} & \mathsf{\Delta\Theta\Sigma\Omega} \\
\hline
\text{sf} & {\sf SAMPLE} & {\sf sample} & {\sf 0123} & {\sf \delta\theta\sigma\omega} & {\sf \Delta\Theta\Sigma\Omega} \\
\end{array}</script><p>可以看到 <em>小写希腊字母</em> 不支持无衬线体。</p>
<h4 id="8-3-7-手写体"><a href="#8-3-7-手写体" class="headerlink" title="8.3.7 手写体"></a>8.3.7 手写体</h4><p>用 <code>\mathscr&#123;text&#125;</code> 或 <code>&#123;\scr text&#125;</code> 表示，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="built_in">&amp;</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathscr&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathscr</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathscr</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathscr</span>&#123;0123&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathscr</span>&#123;<span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathscr</span>&#123;<span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;scr&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scr</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scr</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scr</span> 0123&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scr</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scr</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 & \delta\theta\sigma\omega & \Delta\Theta\Sigma\Omega \\
\hline
\text{mathscr} & \mathscr{SAMPLE} & \mathscr{sample} & \mathscr{0123} & \mathscr{\delta\theta\sigma\omega} & \mathscr{\Delta\Theta\Sigma\Omega} \\
\hline
\text{scr} & {\scr SAMPLE} & {\scr sample} & {\scr 0123} & {\scr \delta\theta\sigma\omega} & {\scr \Delta\Theta\Sigma\Omega} \\
\end{array}</script><p>可以看到 <em>阿拉伯数字、大写希腊字母</em> 显示结果与斜体等效；<em>小写希腊字母</em> 不改变。</p>
<h4 id="8-3-8-花体"><a href="#8-3-8-花体" class="headerlink" title="8.3.8 花体"></a>8.3.8 花体</h4><p>用 <code>\mathcal&#123;text&#125;</code> 或 <code>&#123;\cal text&#125;</code> 表示，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="built_in">&amp;</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathcal&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathcal</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathcal</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathcal</span>&#123;0123&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathcal</span>&#123;<span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathcal</span>&#123;<span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;cal&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\cal</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\cal</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\cal</span> 0123&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\cal</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\cal</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 & \delta\theta\sigma\omega & \Delta\Theta\Sigma\Omega \\
\hline
\text{mathcal} & \mathcal{SAMPLE} & \mathcal{sample} & \mathcal{0123} & \mathcal{\delta\theta\sigma\omega} & \mathcal{\Delta\Theta\Sigma\Omega} \\
\hline
\text{cal} & {\cal SAMPLE} & {\cal sample} & {\cal 0123} & {\cal \delta\theta\sigma\omega} & {\cal \Delta\Theta\Sigma\Omega} \\
\end{array}</script><p>可以看到 <em>阿拉伯数字、大写希腊字母</em> 显示结果与斜体等效；<em>小写拉丁字母、小写希腊字母</em> 不改变。</p>
<h4 id="8-3-9-打字机体"><a href="#8-3-9-打字机体" class="headerlink" title="8.3.9 打字机体"></a>8.3.9 打字机体</h4><p>用 <code>\mathtt&#123;text&#125;</code> 或 <code>&#123;\tt text&#125;</code> 表示，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="built_in">&amp;</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span> <span class="built_in">&amp;</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathtt&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathtt</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathtt</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathtt</span>&#123;0123&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathtt</span>&#123;<span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathtt</span>&#123;<span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;tt&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\tt</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\tt</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\tt</span> 0123&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\tt</span> <span class="keyword">\delta</span><span class="keyword">\theta</span><span class="keyword">\sigma</span><span class="keyword">\omega</span>&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\tt</span> <span class="keyword">\Delta</span><span class="keyword">\Theta</span><span class="keyword">\Sigma</span><span class="keyword">\Omega</span>&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 & \delta\theta\sigma\omega & \Delta\Theta\Sigma\Omega \\
\hline
\text{mathtt} & \mathtt{SAMPLE} & \mathtt{sample} & \mathtt{0123} & \mathtt{\delta\theta\sigma\omega} & \mathtt{\Delta\Theta\Sigma\Omega} \\
\hline
\text{tt} & {\tt SAMPLE} & {\tt sample} & {\tt 0123} & {\tt \delta\theta\sigma\omega} & {\tt \Delta\Theta\Sigma\Omega} \\
\end{array}</script><p>可以看到 <em>小写希腊字母</em> 不支持打字机体。</p>
<h4 id="8-3-10-Fraktur-体-德国哥特体"><a href="#8-3-10-Fraktur-体-德国哥特体" class="headerlink" title="8.3.10 Fraktur 体/德国哥特体"></a>8.3.10 Fraktur 体/德国哥特体</h4><p>用 <code>\mathfrak&#123;text&#125;</code> 或 <code>&#123;\frak text&#125;</code> 表示，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;mathfrak&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathfrak</span>&#123;SAMPLE&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathfrak</span>&#123;sample&#125; <span class="built_in">&amp;</span> <span class="keyword">\mathfrak</span>&#123;0123&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;frak&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\frak</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\frak</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\frak</span> 0123&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 \\
\hline
\text{mathfrak} & \mathfrak{SAMPLE} & \mathfrak{sample} & \mathfrak{0123} \\
\hline
\text{frak} & {\frak SAMPLE} & {\frak sample} & {\frak 0123} \\
\end{array}</script><h4 id="8-3-11-小型手写体"><a href="#8-3-11-小型手写体" class="headerlink" title="8.3.11 小型手写体"></a>8.3.11 小型手写体</h4><p>用 <code>&#123;\scriptstyle text&#125;</code> 命令，同时可以嵌套其他字体。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|ccccc&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;defalut&#125; <span class="built_in">&amp;</span> SAMPLE <span class="built_in">&amp;</span> sample <span class="built_in">&amp;</span> 0123 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;scriptstyle&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scriptstyle</span> SAMPLE&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scriptstyle</span> sample&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scriptstyle</span> 0123&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\text</span>&#123;scriptstyle+text&#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scriptstyle</span> <span class="keyword">\text</span>&#123;SAMPLE&#125; &#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scriptstyle</span> <span class="keyword">\text</span>&#123;sample&#125; &#125; <span class="built_in">&amp;</span> &#123;<span class="keyword">\scriptstyle</span> <span class="keyword">\text</span>&#123;0123&#125; &#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{array}{c|ccccc}
\text{defalut} & SAMPLE & sample & 0123 \\
\hline
\text{scriptstyle} & {\scriptstyle SAMPLE} & {\scriptstyle sample} & {\scriptstyle 0123} \\
\hline
\text{scriptstyle+text} & {\scriptstyle \text{SAMPLE} } & {\scriptstyle \text{sample} } & {\scriptstyle \text{0123} } \\
\end{array}</script><h3 id="8-4-混合字体"><a href="#8-4-混合字体" class="headerlink" title="8.4 混合字体"></a>8.4 混合字体</h3><p>正常情况下，拉丁字母会被当做变量斜体显示。若需要非斜体显示，可以用 <code>\text</code> 命令。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">abc <span class="keyword">\quad</span> <span class="keyword">\text</span>&#123;abc&#125;</span><br></pre></td></tr></table></figure>
<p>$ abc \quad \text{abc} $</p>
<p><code>\text</code> 中仍可以使用 <code>$ 公式 $</code> 插入公式。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">f(n)=</span><br><span class="line"><span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">n/2, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;if <span class="built_in">$</span>n<span class="built_in">$</span> is even&#125; <span class="keyword">\\</span></span><br><span class="line">3n+1, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;if <span class="built_in">$</span>n<span class="built_in">$</span> is odd&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
f(n)=
\begin{cases}
n/2, & \text{if $n$ is even} \\
3n+1, & \text{if $n$ is odd}
\end{cases}</script><p>混合输入时，注意空格显示。可以使用 <code>~</code> 或 <code>\</code> 加空格强制显示空格。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line"><span class="keyword">\text</span>&#123;if&#125; n <span class="keyword">\text</span>&#123;is even&#125; <span class="keyword">\\</span> <span class="comment">% Bad</span></span><br><span class="line"><span class="keyword">\text</span>&#123;if &#125; n <span class="keyword">\text</span>&#123; is even&#125; <span class="keyword">\\</span> <span class="comment">% Good</span></span><br><span class="line"><span class="keyword">\text</span>&#123;if&#125;~n~<span class="keyword">\text</span>&#123;is even&#125; <span class="keyword">\\</span> <span class="comment">% Good</span></span><br><span class="line"><span class="keyword">\text</span>&#123;if&#125;<span class="keyword">\ </span>n<span class="keyword">\ </span><span class="keyword">\text</span>&#123;is even&#125; <span class="keyword">\\</span> <span class="comment">% Good</span></span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{matrix}
\text{if} n \text{is even} \\ % Bad
\text{if } n \text{ is even} \\ % Good
\text{if}~n~\text{is even} \\ % Good
\text{if}\ n\ \text{is even} \\ % Good
\end{matrix}</script><h2 id="9-括号"><a href="#9-括号" class="headerlink" title="9 括号"></a>9 括号</h2><p>圆括号 <code>()</code>、方括号 <code>[]</code> 表示其本身，花括号 <code>&#123;&#125;</code> 需要 <code>\</code> 转义表示。</p>
<p><code>\left</code> 和 <code>\right</code> 命令用来生成自动匹配高度括号或括号型字符。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">\dfrac</span>&#123;1&#125;&#123;2&#125;)<span class="built_in">^</span>2 <span class="keyword">\quad</span> <span class="keyword">\left</span>( <span class="keyword">\dfrac</span>&#123;1&#125;&#123;2&#125; <span class="keyword">\right</span>) <span class="built_in">^</span>2</span><br></pre></td></tr></table></figure>
<p>$ (\dfrac{1}{2})^2 \quad \left( \dfrac{1}{2} \right) ^2 $</p>
<h3 id="9-1-圆括号、方括号、花括号"><a href="#9-1-圆括号、方括号、花括号" class="headerlink" title="9.1 圆括号、方括号、花括号"></a>9.1 圆括号、方括号、花括号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span>( <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span>) <span class="keyword">\quad</span> <span class="keyword">\left</span>[ <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span>] <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\&#123;</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\&#125;</span></span><br></pre></td></tr></table></figure>
<p>$ \left( \dfrac ab \right) \quad \left[ \dfrac ab \right] \quad \left\{ \dfrac ab \right\} $</p>
<h3 id="9-2-角括号、单竖线（绝对值）、双竖线（范数）"><a href="#9-2-角括号、单竖线（绝对值）、双竖线（范数）" class="headerlink" title="9.2 角括号、单竖线（绝对值）、双竖线（范数）"></a>9.2 角括号、单竖线（绝对值）、双竖线（范数）</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span><span class="keyword">\langle</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\rangle</span> <span class="keyword">\quad</span> <span class="keyword">\left</span>| <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span>| <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\|</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\|</span></span><br></pre></td></tr></table></figure>
<p>$ \left\langle \dfrac ab \right\rangle \quad \left| \dfrac ab \right| \quad \left\| \dfrac ab \right\| $</p>
<h3 id="9-3-取整函数"><a href="#9-3-取整函数" class="headerlink" title="9.3 取整函数"></a>9.3 取整函数</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span><span class="keyword">\lfloor</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\rfloor</span> <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\lceil</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\rceil</span></span><br></pre></td></tr></table></figure>
<p>$ \left\lfloor \dfrac ab \right\rfloor \quad \left\lceil \dfrac ab \right\rceil $</p>
<h3 id="9-4-斜线与箭头"><a href="#9-4-斜线与箭头" class="headerlink" title="9.4 斜线与箭头"></a>9.4 斜线与箭头</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span>/ <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\backslash</span></span><br></pre></td></tr></table></figure>
<p>$ \left/ \dfrac ab \right\backslash $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span><span class="keyword">\uparrow</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\downarrow</span> <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\Uparrow</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\Downarrow</span> <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\updownarrow</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\Updownarrow</span></span><br></pre></td></tr></table></figure>
<p>$ \left\uparrow \dfrac ab \right\downarrow \quad \left\Uparrow \dfrac ab \right\Downarrow \quad \left\updownarrow \dfrac ab \right\Updownarrow $</p>
<h3 id="9-5-混合括号"><a href="#9-5-混合括号" class="headerlink" title="9.5 混合括号"></a>9.5 混合括号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span>[ <span class="keyword">\dfrac</span>&#123;1&#125;&#123;2&#125;, 1 <span class="keyword">\right</span>) <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\langle</span> <span class="keyword">\psi</span> <span class="keyword">\right</span>|</span><br></pre></td></tr></table></figure>
<p>$ \left[ \dfrac{1}{2}, 1 \right) \quad \left\langle \psi \right| $</p>
<h3 id="9-6-单边括号"><a href="#9-6-单边括号" class="headerlink" title="9.6 单边括号"></a>9.6 单边括号</h3><p>用 <code>\left.</code> 或 <code>\right.</code> 匹配另一边。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;l&#125;</span><br><span class="line">x+y=3, <span class="keyword">\\</span></span><br><span class="line">2x+3y=8</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\right</span>.</span><br></pre></td></tr></table></figure>
<p>$ \left\{<br>\begin{array}{l}<br>x+y=3, \\<br>2x+3y=8<br>\end{array}<br>\right. $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span>. <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\&#125;</span></span><br></pre></td></tr></table></figure>
<p>$ \left. \dfrac ab \right\} $</p>
<h3 id="9-7-控制括号大小"><a href="#9-7-控制括号大小" class="headerlink" title="9.7 控制括号大小"></a>9.7 控制括号大小</h3><p>使用 <code>\big</code>、<code>\Big</code>、<code>\bigg</code>、<code>\Bigg</code> 控制括号大小。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span> <span class="keyword">\left</span>[ <span class="keyword">\left</span>( <span class="keyword">\left</span>| <span class="keyword">\left</span><span class="keyword">\|</span> a <span class="keyword">\right</span><span class="keyword">\|</span> +1 <span class="keyword">\right</span>| -2 <span class="keyword">\right</span>) +3 <span class="keyword">\right</span>] -4 <span class="keyword">\right</span><span class="keyword">\&#125;</span>*5</span><br></pre></td></tr></table></figure>
<p>$ \left\{ \left[ \left( \left| \left\| a \right\| +1 \right| -2 \right) +3 \right] -4 \right\}*5 $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\Bigg</span><span class="keyword">\&#123;</span> <span class="keyword">\bigg</span>[ <span class="keyword">\Big</span>( <span class="keyword">\big</span>| <span class="keyword">\left</span><span class="keyword">\|</span> a <span class="keyword">\right</span><span class="keyword">\|</span> +1 <span class="keyword">\big</span>| -2 <span class="keyword">\Big</span>) +3 <span class="keyword">\bigg</span>] -4 <span class="keyword">\Bigg</span><span class="keyword">\&#125;</span>*5</span><br></pre></td></tr></table></figure>
<p>$ \Bigg\{ \bigg[ \Big( \big| \left\| a \right\| +1 \big| -2 \Big) +3 \bigg] -4 \Bigg\}*5 $</p>
<h2 id="10-空格"><a href="#10-空格" class="headerlink" title="10 空格"></a>10 空格</h2><p>LaTeX 会忽略公式中的空格，空格控制从宽到窄依次为：</p>
<p><strong>双 quad 空格</strong>：2 个字符宽</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\alpha</span> <span class="keyword">\qquad</span> <span class="keyword">\beta</span></span><br></pre></td></tr></table></figure>
<p>$ \alpha \qquad \beta $</p>
<p><strong>quad 空格</strong>：1 个字符宽</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\alpha</span> <span class="keyword">\quad</span> <span class="keyword">\beta</span></span><br></pre></td></tr></table></figure>
<p>$ \alpha \quad \beta $</p>
<p><strong>空格</strong>：1/3 个字符宽</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\alpha</span> <span class="keyword">\ </span><span class="keyword">\beta</span> ~ <span class="keyword">\gamma</span></span><br></pre></td></tr></table></figure>
<p>$ \alpha \ \beta ~ \gamma $</p>
<p><strong>中空格</strong>：2/7 个字符宽</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\alpha</span> <span class="keyword">\;</span> <span class="keyword">\beta</span></span><br></pre></td></tr></table></figure>
<p>$ \alpha \; \beta $</p>
<p><strong>小空格</strong>：1/6 个字符宽</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\alpha</span> <span class="keyword">\,</span> <span class="keyword">\beta</span></span><br></pre></td></tr></table></figure>
<p>$ \alpha \, \beta $</p>
<p><strong>无空格</strong>：0 个字符宽</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\alpha</span> <span class="keyword">\beta</span></span><br></pre></td></tr></table></figure>
<p>$ \alpha \beta $</p>
<p><strong>紧贴</strong>：-1/6 个字符宽</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\alpha</span> <span class="keyword">\!</span> <span class="keyword">\beta</span></span><br></pre></td></tr></table></figure>
<p>$ \alpha \! \beta $</p>
<h2 id="11-颜色"><a href="#11-颜色" class="headerlink" title="11 颜色"></a>11 颜色</h2><p>使用 <code>&#123;\color&#123;color&#125;&#123;text&#125; &#125;</code> 更改文字颜色，注意控制范围。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\color</span>&#123;red&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;yellow&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;blue&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;green&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;purple&#125;&#123;text&#125;</span><br></pre></td></tr></table></figure>
<p>$ \color{red}{text} \quad \color{yellow}{text} \quad \color{blue}{text} \quad \color{green}{text} \quad \color{purple}{text} $</p>
<p>color 名小写时表示简单色调，首字母大写时表示较为复杂的色调。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\color</span>&#123;Red&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;Orange&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;RoyalBlue&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;Violet&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123;LimeGreen&#125;&#123;text&#125;</span><br></pre></td></tr></table></figure>
<p>$ \color{Red}{text} \quad \color{Orange}{text} \quad \color{RoyalBlue}{text} \quad \color{Violet}{text} \quad \color{LimeGreen}{text} $</p>
<p>使用 <code>&#123;\color&#123; #rgb&#125;&#123;text&#125; &#125;</code> 选择更多颜色，<code>rgb</code> 的范围是 <code>0-9</code>、<code>A-F</code>。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\color</span>&#123; <span class="params">#0</span>FF&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123; <span class="params">#0</span>0F&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123; <span class="params">#</span>F0F&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123; <span class="params">#0</span>F0&#125;&#123;text&#125; <span class="keyword">\quad</span> <span class="keyword">\color</span>&#123; <span class="params">#6</span>CF&#125;&#123;text&#125;</span><br></pre></td></tr></table></figure>
<p>$ \color{ #0FF}{text} \quad \color{ #00F}{text} \quad \color{ #F0F}{text} \quad \color{ #0F0}{text} \quad \color{ #6CF}{text} $</p>
<h2 id="12-小技巧"><a href="#12-小技巧" class="headerlink" title="12 小技巧"></a>12 小技巧</h2><ol>
<li><p>如何打出如下格式？</p>
<p>$ \mathop{x} \limits_a^b $</p>
<p>由于 <code>\limits</code> 只能用在运算符（如 <code>\sum</code>）后，所以可以用 <code>\mathop</code> 命令使字母变成运算符。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mathop</span>&#123;x&#125; <span class="keyword">\limits</span><span class="built_in">_</span>a<span class="built_in">^</span>b</span><br></pre></td></tr></table></figure>
<p>也可以选择 <code>\overset</code> 和 <code>\underset</code> 实现。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\underset</span>&#123;a&#125;&#123;<span class="keyword">\overset</span>&#123;b&#125;&#123;x&#125; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>|</code> 和 <code>\vert</code>、<code>\mid</code> 的区别：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">| <span class="keyword">\quad</span> <span class="keyword">\vert</span> <span class="keyword">\quad</span> <span class="keyword">\mid</span></span><br></pre></td></tr></table></figure>
<p>$ | \quad \vert \quad \mid $</p>
<p>分以下情况讨论：</p>
<ul>
<li><p><strong>绝对值</strong></p>
<p><code>|</code> 与 <code>\vert</code> 均可，还可以使用 <code>\lvert</code>、<code>\rvert</code>。注意到下例中，<code>-2</code> 左侧的 <code>\vert</code> 被识别为 <em>普通元素</em>，而非 <em>关系元素</em>，因此在非匹配情况下，不建议使用 <code>\vert</code>。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">|-1| <span class="keyword">\quad</span> <span class="keyword">\vert</span> -2 <span class="keyword">\vert</span> <span class="keyword">\quad</span> <span class="keyword">\lvert</span> -3 <span class="keyword">\rvert</span></span><br></pre></td></tr></table></figure>
<p>$ |-1| \quad \vert -2 \vert \quad \lvert -3 \rvert $</p>
<p>当遇到分数时，使用 <code>\left</code>、<code>\right</code> 匹配高度。注意 <code>\lvert</code>、<code>\rvert</code> 并不会匹配高度！</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lvert</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\rvert</span> <span class="keyword">\quad</span> <span class="keyword">\left</span>| <span class="keyword">\dfrac</span> cd <span class="keyword">\right</span>| <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\vert</span> <span class="keyword">\dfrac</span> ef <span class="keyword">\right</span><span class="keyword">\vert</span></span><br></pre></td></tr></table></figure>
<p>$ \lvert \dfrac ab \rvert \quad \left| \dfrac cd \right| \quad \left\vert \dfrac ef \right\vert $</p>
</li>
<li><p><strong>整除</strong></p>
<p>用关系符号 <code>\mid</code> 表示。如：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">a <span class="keyword">\mid</span> b</span><br></pre></td></tr></table></figure>
<p>$ a \mid b $</p>
<p>表示 $a$ 能整除 $b$，即 $b$ 能被 $a$ 整除，如 $ 3 \mid 9 $ 表示 9 能被 3 整除。</p>
<p>注意 <code>\mid</code> 不可伸长，伸长需要借助 <code>|</code>，使用单边匹配 <code>|</code> 的方法，或 <code>\middle</code> 命令（<code>\middle</code> 需要左右为 <code>\left.</code> 及 <code>\right.</code>）。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\dfrac</span> ab <span class="keyword">\mid</span> c <span class="keyword">\quad</span> <span class="keyword">\left</span>. <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span>| c <span class="keyword">\quad</span> <span class="keyword">\left</span>. <span class="keyword">\dfrac</span> ab <span class="keyword">\middle</span>| c <span class="keyword">\right</span>.</span><br></pre></td></tr></table></figure>
<p>$ \dfrac ab \mid c \quad \left. \dfrac ab \right| c \quad \left. \dfrac ab \middle| c \right. $</p>
</li>
<li><p><strong>集合</strong></p>
<p>同上，应用 <code>\mid</code>，伸长时用 <code>\middle|</code> 替代。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span> x <span class="keyword">\mid</span> x <span class="keyword">\in</span> <span class="keyword">\mathbb</span>&#123;R&#125; <span class="keyword">\text</span>&#123; and &#125; x <span class="keyword">\ne</span> 1 <span class="keyword">\right</span><span class="keyword">\&#125;</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\mid</span> a,b <span class="keyword">\in</span> <span class="keyword">\mathbb</span>&#123;N&#125; <span class="keyword">\text</span>&#123; and &#125; b &gt; 5 <span class="keyword">\right</span><span class="keyword">\&#125;</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span> <span class="keyword">\left</span>. <span class="keyword">\dfrac</span> ab <span class="keyword">\middle</span>| a,b <span class="keyword">\in</span> <span class="keyword">\mathbb</span>&#123;N&#125; <span class="keyword">\text</span>&#123; and &#125; b &gt; 5 <span class="keyword">\right</span>. <span class="keyword">\right</span><span class="keyword">\&#125;</span></span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure>
<p>$ \begin{matrix}<br>\left\{ x \mid x \in \mathbb{R} \text{ and } x \ne 1 \right\} \\<br>\left\{ \dfrac ab \mid a,b \in \mathbb{N} \text{ and } b &gt; 5 \right\} \\<br>\left\{ \left. \dfrac ab \middle| a,b \in \mathbb{N} \text{ and } b &gt; 5 \right. \right\}<br>\end{matrix} $</p>
</li>
<li><p><strong>函数</strong></p>
<p>因为通常高度不固定，因此建议用 <code>|</code> 表示并匹配高度。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">f&#x27;(x<span class="built_in">_</span>0) = <span class="keyword">\left</span>. f&#x27;(x) <span class="keyword">\right</span>| <span class="built_in">_</span>&#123;x=x<span class="built_in">_</span>0&#125; = <span class="keyword">\left</span>. <span class="keyword">\dfrac</span>&#123;<span class="keyword">\mathrm</span>&#123;d&#125;f&#125;&#123;<span class="keyword">\mathrm</span>&#123;d&#125;x&#125; <span class="keyword">\right</span>| <span class="built_in">_</span>&#123;x=x<span class="built_in">_</span>0&#125;</span><br></pre></td></tr></table></figure>
<p>$ f’(x_0) = \left. f’(x) \right| _{x=x_0} = \left. \dfrac{\mathrm{d}f}{\mathrm{d}x} \right| _{x=x_0} $</p>
</li>
<li><p><strong>双竖线</strong></p>
<p>把 <code>|</code>、<code>\vert</code>、<code>\lvert</code>、<code>\rvert</code>、<code>\mid</code> 分别替换为 <code>\|</code>、<code>\Vert</code>、<code>\lVert</code>、<code>\rVert</code>、<code>\parallel</code> 即可，基本属性与上述对应单竖线类似。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\|</span> x <span class="keyword">\|</span> <span class="keyword">\quad</span> <span class="keyword">\left</span><span class="keyword">\Vert</span> <span class="keyword">\dfrac</span> ab <span class="keyword">\right</span><span class="keyword">\Vert</span> <span class="keyword">\quad</span> <span class="keyword">\lVert</span> c <span class="keyword">\rVert</span> <span class="keyword">\quad</span> l <span class="keyword">\parallel</span> m</span><br></pre></td></tr></table></figure>
<p>$ \| x \| \quad \left\Vert \dfrac ab \right\Vert \quad \lVert c \rVert \quad l \parallel m $</p>
</li>
</ul>
</li>
<li><p>如何输入斜分式？</p>
<p>$ {}^1/_2 $</p>
<p>用上下标即可。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;&#125;<span class="built_in">^</span>1/<span class="built_in">_</span>2</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何输入化学方程式？</p>
<p>$ \mathrm{CH_3CH_2OH \xrightarrow[170^\circ C]{浓H_2SO_4} CH_2=CH_2 \uparrow + H_2O } $</p>
<p>使用 <code>\xrightarrow</code> 和已有的符号即可。也可使用宏包，在此不表。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mathrm</span>&#123;CH<span class="built_in">_</span>3CH<span class="built_in">_</span>2OH <span class="keyword">\xrightarrow</span>[170<span class="built_in">^</span><span class="keyword">\circ</span> C]&#123;浓H<span class="built_in">_</span>2SO<span class="built_in">_</span>4&#125; CH<span class="built_in">_</span>2=CH<span class="built_in">_</span>2 <span class="keyword">\uparrow</span> + H<span class="built_in">_</span>2O &#125;</span><br></pre></td></tr></table></figure>
<p>给箭头加文字有如下方式：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line"><span class="keyword">\xleftarrow</span>[x+y+z]&#123;x+y+z+1&#125; <span class="keyword">\\</span> <span class="comment">% 自动调整长度</span></span><br><span class="line"><span class="keyword">\xrightarrow</span>[x+y+z]&#123;x+y+z+1&#125; <span class="keyword">\\</span> <span class="comment">% 自动调整长度</span></span><br><span class="line"><span class="keyword">\overset</span>&#123;x+y&#125;&#123;<span class="keyword">\rightarrow</span>&#125; <span class="keyword">\\</span> <span class="comment">% 长度固定</span></span><br><span class="line"><span class="keyword">\underrightarrow</span>&#123;x+y+z&#125; <span class="keyword">\\</span> <span class="comment">% 自动调整长度</span></span><br><span class="line"><span class="keyword">\underset</span>&#123;x+y&#125;&#123;<span class="keyword">\leftarrow</span>&#125; <span class="keyword">\\</span> <span class="comment">% 长度固定</span></span><br><span class="line"><span class="keyword">\overleftarrow</span>&#123;x+y+z&#125; <span class="keyword">\\</span> <span class="comment">% 自动调整长度</span></span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure>
<p>$ \begin{matrix}<br>\xleftarrow[x+y+z]{x+y+z+1} \\ % 自动调整长度<br>\xrightarrow[x+y+z]{x+y+z+1} \\ % 自动调整长度<br>\overset{x+y}{\rightarrow} \\ % 长度固定<br>\underrightarrow{x+y+z} \\ % 自动调整长度<br>\underset{x+y}{\leftarrow} \\ % 长度固定<br>\overleftarrow{x+y+z} \\ % 自动调整长度<br>\end{matrix} $</p>
</li>
<li><p>如何给公式加方框？</p>
<p>用 <code>\boxed</code> 命令或用 1*1 表格的边框。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\boxed</span> &#123;E=mc<span class="built_in">^</span>2&#125;</span><br></pre></td></tr></table></figure>
<p>$ \boxed {E=mc^2} $</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;|c|&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">E=mc<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<p>$ \begin{array}{|c|}<br>\hline<br>E=mc^2 \\<br>\hline<br>\end{array} $</p>
</li>
<li><p>如何输入分数的约分形式/如何输入删除线？</p>
<p>$ \require{cancel} \dfrac{\cancel{15}3}{\cancel{25}5} = \dfrac{3}{5} $</p>
<p>可以使用 <code>\cancel</code>、<code>\bcancel</code>、<code>\xcancel</code> 和 <code>\cancelto</code> 命令（需要 <code>\require</code> 导包）。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\require</span>&#123;cancel&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;rl&#125;</span><br><span class="line"><span class="keyword">\verb</span>|<span class="string">y+\cancel&#123;x&#125;</span>| <span class="built_in">&amp;</span> y+<span class="keyword">\cancel</span>&#123;x&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\verb</span>|<span class="string">\cancel&#123;y+x&#125;</span>| <span class="built_in">&amp;</span> <span class="keyword">\cancel</span>&#123;y+x&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\verb</span>|<span class="string">y+\bcancel&#123;x&#125;</span>| <span class="built_in">&amp;</span> y+<span class="keyword">\bcancel</span>&#123;x&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\verb</span>|<span class="string">y+\xcancel&#123;x&#125;</span>| <span class="built_in">&amp;</span> y+<span class="keyword">\xcancel</span>&#123;x&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\verb</span>|<span class="string">y+\cancelto&#123;0&#125;&#123;x&#125;</span>| <span class="built_in">&amp;</span> y+<span class="keyword">\cancelto</span>&#123;0&#125;&#123;x&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\require{cancel}
\begin{array}{rl}
\verb|y+\cancel{x}| & y+\cancel{x} \\
\verb|\cancel{y+x}| & \cancel{y+x} \\
\verb|y+\bcancel{x}| & y+\bcancel{x} \\
\verb|y+\xcancel{x}| & y+\xcancel{x} \\
\verb|y+\cancelto{0}{x}| & y+\cancelto{0}{x} \\
\end{array}</script><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\require</span>&#123;cancel&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c&#125;</span><br><span class="line"><span class="keyword">\verb</span>+<span class="string">\dfrac&#123;\cancel&#123;15&#125;3&#125;&#123;\cancel&#123;25&#125;5&#125; = \dfrac&#123;3&#125;&#123;5&#125;</span>+ <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\dfrac</span>&#123;<span class="keyword">\cancel</span>&#123;15&#125;3&#125;&#123;<span class="keyword">\cancel</span>&#123;25&#125;5&#125; = <span class="keyword">\dfrac</span>&#123;3&#125;&#123;5&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\require{cancel}
\begin{array}{c}
\verb+\dfrac{\cancel{15}3}{\cancel{25}5} = \dfrac{3}{5}+ \\
\dfrac{\cancel{15}3}{\cancel{25}5} = \dfrac{3}{5} \\
\end{array}</script><p>上例还使用了 <code>\verb</code> 命令来显示原文照排效果。</p>
</li>
</ol>
<h2 id="13-示例"><a href="#13-示例" class="headerlink" title="13 示例"></a>13 示例</h2><p>以下公式来源于：Tsung-Chyan Lai,Yuri N. Sotskov,Alexandre Dolgui. The stability radius of an optimal line balance with maximum efficiency for a simple assembly line[J]. European Journal of Operational Research,2018,274(2):</p>
<ol>
<li><p>导数、括号匹配、上下标、特殊符号、大型运算符</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">t&#x27; <span class="keyword">\left</span>( V<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; <span class="keyword">\right</span>) := <span class="keyword">\sum</span><span class="built_in">_</span>&#123;i <span class="keyword">\in</span> V<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; &#125; t<span class="built_in">_</span>i&#x27; = <span class="keyword">\sum</span><span class="built_in">_</span>&#123;i <span class="keyword">\in</span> V<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; <span class="keyword">\setminus</span> <span class="keyword">\left</span><span class="keyword">\&#123;</span> j <span class="keyword">\right</span><span class="keyword">\&#125;</span> &#125; t<span class="built_in">_</span>i&#x27;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
t' \left( V_k^{b_r} \right) := \sum_{i \in V_k^{b_r} } t_i' = \sum_{i \in V_k^{b_r} \setminus \left\{ j \right\} } t_i'</script></li>
<li><p>希腊字母、括号匹配、特殊符号、字母标记</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\delta</span><span class="built_in">_</span>&#123;b<span class="built_in">_</span>1u&#125;<span class="built_in">^</span>&#123;=b<span class="built_in">_</span>rk&#125; = <span class="keyword">\frac</span>&#123;t <span class="keyword">\left</span>( V<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; <span class="keyword">\right</span>) - t <span class="keyword">\left</span>( V<span class="built_in">_</span>u<span class="built_in">^</span>&#123;b<span class="built_in">_</span>1&#125; <span class="keyword">\right</span>)&#125;&#123;<span class="keyword">\left</span>| <span class="keyword">\tilde</span>&#123;V&#125;<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; <span class="keyword">\oplus</span> <span class="keyword">\tilde</span>&#123;V&#125;<span class="built_in">_</span>u<span class="built_in">^</span>&#123;b<span class="built_in">_</span>1&#125; <span class="keyword">\right</span>|&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\delta_{b_1u}^{=b_rk} = \frac{t \left( V_k^{b_r} \right) - t \left( V_u^{b_1} \right)}{\left| \widetilde{V}_k^{b_r} \oplus \widetilde{V}_u^{b_1} \right|}</script></li>
<li><p>希腊字母、特殊符号、条件表达式、函数、正文字体</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\gamma</span> <span class="keyword">\left</span>( b<span class="built_in">_</span>r <span class="keyword">\right</span>) :=</span><br><span class="line"><span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line"><span class="keyword">\frac</span>&#123;1&#125;&#123;<span class="keyword">\tilde</span>&#123;n&#125; &#125; <span class="keyword">\cdot</span> <span class="keyword">\left</span>[ c <span class="keyword">\left</span>( b<span class="built_in">_</span>r, t <span class="keyword">\right</span>) -  <span class="keyword">\max</span> <span class="keyword">\left</span><span class="keyword">\&#123;</span> t <span class="keyword">\left</span>( V<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; <span class="keyword">\right</span>) : &#123;<span class="keyword">\widetilde</span>&#123;V&#125;<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; &#125; <span class="keyword">\notin</span> W <span class="keyword">\left</span>( b<span class="built_in">_</span>r, t <span class="keyword">\right</span>) <span class="keyword">\right</span><span class="keyword">\&#125;</span> <span class="keyword">\right</span>], <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;if <span class="built_in">$</span>k <span class="keyword">\in</span> <span class="keyword">\left</span><span class="keyword">\&#123;</span> 1, 2, <span class="keyword">\ldots</span>, m <span class="keyword">\left</span>( b<span class="built_in">_</span>r <span class="keyword">\right</span>) <span class="keyword">\right</span><span class="keyword">\&#125;</span><span class="built_in">$</span> with <span class="built_in">$</span>t <span class="keyword">\left</span>( V<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; <span class="keyword">\right</span>) &lt; c <span class="keyword">\left</span>( b<span class="built_in">_</span>r, t <span class="keyword">\right</span>)<span class="built_in">$</span>;&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\min</span> <span class="keyword">\left</span><span class="keyword">\&#123;</span> t<span class="built_in">_</span>i : i <span class="keyword">\in</span> <span class="keyword">\widetilde</span>&#123;V&#125; <span class="keyword">\right</span><span class="keyword">\&#125;</span>, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;if <span class="built_in">$</span>t <span class="keyword">\left</span>( V<span class="built_in">_</span>k<span class="built_in">^</span>&#123;b<span class="built_in">_</span>r&#125; <span class="keyword">\right</span>) = c <span class="keyword">\left</span>( b<span class="built_in">_</span>r, t <span class="keyword">\right</span>)<span class="built_in">$</span> for each <span class="built_in">$</span>k <span class="keyword">\in</span> <span class="keyword">\left</span><span class="keyword">\&#123;</span> 1, 2, <span class="keyword">\ldots</span>, m <span class="keyword">\left</span>( b<span class="built_in">_</span>r <span class="keyword">\right</span>) <span class="keyword">\right</span><span class="keyword">\&#125;</span><span class="built_in">$</span>.&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\gamma \left( b_r \right) :=
\begin{cases}
\frac{1}{\tilde{n} } \cdot \left[ c \left( b_r, t \right) -  \max \left\{ t \left( V_k^{b_r} \right) : {\widetilde{V}_k^{b_r} } \notin W \left( b_r, t \right) \right\} \right], & \text{if $k \in \left\{ 1, 2, \ldots, m \left( b_r \right) \right\}$ with $t \left( V_k^{b_r} \right) < c \left( b_r, t \right)$;} \\
\min \left\{ t_i : i \in \widetilde{V} \right\}, & \text{if $t \left( V_k^{b_r} \right) = c \left( b_r, t \right)$ for each $k \in \left\{ 1, 2, \ldots, m \left( b_r \right) \right\}$.}
\end{cases}</script></li>
</ol>
<h2 id="14-小工具"><a href="#14-小工具" class="headerlink" title="14 小工具"></a>14 小工具</h2><ul>
<li>手画符号搜索 LaTeX 代码：<a href="http://detexify.kirelabs.org/classify.html">http://detexify.kirelabs.org/classify.html</a></li>
<li>LaTeX 在线编辑器：<a href="http://www.codecogs.com/latex/eqneditor.php">http://www.codecogs.com/latex/eqneditor.php</a></li>
</ul>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>技巧</tag>
        <tag>Markdown</tag>
        <tag>LaTeX</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>用 JavaScript 实现八大排序</title>
    <url>/2022/03/02/realize-eight-sorting-methods-using-javascript/</url>
    <content><![CDATA[<p>八大排序分别是 <strong>冒泡排序、选择排序、插入排序、希尔排序、快速排序、归并排序、堆排序、基数排序</strong>。本文介绍这八大排序算法的基本思想和过程，并尝试使用 JavaScript 实现它们。</p>
<span id="more"></span>
<p>各个排序的复杂度如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">排序</th>
<th style="text-align:center">平均情况</th>
<th style="text-align:center">最好情况</th>
<th style="text-align:center">最坏情况</th>
<th style="text-align:center">辅助空间</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center"><code>O(n^1.3)</code></td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(n logn)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">基数排序</td>
<td style="text-align:center"><code>O(d(n+r))</code></td>
<td style="text-align:center"><code>O(d(n+r))</code></td>
<td style="text-align:center"><code>O(d(n+rd))</code></td>
<td style="text-align:center"><code>O(n+rd)</code></td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
</div>
<h2 id="0-JavaScript-自带排序"><a href="#0-JavaScript-自带排序" class="headerlink" title="0 JavaScript 自带排序"></a>0 JavaScript 自带排序</h2><p>即 <code>Array.prototype.sort()</code>，原理为插入排序与快速排序混合。<code>sort</code> 会改变原数组，并返回排序后的数组（不过一般没人使用其返回值）。</p>
<p>注意，<code>sort</code> 不含参数时，默认是按 <strong>字母顺序</strong> 对数组进行升序排序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;mongo&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits);	<span class="comment">// [ &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;mongo&#x27;, &#x27;orange&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>];</span><br><span class="line">nums.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums);	<span class="comment">// [ 1, 10, 100, 25, 40, 5 ]</span></span><br></pre></td></tr></table></figure>
<p>为使结果按数字顺序进行排序，<code>sort</code> 接受一个 <strong>回调函数</strong> 作为参数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">a, b</span>) &#123;<span class="keyword">return</span> a - b;&#125;</span><br></pre></td></tr></table></figure>
<p>可以直接简写为箭头函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(a, b) =&gt; a - b</span><br></pre></td></tr></table></figure>
<p>回调函数的两个参数代表数组中准备比较的两个值，并根据返回值决定排序：</p>
<ol>
<li>返回值为负值，将 <code>a</code> 向前排</li>
<li>返回值为正值，将 <code>b</code> 向前排</li>
<li>返回值为零，<code>a</code>、<code>b</code> 顺序不变</li>
</ol>
<p>因此，可以为回调函数填写不同的返回值，以进行不同的排序方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>];</span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);	<span class="comment">// 数字升序排序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums);	<span class="comment">// [ 1, 5, 10, 25, 40, 100 ]</span></span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);	<span class="comment">// 数字降序排序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums);	<span class="comment">// [ 100, 40, 25, 10, 5, 1 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> students = [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">scores</span>: <span class="number">85</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">scores</span>: <span class="number">90</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">scores</span>: <span class="number">82</span>&#125;];</span><br><span class="line">students.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">scores</span> - b.<span class="property">scores</span>);	<span class="comment">// 按每个元素的scores属性升序排序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(students);	<span class="comment">// [ &#123; id: 3, scores: 82 &#125;, &#123; id: 1, scores: 85 &#125;, &#123; id: 2, scores: 90 &#125; ]</span></span><br></pre></td></tr></table></figure>
<p>注意回调函数的返回值是数值，而非布尔值，不要写成 <code>(a, b) =&gt; a &lt; b</code>。</p>
<h2 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1 冒泡排序（Bubble Sort）"></a>1 冒泡排序（Bubble Sort）</h2><p>典型的排序算法。两个数两两比较大小，大数后移（下沉），小数前移（冒泡）。</p>
<p>这里用一个大小为 2 的窗口，每次从后往前滑动比较，直到最小的数被顶到最前。紧接着对后面 <code>n - 1</code> 个数进行同样的操作，直至比较完毕。</p>
<p>一共进行 <code>n - 1</code> 趟比较，第 <code>i</code> 趟（<code>i</code> 从 0 开始）对 <code>n - i</code> 个数进行 <code>n - i - 1</code> 次比较，每趟结束后有一个数被排好位置，因此复杂度为 <code>O(n^2)</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-01.png" alt="冒泡排序" style="zoom:50%;" /></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = n - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (final[j - <span class="number">1</span>] &gt; final[j]) &#123;</span><br><span class="line">        [final[j - <span class="number">1</span>], final[j]] = [final[j], final[j - <span class="number">1</span>]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优化：</strong> <code>n - 1</code> 趟比较需要全部完成，如果某趟比较已经完成排序，则进行了多余的遍历。</p>
<p>可以设置标志位 <code>flag</code>，表示本趟比较 <strong>是否进行了冒泡交换</strong>，如果一趟下来都没有进行冒泡交换，表示元素已经有序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = n - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (final[j - <span class="number">1</span>] &gt; final[j]) &#123;</span><br><span class="line">        [final[j - <span class="number">1</span>], final[j]] = [final[j], final[j - <span class="number">1</span>]];</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2 选择排序（Selection Sort）"></a>2 选择排序（Selection Sort）</h2><p>找数组中元素的最小值，并顶到最前，然后在后面剩下的元素中重复操作。</p>
<p>第 <code>i</code> 次（<code>i</code> 从 0 开始）遍历，在后面 <code>n - i</code> 个数中找出最小值，与第 <code>i</code> 个元素交换并固定下来，一共进行 <code>n - 1</code> 次遍历，每次遍历有一个数被排好位置，因此复杂度为 <code>O(n^2)</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-02.png" alt="选择排序" style="zoom:50%;" /></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (final[j] &lt; final[minIndex]) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (minIndex !== i) &#123;</span><br><span class="line">      [final[i], final[minIndex]] = [final[minIndex], final[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3 插入排序（Insertion Sort）"></a>3 插入排序（Insertion Sort）</h2><p>类似于 <strong>插扑克牌排序</strong>，在一个已经排好序的序列中，插入一个新的数，使得新序列依然有序。</p>
<p>每次插入一个数，一共插入 <code>n</code> 次。第 <code>i</code> 次（<code>i</code> 从 0 开始）插入下标为 <code>i</code> 的数时，为比较数组前 <code>i + 1</code> 个数的大小，需要对这 <code>i + 1</code> 个数进行一遍冒泡排序。因此复杂度为 <code>O(n^2)</code>。</p>
<p>代码实现时，下标为 0 的数默认已插入，且不需要比较，<code>i</code> 可以从 1 开始循环；此外，冒泡排序时，由于元素是有序的，从后往前找插入位置时，找到后即可进入下一轮遍历。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-03.png" alt="插入排序" style="zoom:50%;" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-04.png" alt="插扑克牌排序"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (final[j - <span class="number">1</span>] &gt; final[j]) &#123;</span><br><span class="line">        [final[j - <span class="number">1</span>], final[j]] = [final[j], final[j - <span class="number">1</span>]];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4 希尔排序（Shell Sort）"></a>4 希尔排序（Shell Sort）</h2><p>当数列 <strong>基本排好序</strong> 时，使用插入排序会更高效。因此可以分步长成子序列，对每个子序列做插入排序。</p>
<p>基本思路是，设置初始步长为数组长度的一半，将数组分为若干个子数组，子数组个数即为步长数。对每个子数组做插入排序，过程同上。依次缩小步长，直至步长为 1，此时数组经过插入排序后已经完全排序。</p>
<p>时间复杂度为 <code>O(n^1.3-2)</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-05.png" alt="插入排序" style="zoom:50%;" /></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> increment = n;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    increment = <span class="title class_">Math</span>.<span class="title function_">floor</span>(increment / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 一共有increment个子数组，起始下标从0到increment-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; increment; k++) &#123;</span><br><span class="line">      <span class="comment">// 以下是插入排序</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = k + increment; i &lt; n; i += increment) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; k; j -= increment) &#123;</span><br><span class="line">          <span class="keyword">if</span> (final[j - increment] &gt; final[j]) &#123;</span><br><span class="line">            [final[j - increment], final[j]] = [final[j], final[j - increment]];</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (increment === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-快速排序（Quick-Sort）"><a href="#5-快速排序（Quick-Sort）" class="headerlink" title="5 快速排序（Quick Sort）"></a>5 快速排序（Quick Sort）</h2><p>快排 yyds！基本思想是 <strong>分治</strong>（分而治之），从数列中选出一个 <code>key</code> 值，并让其他数分边站（小于往左，大于等于往右），在左右两边重复这一步骤，直至区间长度为 1。</p>
<p>如何让数分边站？需要用到 <strong>挖坑填数</strong> 的方法。</p>
<ul>
<li>设这样的一个数组：<code>[72, 6, 57, 88, 60, 42, 83, 73, 48, 85]</code>，初始时，设 <code>i = 0</code>，<code>j = 9</code>，<code>key</code> 选取第一个数 <code>a[0] = 72</code>。</li>
<li><code>a[0]</code> 被选走后，相当于 <code>a[0]</code> 出现了一个空洞，我们从后往前（<code>j--</code>）找出一个比 <code>key</code> 小的数，发现 <code>j = 8</code>，<code>a[8] = 48</code> 满足这个条件，将 <code>a[8]</code> 填到 <code>a[0]</code> 中。</li>
<li>这时 <code>a[8]</code> 又形成了空洞，我们从前往后（<code>i++</code>）找出一个比 <code>key</code> 大的数，发现 <code>i = 3</code>，<code>a[3] = 88</code> 满足这个条件，将 <code>a[3]</code> 填到 <code>a[8]</code> 中。</li>
<li>这一轮结束后，<code>i = 3</code>，<code>j = 7</code>，<code>key = 72</code>。再重复上述操作，先从后往前找，再从前往后找。如下一轮，找到 <code>j = 5</code>，<code>a[5] = 42</code>，将 <code>a[5]</code> 填到 <code>a[3]</code> 中；找到 <code>i = 5</code>，此时 <code>i === j</code>，退出。</li>
<li>再将 <code>key = 72</code> 填到最后的空洞 <code>a[5]</code> 中，此时数组为：<code>[48, 6, 57, 42, 60, 72, 83, 73, 88, 85]</code>，可以看出 <code>a[5] = 72</code> 前面的数都大于它，后面的数都小于它。再对 <code>a[0...4]</code> 和 <code>a[6...9]</code> 重复上述步骤即可。</li>
</ul>
<p>这个过程重复 <code>n</code> 次，每次对数组对半分，复杂度为 <code>O(n logn)</code>。</p>
<p><code>key</code> 有多种选择方法，如中间数或随机数，会影响算法复杂度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="title function_">sorting</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sorting</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = left, j = right;</span><br><span class="line">    <span class="keyword">const</span> key = final[left];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; final[j] &gt;= key) &#123;	<span class="comment">// 从右往左找第一个小于key的值</span></span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">        final[i] = final[j];</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; final[i] &lt; key) &#123;	<span class="comment">// 从左往右找第一个大于key的值</span></span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">        final[j] = final[i];</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此时i === j</span></span><br><span class="line">    final[i] = key;</span><br><span class="line">    <span class="title function_">sorting</span>(left, i - <span class="number">1</span>);	<span class="comment">// 对左子区间递归调用</span></span><br><span class="line">    <span class="title function_">sorting</span>(i + <span class="number">1</span>, right);	<span class="comment">// 对右子区间递归调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-归并排序（Merge-Sort）"><a href="#6-归并排序（Merge-Sort）" class="headerlink" title="6 归并排序（Merge Sort）"></a>6 归并排序（Merge Sort）</h2><p>基本思想同样是 <strong>分治</strong>。通过归并若干个已经排好序的子序列，达到整个序列完成排序的目的。</p>
<p>首先考虑，如何 <strong>合并两个有序数列</strong>？可以比较两个数列的第一个数，然后取出较小的一个，并在原数列删除该数，再重复操作，如果一个数列已空，依次取出另一个数列的元素即可。代码实现时，不用实际删除，可以用指针移动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> m = a.<span class="property">length</span>, n = b.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Array</span>(m + n);</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; b[j]) &#123;</span><br><span class="line">      c[k++] = a[i++];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      c[k++] = b[j++];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">    c[k++] = a[i++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">    c[k++] = b[j++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据上面的思想，如果数组分成两组 A、B 且这两组有序，就可以方便地合并。</p>
<p>如何使 A、B 有序？将 A、B 各自再分成两组，以此类推，直到小组内只有 1 个数据时，视为小组有序，再合并相邻的两个小组即可。也就是 <strong>先递归分解数列，再合并数列</strong>。</p>
<p>将数列分开小数列需要 <code>logn</code> 步，每一步合并有序数列需要 <code>O(n)</code>，总的时间复杂度为 <code>O(n logn)</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-06.png" alt="归并排序" style="zoom: 67%;" /></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="title function_">sorting</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sorting</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">let</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">      <span class="title function_">sorting</span>(left, middle);	<span class="comment">// 对左子区间递归调用</span></span><br><span class="line">      <span class="title function_">sorting</span>(middle + <span class="number">1</span>, right);	<span class="comment">// 对右子区间递归调用</span></span><br><span class="line">      <span class="title function_">mergeArray</span>(left, middle, right);	<span class="comment">// 归并左右子区间</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">mergeArray</span>(<span class="params">left, middle, right</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = left, m = middle, j = middle + <span class="number">1</span>, n = right;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> temp = <span class="keyword">new</span> <span class="title class_">Array</span>(right - left + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= m &amp;&amp; j &lt;= n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (final[i] &lt; final[j]) &#123;</span><br><span class="line">        temp[k++] = final[i++];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        temp[k++] = final[j++];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= m) &#123;</span><br><span class="line">      temp[k++] = final[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= n) &#123;</span><br><span class="line">      temp[k++] = final[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ii = <span class="number">0</span>; ii &lt; k; ii++) &#123;</span><br><span class="line">      final[left + ii] = temp[ii];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7 堆排序（Heap Sort）"></a>7 堆排序（Heap Sort）</h2><p>首先，了解什么是 <strong>堆</strong> 和 <strong>最小堆</strong>，以及 <strong><code>shiftDown</code> 操作</strong>。堆是用完全二叉树结构（只有二叉结构，且都在左边）存储数据的结构，也称二叉堆。最小堆是指堆中某个节点值不小于其父节点的值，因此最顶端总为最小值。</p>
<p>下图是一个最小堆，堆顶是最小值，每个节点都不小于其父节点。并且可以按照图中所示顺序（从左到右，从上到下），确定每个节点的下标。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-07.png" alt="最小堆和其在数组中的下标"></p>
<p>发现规律：对当前节点下标 <code>i</code>，有：</p>
<ul>
<li>父元素在数组中的下标为：<code>Math.floor((i - 1) / 2)</code></li>
<li>左子元素在数组中的下标为：<code>2 * i + 1</code></li>
<li>右子元素在数组中的下标为：<code>2 * i + 2</code></li>
</ul>
<p><code>shiftDown</code> 操作是指对于一个堆的根节点，判断其与子节点的大小关系。如果该节点更大，则不满足最小堆定义，此时该节点与子节点互换（下移）。重复这个操作，直到该节点找到它的位置（不再大于其两个子节点）。</p>
<p>接下来介绍堆排序。堆排序的思想是，构造一个 <strong>最小堆</strong>，然后 <strong>依次取出堆顶最小值</strong>，直到堆为空。</p>
<p>首先构造最小堆。对于已有的数组，可以按下标顺序转换为这样一个二叉树。然后，我们找到最后一个含有子节点的节点，这个节点应是最后一个节点 <code>n - 1</code> 的父节点，根据上面的规律，其下标是 <code>Math.floor((n - 2) / 2)</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-08.png" alt="初始二叉树"></p>
<p>从后往前遍历，对每个有子节点的节点，都把其当做根节点，对 <strong>其下面的完全二叉树</strong> 做 <code>shiftDown</code> 操作（这个过程称为建立堆的调整），直到整个二叉堆满足最小堆，最小堆构造完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-09.png" alt="上述二叉树调整完后，构造出的最小堆"></p>
<p>构造完成后，数组并非排好序，因为堆只满足父子节点的大小关系。为此，我们需要依次取出最小值，每次重复取出，直至堆为空。</p>
<p>堆中只能取出最大优先级的元素，即根节点，最小堆的根节点就是最小值。取出最小值后，会在堆顶形成空洞，这时需要把数组最后一个元素放到堆顶（根节点），然后对新的根节点进行 <code>shiftDown</code> 操作（这个过程称为最小堆的恢复）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-10.png" alt="取出最小值后shiftDown"></p>
<p>代码实现时，我们可以将设置 <code>shiftDown</code> 的操作范围，对于已经放到末尾的最小值，<code>shiftDown</code> 时不再处理它。</p>
<p>最终得到的数组是降序排序的数组，为了得到升序排序，我们对其 <code>reverse</code> 即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-11.png" alt="完成堆排序时的场景"></p>
<p>每次恢复堆的时间复杂度为 <code>O(logn)</code>，共 <code>n - 1</code> 次恢复堆操作，建立堆时也需要调整 <code>n / 2</code> 次，每次 <code>O(logn)</code>，总的时间复杂度为 <code>O(n logn)</code>。</p>
<p>参考：<a href="https://www.runoob.com/data-structures/heap-sort.html">基础堆排序 | 菜鸟教程</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="title function_">makeMinHeap</span>();	<span class="comment">// 构造最小堆</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    [final[<span class="number">0</span>], final[i]] = [final[i], final[<span class="number">0</span>]];	<span class="comment">// 将最小值放到队尾，队尾填补堆顶</span></span><br><span class="line">    <span class="title function_">minHeapShiftDown</span>(<span class="number">0</span>, i);	<span class="comment">// 堆顶元素做shiftDown，为了不影响队尾最小值，设置i为最后子节点位置（不包括i）</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final.<span class="title function_">reverse</span>();	<span class="comment">// 将降序数组反转为升序数组</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">makeMinHeap</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造最小堆，从后往前对有子节点的节点做shiftDown</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>((n - <span class="number">2</span>) / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="title function_">minHeapShiftDown</span>(i, n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">minHeapShiftDown</span> (<span class="params">i, n</span>) &#123;</span><br><span class="line">    <span class="comment">// i是需要shiftDown的根节点位置，n是最后一个子节点的位置（不包括n）</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">2</span> * i + <span class="number">1</span>;  <span class="comment">// 找左子节点位置</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; final[j] &gt; final[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        j++;	<span class="comment">// 在左右节点中找较小值</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (final[i] &lt;= final[j]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;	<span class="comment">// 如果父节点小于等于子节点，则该节点有效，无需下移</span></span><br><span class="line">      &#125;</span><br><span class="line">      [final[i], final[j]] = [final[j], final[i]];	<span class="comment">// 节点下移</span></span><br><span class="line">      i = j;</span><br><span class="line">      j = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-基数排序（Radix-Sort）"><a href="#8-基数排序（Radix-Sort）" class="headerlink" title="8 基数排序（Radix Sort）"></a>8 基数排序（Radix Sort）</h2><p>首先，了解什么是 <strong>桶排序</strong>（Bin Sort，又称箱排序、计数排序）。</p>
<p>最基础的桶排序创建一个大小为 <code>max + 1</code> 的数组 <code>count</code>（<code>max</code> 为原数组的最大数字）用来存储每个数字的个数，初始值记为 0，然后做两轮遍历：</p>
<ol>
<li>遍历原数组 <code>nums</code>，将数字对应下标的计数值加 1，即 <code>count[num]++</code>，这一轮复杂度为 <code>O(n)</code></li>
<li>遍历计数数组 <code>count</code>，将不为 0 的下标值输出，这一轮复杂度为 <code>O(max)</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-12.png" alt="桶排序" style="zoom: 67%;" /></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...final) + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> final) &#123;</span><br><span class="line">    count[num]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; count[i]; j++) &#123;</span><br><span class="line">      final[k++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的桶排序有一定的问题：如果数组中有负数，就没有对应下标；或者最小值远大于 0，此时前面的空间都被浪费了。</p>
<p><strong>优化的桶排序：</strong> 找出最小值 <code>min</code> 和最大值 <code>max</code>，计数数组长度为 <code>max - min + 1</code>，下标也进行偏移，下标为 <code>i</code> 的元素对原数组中的 <code>i + min</code> 进行计数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(...final), max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...final);</span><br><span class="line">  <span class="keyword">const</span> count = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(max - min + <span class="number">1</span>)).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> final) &#123;</span><br><span class="line">    count[num - min]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; count[i]; j++) &#123;</span><br><span class="line">      final[k++] = i + min;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于上述桶排序利用 <code>count</code> 存储原数组的数值信息，丢失了原数组的其他信息（如两个相同数值输出的结果是不稳定的），实际操作中，还会将数组 <code>count</code>中的计数改为前缀和，用来快速获得每个元素值的下标（排名）。</p>
<p>这里推荐在获取下标时，从后往前遍历，这样对于相同值的元素，其顺序与原数组保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(...final), max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...final);</span><br><span class="line">  <span class="keyword">const</span> count = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(max - min + <span class="number">1</span>)).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> final) &#123;</span><br><span class="line">    count[num - min]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; count.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    count[i] += count[i - <span class="number">1</span>];	<span class="comment">// 前缀和，其含义是小于等于当前数的个数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> temp = <span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;	<span class="comment">// 从后往前遍历保证排序稳定性</span></span><br><span class="line">    count[final[i] - min]--;	<span class="comment">// 获取下标</span></span><br><span class="line">    temp[count[final[i] - min]] = final[i];	<span class="comment">// 赋值</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    final[i] = temp[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>桶排序的时间复杂度为 <code>O(n + max - min)</code>，空间复杂度为 <code>O(max - min)</code>。本质上，这是一种拿空间换时间的做法，有时可以达到线性复杂度，优于快排。</p>
<p>可以看出，如果 <code>max - min</code> 较大，就会浪费过多的时间和空间。</p>
<p>基数排序是在桶排序的基础上，通过 <strong>基数的限制</strong> 来减小开销。</p>
<p>如下图所示，确定基数为 10，数组长度就为 10，每个数会在这 10 个数中寻找位置。对于某个数如 34，不会像桶排序一样把其放在下标 34 中，而是将其分成 3 和 4，第一轮排序将其放在下标 4处，第二轮排序将其放在下标 3 处。</p>
<p>如何确定排序轮数？排序轮数也就是数组最大值的位数，即 <code>log(r) max + 1</code>向下取整。代码实现时，如果某一轮排序所有数字均计数在第 0 位，表明已经完成排序。</p>
<p>复杂度为 <code>O(d(n+r))</code>，<code>d</code> 为排序轮数，<code>n</code> 为数组长度，<code>r</code> 为基数大小，<code>d = log(r) max + 1</code> 向下取整。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-13.png" alt="先排个位数，再排十位数" style="zoom:67%;" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20220302/20220302-14.png" alt="基数排序" style="zoom: 67%;" /></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">radixSort</span>(<span class="params">arr, r</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> final = [...arr], n = arr.<span class="property">length</span>;</span><br><span class="line">  r = r === <span class="literal">undefined</span> ? <span class="number">10</span> : r;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="keyword">new</span> <span class="title class_">Array</span>(r).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, round = <span class="number">1</span>; ; i++, round *= r) &#123;</span><br><span class="line">    count.<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> final) &#123;</span><br><span class="line">      count[<span class="title class_">Math</span>.<span class="title function_">floor</span>(num / round) % r]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 确定位数，如果所有数字均计数在第0位，表明当前round已经超过最大值</span></span><br><span class="line">    <span class="keyword">if</span> (count[<span class="number">0</span>] === n) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理为前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; r; j++) &#123;</span><br><span class="line">      count[j] = count[j - <span class="number">1</span>] + count[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> temp = <span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line">    <span class="comment">// 倒序取出元素，前缀和的值就表示排序后元素的下标位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      count[<span class="title class_">Math</span>.<span class="title function_">floor</span>(final[j] / round) % r]--;</span><br><span class="line">      temp[count[<span class="title class_">Math</span>.<span class="title function_">floor</span>(final[j] / round) % r]] = final[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      final[j] = temp[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> final;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://www.w3school.com.cn/js/js_array_sort.asp">JavaScript 数组排序</a></li>
<li><a href="https://www.runoob.com/w3cnote/sort-algorithm-summary.html">排序算法总结 | 菜鸟教程</a></li>
<li><a href="https://blog.kingfish404.cn/posts/2021/03/frontend04-algorithm">用typescript实现八大排序-递增 - Kingfish404</a></li>
<li><a href="https://www.runoob.com/data-structures/heap-storage.html">堆的基本存储 | 菜鸟教程</a></li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中遍历数组、对象的几种方式</title>
    <url>/2021/12/14/several-ways-of-traversing-arrays-and-objects-in-javascript/</url>
    <content><![CDATA[<p>JavaScript 中数组和对象均可进行遍历。前端开发时，常会用到对数组、对象以及对象数组进行遍历。</p>
<span id="more"></span>
<h2 id="1-普通-for-循环"><a href="#1-普通-for-循环" class="headerlink" title="1 普通 for 循环"></a>1 普通 <code>for</code> 循环</h2><p>与其他语言一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i]);	<span class="comment">// 1  2  3  4  5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以使用变量缓存数组长度，进行优化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = array.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i]);	<span class="comment">// 1  2  3  4  5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-for-in-循环"><a href="#2-for-in-循环" class="headerlink" title="2 for-in 循环"></a>2 <code>for-in</code> 循环</h2><ol>
<li><p>对于数组，<code>for-in</code> 循环遍历的是数组的 <strong>索引值</strong>，例如：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);	<span class="comment">// 0  1  2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 需要注意：这里的索引为 <strong>字符串</strong>，而非数值，不能用于计算；且 <code>for-in</code> 会遍历数组所有可枚举属性（包括原型），因此尽量避免使用 <code>for-in</code> 遍历数组。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> index);	<span class="comment">// string  string  string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于对象，<code>for-in</code> 循环遍历的是对象的 <strong>键名</strong>，例如：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);	<span class="comment">// id  name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 需要注意：<code>for-in</code> 也会遍历到对象原型链上的方法与属性，可以通过 <code>hasOwnPropery</code> 方法判断属性是否为实例属性。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">school</span> = <span class="string">&#x27;ZJU&#x27;</span>;	<span class="comment">// 原型属性</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);	<span class="comment">// id  name	不会输出school</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-for-of-循环"><a href="#3-for-of-循环" class="headerlink" title="3 for-of 循环"></a>3 <code>for-of</code> 循环</h2><ol>
<li><p>对于数组，<code>for-of</code> 循环遍历的是数组的 <strong>元素值</strong>，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);	<span class="comment">// 1  3  7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>for-of</code> 循环不会遍历数组的原型方法与属性，因此是最常用来遍历数组的方法。</p>
</li>
<li><p><code>for-of</code> 循环 <strong>不支持遍历普通对象</strong>，但可以遍历类数组对象、Map 和 Set 等。</p>
</li>
</ol>
<p>以上循环均可以使用 <code>break</code>、<code>continue</code>、<code>return</code> 语句，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);	<span class="comment">// 1  7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-对象该怎么遍历？"><a href="#4-对象该怎么遍历？" class="headerlink" title="4 对象该怎么遍历？"></a>4 对象该怎么遍历？</h2><p>除上文提到的方法外，对象还可以通过以下方式遍历：</p>
<ol>
<li><p>键名用 <code>for-in</code> 获取，键值用 <code>obj[key]</code> 获取，会遍历到原型方法与属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;: &#x27;</span> + obj[key]);	<span class="comment">// id: 1  name: Carlo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：上面第 6 行取值时 <strong>不能写</strong> <code>obj.key</code>，这时 <code>key</code> 会被认为是 <code>obj</code> 的一个属性，而非循环变量中的 <code>key</code>；也就是 <code>obj.key</code> 等同于 <code>obj[&#39;key&#39;]</code>。</p>
</li>
<li><p>使用内建的 <code>Object.keys</code> 方法，会获得由对象实例属性组成的数组，不包含原型方法与属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;: &#x27;</span> + obj[key]);	<span class="comment">// id: 1  name: Carlo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或使用下文提到的 <code>forEach</code> 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;: &#x27;</span> + obj[key]));	<span class="comment">// id: 1  name: Carlo</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用内建的 <code>Object.values</code> 方法，会获得由对象实例属性值组成的数组，不包含原型方法与属性；使用内建的 <code>Object.entries</code> 方法，会获得由对象实例属性和属性值组成的数组，不包含原型方法与属性。这两个方法与 <code>Object.keys</code> 类似，在此不表。</p>
</li>
<li><p>类数组对象、字符串、Map、Set 等可迭代对象拥有迭代器，可以使用 <code>for-of</code> 遍历。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> string) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s);	<span class="comment">// h  e  l  l  o</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>普通对象也可为其添加 <code>Symbol.iterator</code> 方法，并赋一个生成器函数，以使用 <code>for-of</code> 遍历：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="variable language_">this</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);	<span class="comment">// 1  Carlo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="5-数组的高阶遍历函数"><a href="#5-数组的高阶遍历函数" class="headerlink" title="5 数组的高阶遍历函数"></a>5 数组的高阶遍历函数</h2><p>下文提到的遍历函数均用于数组，在开发中经常使用。</p>
<h3 id="5-1-forEach-函数"><a href="#5-1-forEach-函数" class="headerlink" title="5.1 forEach 函数"></a>5.1 <code>forEach</code> 函数</h3><p>对数组进行遍历，参数为一个匿名回调函数，匿名函数的参数为元素值与索引值（可省略），并且此处索引值为数字格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, i</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&#x27;: &#x27;</span> + value);	<span class="comment">// 0: 1  1: 3  2: 7</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>匿名回调函数可以写成箭头函数，更为精简，下文均使用箭头函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, i</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&#x27;: &#x27;</span> + value));</span><br></pre></td></tr></table></figure>
<p><code>forEach</code> 功能较弱，甚至不如普通 <code>for</code> 循环；并且 <strong>不能使用</strong> <code>break</code>、<code>continue</code>、<code>return</code> 语句，类似地，其他高阶函数也不能使用（<code>return</code> 除外）。</p>
<h3 id="5-2-map-函数"><a href="#5-2-map-函数" class="headerlink" title="5.2 map 函数"></a>5.2 <code>map</code> 函数</h3><p><code>map</code> 是映射的意思，它对原数组的每个元素都遍历一次，同时返回一个新的值，并放到新数组中，因此其支持 <code>return</code>，但不能用 <code>return</code> 跳出 <code>map</code>，下同。</p>
<p>例如，我们想把一个数组变成其两倍，可通过 <code>map</code> 实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> i * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);	<span class="comment">// [ 2, 6, 14 ]</span></span><br></pre></td></tr></table></figure>
<p>再例如，对一个对象数组 <code>people</code>，我们想得到所有人的 <code>id</code> 数组，即 <code>[1, 2, 3]</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>如果使用 <code>forEach</code> 函数，做法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> peopleId = [];</span><br><span class="line">people.<span class="title function_">forEach</span>(<span class="function"><span class="params">person</span> =&gt;</span> peopleId.<span class="title function_">push</span>(person.<span class="property">id</span>));</span><br></pre></td></tr></table></figure>
<p>会发现不得不先创造一个新数组。如果使用 <code>map</code> 则精简很多，因为其本身就会返回一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> peopleId = people.<span class="title function_">map</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">id</span>);</span><br></pre></td></tr></table></figure>
<p><code>map</code> 也常被用在构建二维数组中，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<h3 id="5-3-filter-函数"><a href="#5-3-filter-函数" class="headerlink" title="5.3 filter 函数"></a>5.3 <code>filter</code> 函数</h3><p><code>filter</code> 是过滤的意思，它对原数组的每个元素都遍历一次，同时返回判断结果（布尔值），将为 <code>true</code> 的元素放到新数组中。</p>
<p>例如，我们想把一个数组中的奇数提取出来，可通过 <code>filter</code> 实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i % <span class="number">2</span>);	<span class="comment">// 数值1会被转换成布尔值true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);	<span class="comment">// [ 1, 3, 5 ]</span></span><br></pre></td></tr></table></figure>
<p>再例如，对对象数组 <code>people</code>，我们想把名字中第二个字母为 a 的人提取出来，可通过 <code>filter</code> 实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> somePeople = people.<span class="title function_">filter</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">name</span>.<span class="title function_">charAt</span>(<span class="number">1</span>) === <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(somePeople);	<span class="comment">// [ &#123; id: 1, name: &#x27;Carlo&#x27; &#125;, &#123; id: 3, name: &#x27;Jack&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure>
<h3 id="5-4-find-函数"><a href="#5-4-find-函数" class="headerlink" title="5.4 find 函数"></a>5.4 <code>find</code> 函数</h3><p><code>find</code> 是寻找的意思，它对原数组的每个元素都遍历一次，同时返回判断结果（布尔值），将第一个为 <code>true</code> 的元素返回。</p>
<p>例如，对对象数组 <code>people</code>，我们想把 <code>id</code> 为 1 的人提取出来，通过 <code>filter</code> 也可实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> somePeople = people.<span class="title function_">filter</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">id</span> === <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(somePeople[<span class="number">0</span>]);	<span class="comment">// &#123; id: 1, name: &#x27;Carlo&#x27; &#125;</span></span><br></pre></td></tr></table></figure>
<p>如果通过 <code>for</code> 循环则是如下逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> person <span class="keyword">of</span> people) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person.<span class="property">id</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person);	<span class="comment">// &#123; id: 1, name: &#x27;Carlo&#x27; &#125;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会发现 <code>for-if-break</code> 是个连续的逻辑，否则会重复遍历。</p>
<p>如果使用 <code>find</code> 则精简很多，因为其本身就会返回所需的元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> person = people.<span class="title function_">find</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">id</span> === <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);	<span class="comment">// &#123; id: 1, name: &#x27;Carlo&#x27; &#125;</span></span><br></pre></td></tr></table></figure>
<p>注意：当 <code>filter</code> 找不到任何匹配项时，返回空数组；当 <code>find</code> 找不到任何匹配项时，返回 <code>undefined</code>。</p>
<h3 id="5-5-reduce-函数"><a href="#5-5-reduce-函数" class="headerlink" title="5.5 reduce 函数"></a>5.5 <code>reduce</code> 函数</h3><p><code>reduce</code> 可以理解为缩减，它把一个数组逐一缩减为一个值，可通过下面的例子理解。</p>
<p>对下面的对象数组 <code>people</code>，现在想知道每个人的分数总和，通过 <code>for</code> 循环是这样实现的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>, <span class="attr">points</span>: <span class="number">90</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>, <span class="attr">points</span>: <span class="number">95</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">points</span>: <span class="number">88</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> person <span class="keyword">of</span> people) &#123;</span><br><span class="line">  sum += person.<span class="property">points</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);	<span class="comment">// 273</span></span><br></pre></td></tr></table></figure>
<p><code>reduce</code> 函数传入两个参数，一个是回调函数（参数为初始变量与数组元素），另一个是初始变量的值，即：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>, <span class="attr">points</span>: <span class="number">90</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>, <span class="attr">points</span>: <span class="number">95</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">points</span>: <span class="number">88</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> sum = people.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, person</span>) =&gt;</span> sum + person.<span class="property">points</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);	<span class="comment">// 273</span></span><br></pre></td></tr></table></figure>
<p>逻辑是：先把 0 赋给 <code>sum</code>，再对 <code>people</code> 里的每个 <code>person</code> 做遍历，执行回调函数，并将每一步的返回值赋给 <code>sum</code>。</p>
<p>除累加外，我们还可以使用它进行大小比较。例如，我们想返回分数最高的人，可以这样实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Carlo&#x27;</span>, <span class="attr">points</span>: <span class="number">90</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>, <span class="attr">points</span>: <span class="number">95</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">points</span>: <span class="number">88</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> highest = people.<span class="title function_">reduce</span>(<span class="function">(<span class="params">highest, person</span>) =&gt;</span> (highest.<span class="property">points</span> || <span class="number">0</span>) &gt; person.<span class="property">points</span> ? highest : person, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(highest);	<span class="comment">// &#123; id: 2, name: &#x27;Bill&#x27;, points: 95 &#125;</span></span><br></pre></td></tr></table></figure>
<p>如果 <code>reduce</code> 没有给出初始变量的值，数组第一个变量会被赋给初始变量，同时从数组第二个元素开始遍历，注意以下代码的输出结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> sum1 = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, n, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([sum, n, i]);	<span class="comment">// [0,1,0]  [1,3,1]  [4,7,2]  [11,10,3]</span></span><br><span class="line">  <span class="keyword">return</span> sum + n;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1);	<span class="comment">// 21</span></span><br><span class="line"><span class="keyword">let</span> sum2 = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, n, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([sum, n, i]);	<span class="comment">// [1,3,1]  [4,7,2]  [11,10,3]</span></span><br><span class="line">  <span class="keyword">return</span> sum + n;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum2);	<span class="comment">// 21</span></span><br></pre></td></tr></table></figure>
<h3 id="5-6-结合使用"><a href="#5-6-结合使用" class="headerlink" title="5.6 结合使用"></a>5.6 结合使用</h3><p>以上函数可以通过链式编程的思想结合使用。</p>
<p>例如，对一个数组中小于 100 的数，将其扩大一倍再求和，可以这样实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">99</span>, <span class="number">123</span>, <span class="number">85</span>, <span class="number">3</span>, <span class="number">212</span>, <span class="number">56</span>];</span><br><span class="line"><span class="keyword">let</span> t = array.<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i &lt; <span class="number">100</span>).<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> i * <span class="number">2</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, i</span>) =&gt;</span> sum + i, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t);	<span class="comment">// 486</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中布尔值为 false 的几种情况</title>
    <url>/2021/12/13/several-cases-of-boolean-value-being-false-in-javascript/</url>
    <content><![CDATA[<p>前端开发经常需要用到 <code>if</code> 判断，下文归纳 JavaScript 中布尔值为 <code>false</code> 的几种情况，便于今后开发使用。</p>
<span id="more"></span>
<h2 id="1-一共六种情况"><a href="#1-一共六种情况" class="headerlink" title="1 一共六种情况"></a>1 一共六种情况</h2><ol>
<li><code>undefined</code>：未定义</li>
<li><code>null</code>：空值</li>
<li><code>false</code>：布尔值 <code>false</code>，注意字符串 <code>&#39;false&#39;</code> 为 <code>true</code></li>
<li>0：数字 0，注意字符串 <code>&#39;0&#39;</code> 为 <code>true</code></li>
<li><code>NaN</code>：非数值，例如 <code>Math.log(-1)</code>，注意 <code>typeof NaN</code> 为<code>number</code></li>
<li><code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>：空字符串，注意空格字符串 <code>&#39; &#39;</code> 为 <code>true</code></li>
</ol>
<h2 id="2-不同数据类型转换为-false-的情况"><a href="#2-不同数据类型转换为-false-的情况" class="headerlink" title="2 不同数据类型转换为 false 的情况"></a>2 不同数据类型转换为 <code>false</code> 的情况</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">转换为 <code>true</code></th>
<th style="text-align:center">转换为 <code>false</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Boolean</td>
<td style="text-align:center"><code>true</code></td>
<td style="text-align:center"><code>false</code></td>
</tr>
<tr>
<td style="text-align:center">String</td>
<td style="text-align:center">任何非空字符串</td>
<td style="text-align:center"><code>&#39;&#39;</code>（空字符串）</td>
</tr>
<tr>
<td style="text-align:center">Number</td>
<td style="text-align:center">任何非零数值（包括 <code>Infinity</code>，如 <code>1/0</code>）</td>
<td style="text-align:center">0 和 <code>NaN</code></td>
</tr>
<tr>
<td style="text-align:center">Object</td>
<td style="text-align:center">任何对象（包括空数组 <code>[]</code>、空对象 <code>&#123;&#125;</code>）</td>
<td style="text-align:center"><code>null</code></td>
</tr>
<tr>
<td style="text-align:center">Undefined</td>
<td style="text-align:center">/</td>
<td style="text-align:center"><code>undefined</code></td>
</tr>
</tbody>
</table>
</div>
<p><strong>说明：</strong></p>
<ol>
<li><p>使用取反运算符 <code>!</code> 和 <code>!!</code> 可将任何数据类型转换为布尔值，<code>!!</code> 为本身代表的布尔值，<code>!</code> 为相反布尔值。</p>
<p>例如 <code>1-2</code> 为 <code>-1</code>，<code>!(1-2)</code> 为 <code>false</code>，<code>!!(1-2)</code> 为 <code>true</code>。</p>
</li>
<li><p>以下是一些数据的求布尔值结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>);	<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="number">0</span>);	<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="string">&#x27;&#x27;</span>);	<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">null</span>);	<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">undefined</span>);	<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="title class_">NaN</span>);	<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="title class_">Infinity</span>);	<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!&#123;&#125;);	<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!![]);	<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-对空数组和空对象做判断"><a href="#3-对空数组和空对象做判断" class="headerlink" title="3 对空数组和空对象做判断"></a>3 对空数组和空对象做判断</h2><p>有时候需要对某个数组或对象做判断，判断其是否为空，可以通过如下方式：</p>
<ol>
<li><p>使用 <code>length</code> 属性，适用于数组，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [];</span><br><span class="line"><span class="keyword">let</span> array2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span> (array1.<span class="property">length</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array1 not empty&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (array2.<span class="property">length</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array2 not empty&#x27;</span>);	<span class="comment">// array2 not empty</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>for-in</code> 遍历和 <code>hasOwnProperty</code> 判断，并把遍历结果写成函数，适用于数组和对象，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [];</span><br><span class="line"><span class="keyword">let</span> array2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEmpty</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isEmpty</span>(array1)) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array1 is empty&#x27;</span>);	<span class="comment">// array1 is empty</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isEmpty</span>(array2)) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array2 is empty&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isEmpty</span>(obj1)) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1 is empty&#x27;</span>);	<span class="comment">// obj1 is empty</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isEmpty</span>(obj2)) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj2 is empty&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="4-出现-undefined-的几种情况"><a href="#4-出现-undefined-的几种情况" class="headerlink" title="4 出现 undefined 的几种情况"></a>4 出现 <code>undefined</code> 的几种情况</h2><ol>
<li><p>变量未定义，注意这种情况现在会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);	<span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>变量定义后未赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数形参未传值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x = &#x27;</span> + x);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y = &#x27;</span> + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// x = 1</span></span><br><span class="line"><span class="comment">// y = undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数未 <code>return</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>());	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数 <code>return</code> 没有值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>());	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象的属性或方法不存在</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">z</span>);	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组下标越界</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">5</span>]);	<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">1.5</span>]);	<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[-<span class="number">1</span>]);	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组 <code>find</code> 方法未找到元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span>&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === <span class="number">3</span>));	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="5-出现-null-的几种情况"><a href="#5-出现-null-的几种情况" class="headerlink" title="5 出现 null 的几种情况"></a>5 出现 <code>null</code> 的几种情况</h2><ol>
<li><p>获取 DOM 元素时未获取到指定元素对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;x&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(element);	<span class="comment">// null</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原型链的顶点，即 <code>Object.prototype.__proto__</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);	<span class="comment">// null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>正则捕获时未捕获到结果，包括：正则对象的 <code>exec</code> 方法未匹配、字符串的 <code>match</code> 方法未匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;xyz123ABC2&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> re1 = <span class="regexp">/[a-zA-Z]+(\d)/g</span>;</span><br><span class="line"><span class="keyword">const</span> re2 = <span class="regexp">/[a-c]+/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re1.<span class="title function_">exec</span>(string));	<span class="comment">// [ &#x27;xyz1&#x27;, &#x27;1&#x27;, index: 0, input: &#x27;xyz123ABC2&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re2.<span class="title function_">exec</span>(string));	<span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">match</span>(re1));	<span class="comment">// [ &#x27;xyz1&#x27;, &#x27;ABC2&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">match</span>(re2));	<span class="comment">// null</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 hexo-renderer-kramed 渲染冲突的部分问题</title>
    <url>/2021/08/14/solve-some-problems-of-hexo-renderer-kramed-rendering-conflicts/</url>
    <content><![CDATA[<p>因 <a href="https://www.npmjs.com/package/hexo-renderer-marked">hexo-renderer-marked</a> 不支持数学公式的渲染，其他渲染器又有一些问题，如 <a href="https://www.npmjs.com/package/hexo-renderer-pandoc">hexo-renderer-pandoc</a> 过于沉重，<a href="https://www.npmjs.com/package/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a> 对NexT主题支持不佳，因此选用 <a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a> 渲染器。本文解决了该渲染器在渲染 Markdown 及数学公式时遇到的部分问题。</p>
<span id="more"></span>
<h2 id="1-hexo-renderer-kramed-不能渲染-Todo-List"><a href="#1-hexo-renderer-kramed-不能渲染-Todo-List" class="headerlink" title="1 hexo-renderer-kramed 不能渲染 Todo List"></a>1 hexo-renderer-kramed 不能渲染 Todo List</h2><p>原来的渲染器 hexo-renderer-marked 是支持的，那就翻一下 <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked的GitHub仓库</a> 的 Pull Request。</p>
<p>发现在这个 <a href="https://github.com/hexojs/hexo-renderer-marked/pull/32">PR</a> 里，hexo-renderer-marked 加入了对 Todo List 的支持，那就拷贝这个PR中 <code>lib/renderer.js</code> 里新增的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Support To-Do List</span></span><br><span class="line"><span class="title class_">Renderer</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">listitem</span> = <span class="keyword">function</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\s*\[[x ]\]\s*/</span>.<span class="title function_">test</span>(text)) &#123;</span><br><span class="line">    text = text.<span class="title function_">replace</span>(<span class="regexp">/^\s*\[ \]\s*/</span>, <span class="string">&#x27;&lt;input type=&quot;checkbox&quot;&gt;&lt;/input&gt; &#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/^\s*\[x\]\s*/</span>, <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; checked&gt;&lt;/input&gt; &#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;li style=&quot;list-style: none&quot;&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/li&gt;\n&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;li&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/li&gt;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>加入到本地的 Hexo 根文件夹的 <code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code> 的第 19 行中。</p>
<p>保存后重新 <code>hexo clean</code>、<code>hexo g</code>，就渲染成功了。</p>
<p>其实这个解决方案不是我翻 PR 找到的，而是我在 GitHub 乱搜索时 <a href="https://github.com/wafer-li/wafer-li.github.io/blob/source/src/blog-corners/tech/tinkering/hexo/Hexo%20Experience.md">在这里</a> 找到的。本来并不指望解决这个问题的，又学到一招。</p>
<h2 id="2-hexo-renderer-kramed-渲染-MathJax-时与-Markdown-语法冲突"><a href="#2-hexo-renderer-kramed-渲染-MathJax-时与-Markdown-语法冲突" class="headerlink" title="2 hexo-renderer-kramed 渲染 MathJax 时与 Markdown 语法冲突"></a>2 hexo-renderer-kramed 渲染 MathJax 时与 Markdown 语法冲突</h2><p>关于如何修改语义冲突，网上的教程讲得很详细了，比如：</p>
<ul>
<li><a href="https://www.jianshu.com/p/d95a4795f3a8">hexo下LaTeX无法显示的解决方案 - zealscott - 简书</a></li>
<li><a href="https://murphypei.github.io/blog/2019/03/hexo-render-mathjax.html">解决hexo-next主题和mathjax下划线冲突问题 | 拾荒志</a></li>
</ul>
<p>但网上找到的教程通常只讲述了如何修改 <code>_</code> 和 <code>\\</code> 的冲突。我将我遇到的所有问题一一整理如下。</p>
<p>下文的问题通常是行内公式的问题，目前看来公式块受到的影响比较小。</p>
<h3 id="2-1-行内公式与行内代码冲突"><a href="#2-1-行内公式与行内代码冲突" class="headerlink" title="2.1 行内公式与行内代码冲突"></a>2.1 行内公式与行内代码冲突</h3><p><strong>问题描述</strong>：把行内公式作为行内代码输入时（如下），会显示异常，即 <code>`$</code> 被转义成 <code>$</code> 了。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`$ a+b $`</span></span><br></pre></td></tr></table></figure>
<p>翻一下 <a href="https://github.com/sun11/hexo-renderer-kramed">hexo-renderer-kramed 的文档</a>，发现作者写在这里了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210814-06.png" alt=""></p>
<p>所以要想输入行内代码中的公式，在 <code>$</code> 前后加上空格就行了：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">` $ a+b $ `</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-下划线-被转义为斜体而非-LaTeX-下标"><a href="#2-2-下划线-被转义为斜体而非-LaTeX-下标" class="headerlink" title="2.2 下划线 _ 被转义为斜体而非 LaTeX 下标"></a>2.2 下划线 <code>_</code> 被转义为斜体而非 LaTeX 下标</h3><p><strong>问题描述</strong>：当公式中出现多个下划线时，会被 kramed 渲染为 Markdown 斜体，导致公式显示异常。</p>
<p>Markdown 本身的语法是支持 <code>*</code> 和 <code>_</code> 都被转义为 <em>斜体</em> 的，所以我们可以取消掉 kramed 对 <code>_</code> 的转义。</p>
<p>打开本地 Hexo 根文件夹下的 <code>/node_modules/kramed/lib/rules/inline.js</code>，找到第 20 行如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">em</span>: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<p>就取消了对下划线 <code>_</code> 的转义。</p>
<p>以后使用斜体的话只用 <code>*</code> 符号就够了。如果 LaTeX 要使用大量 <code>*</code> 符号，可用 <code>\ast</code> 代替。</p>
<h3 id="2-3-反斜杠-被转义为-而非-LaTeX-换行"><a href="#2-3-反斜杠-被转义为-而非-LaTeX-换行" class="headerlink" title="2.3 反斜杠 \\ 被转义为 \ 而非 LaTeX 换行"></a>2.3 反斜杠 <code>\\</code> 被转义为 <code>\</code> 而非 LaTeX 换行</h3><p><strong>问题描述</strong>：当公式中出现 <code>\\</code> 表示换行时，会被 kramed 渲染为 <code>\</code>，导致公式显示异常。</p>
<p>取消掉对 <code>\\</code> 的转义就行了。</p>
<p>同上，找到 <code>inline.js</code> 中第 11 行如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([\\`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>
<p>就取消了对反斜杠 <code>\\</code> 的转义。</p>
<h3 id="2-4-LaTeX-紧贴符-不被转义"><a href="#2-4-LaTeX-紧贴符-不被转义" class="headerlink" title="2.4 LaTeX 紧贴符 \! 不被转义"></a>2.4 LaTeX 紧贴符 <code>\!</code> 不被转义</h3><p><strong>问题描述</strong>：当公式中出现 <code>\!</code> 表示紧贴符号时，会被 kramed 渲染为 <code>!</code>，导致公式显示异常。</p>
<p>同上，把 <code>escape:</code> 后的正则表达式中的 <code>!</code> 去掉即可，取消掉对 <code>\!</code> 的转义。</p>
<h3 id="2-5-反斜杠加竖线-被转义为-而非-LaTeX-双竖线"><a href="#2-5-反斜杠加竖线-被转义为-而非-LaTeX-双竖线" class="headerlink" title="2.5 反斜杠加竖线 \| 被转义为 | 而非 LaTeX 双竖线"></a>2.5 反斜杠加竖线 <code>\|</code> 被转义为 <code>|</code> 而非 LaTeX 双竖线</h3><p><strong>问题描述</strong>：当公式中出现 <code>\|</code> 表示紧贴符号时，会被 kramed 渲染为 <code>|</code>，导致公式显示异常。</p>
<p>真是个困扰了半天的 bug，上面的 <code>escape:</code> 后面也没有 <code>|</code> 啊。</p>
<p>找了我 n 个小时，原来还是 <code>inline.js</code> 代码的问题。</p>
<p>找到第 64 行如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="title function_">replace</span>(inline.<span class="property">escape</span>)(<span class="string">&#x27;])&#x27;</span>, <span class="string">&#x27;~|])&#x27;</span>)(),</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="title function_">replace</span>(inline.<span class="property">escape</span>)(<span class="string">&#x27;])&#x27;</span>, <span class="string">&#x27;~])&#x27;</span>)(),</span><br></pre></td></tr></table></figure>
<p>就取消了对 <code>\|</code> 的转义。</p>
<p>执行完以上步骤后，记得 <code>hexo clean</code>、<code>hexo g</code> 走一波。</p>
<p><strong>总结：哪里被 kramed 转义就检查 <code>escape</code> 对应的部分。</strong></p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><ul>
<li>多上 GitHub 看看原仓库的文档、issues、PR，会有收获的，实在不行直接搜，比百度好使。</li>
<li>熟悉流程，<strong>Hexo 的原理是根据渲染器，把 Markdown 语法转为 HTML 语法。</strong> 所以一些显示 bug 不一定是主题的问题，而很有可能是渲染器的问题。所以看看渲染器的源码总是有收获的。</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>技术</tag>
        <tag>技巧</tag>
        <tag>GitHub</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Hexo 博客手机端无法访问的问题</title>
    <url>/2021/08/14/solve-the-problem-that-mobile-terminal-of-hexo-blog-cannot-be-accessed/</url>
    <content><![CDATA[<p><strong>问题描述</strong>：已经部署到 GitHub Pages 的 Hexo 博客，电脑端可以根据域名访问，手机端无法访问。</p>
<span id="more"></span>
<h3 id="1-原因"><a href="#1-原因" class="headerlink" title="1 原因"></a>1 原因</h3><p>通常是 GitHub Pages 的 ip 地址解析出现的 bug。电脑端可以正常访问大概率是因为 <del>科学上网的缘故</del> 存在 DNS 缓存，手机端无法访问是因为拒绝了域名解析所用的 ip。</p>
<h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><h4 id="2-1-重新-ping-一下-github-io-的-ip"><a href="#2-1-重新-ping-一下-github-io-的-ip" class="headerlink" title="2.1 重新 ping 一下 github.io 的 ip"></a>2.1 重新 ping 一下 github.io 的 ip</h4><p>打开 cmd，输入以下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping kaluojushi.github.io</span><br></pre></td></tr></table></figure>
<p><code>ping</code> 后面跟 GitHub Pages 的地址，如 <code>username.github.io</code>。</p>
<p>可以看到当前的 ip 是 185.199.109.153。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210814-01.png" alt=""></p>
<h4 id="2-2-修改域名解析"><a href="#2-2-修改域名解析" class="headerlink" title="2.2 修改域名解析"></a>2.2 修改域名解析</h4><p>打开域名 DNS 解析商（我的是腾讯云），修改 A 记录的记录值为上面 ping 到的 ip。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210814-02.png" alt=""></p>
<h4 id="2-3-验证"><a href="#2-3-验证" class="headerlink" title="2.3 验证"></a>2.3 验证</h4><p>打开<a href="http://tool.chinaz.com/dns/">站长工具 DNS 查询</a>，选择 A 类型，输入域名，查看解析结果，如果为刚才修改的结果就表示成功（如果未成功需要等待一段时间）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210814-03.png" alt=""></p>
<p>至此电脑端和手机端应该都可以访问了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210814-04.png" alt="电脑端"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaluojushi/Corecabin-Picbed/img/20210814-05.png" alt="手机端"></p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h3><p>此问题其实与 Hexo 无关，还是国内访问 GitHub 及其所提供的服务不稳定的 bug。再有问题就再换 A 记录！</p>
<p>不知道一条域名是否可以添加多条 A 记录，没有深入探究，在此暂时不表。</p>
<p>用 <a href="https://gitee.com/help/articles/4136">Gitee Pages</a> 代替 GitHub Pages 其实也是备选项之一，对国内服务的支持更好。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>技术</tag>
        <tag>技巧</tag>
        <tag>GitHub</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中 this 的指向问题</title>
    <url>/2022/04/17/the-pointing-of-this-in-javascript/</url>
    <content><![CDATA[<p>面试常考题，很多初学者会被 JavaScript 中众多不同情况的 <code>this</code> 指向搞迷糊。本质上，<code>this</code> 始终指向一个对象。</p>
<span id="more"></span>
<h2 id="0-太长不看版"><a href="#0-太长不看版" class="headerlink" title="0 太长不看版"></a>0 太长不看版</h2><p>只要弄明白，<code>this</code> 在函数中被使用，在定义时不确定指向，<strong>调用时</strong> 才能确定指向（箭头函数除外），并始终 <strong>指向一个对象</strong>，可以简单分为以下 6 种情况：</p>
<ol>
<li><strong>普通函数调用</strong>，指向全局对象</li>
<li><strong>对象方法调用</strong>，谁调用指向谁，只看调用不看引用</li>
<li><strong>构造函数调用</strong>，指向新构造的实例，尽管可能不被构造函数返回</li>
<li><strong>遇 <code>apply</code>、<code>call</code>、<code>bind</code></strong>，改变指向</li>
<li><strong>匿名函数调用</strong>，一般指向全局对象</li>
<li><strong>箭头函数调用</strong>，指向定义箭头函数作用域的 <code>this</code></li>
</ol>
<h2 id="1-普通函数调用"><a href="#1-普通函数调用" class="headerlink" title="1 普通函数调用"></a>1 普通函数调用</h2><p>普通函数调用时，<code>this</code> 指向全局对象，在浏览器中，全局对象为 <code>window</code>。看示例：</p>
<h3 id="1-1-var-定义变量"><a href="#1-1-var-定义变量" class="headerlink" title="1.1 var 定义变量"></a>1.1 <code>var</code> 定义变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;var&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;fn-var&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);	<span class="comment">// window对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// var</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<p><code>fn</code> 作为普通函数被调用，<code>this</code> 指向全局对象 <code>window</code>。</p>
<p><code>var</code> 定义的 <strong>全局变量</strong> 视为全局对象的属性，因此 <code>this.name</code> 输出全局对象 <code>window</code> 的 <code>name</code> 属性，即 <code>&quot;var&quot;</code>。</p>
<h3 id="1-2-let-定义变量"><a href="#1-2-let-定义变量" class="headerlink" title="1.2 let 定义变量"></a>1.2 <code>let</code> 定义变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;let&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;fn-let&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);	<span class="comment">// window对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<p><code>let</code> 定义的变量不会成为全局对象的属性，因此 <code>this.name</code> 即全局对象 <code>window</code> 的 <code>name</code> 属性不存在，输出 <code>undefined</code>。</p>
<h3 id="1-3-全局对象属性"><a href="#1-3-全局对象属性" class="headerlink" title="1.3 全局对象属性"></a>1.3 全局对象属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;win&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);	<span class="comment">// window对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// win</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<p>毫无疑问，<code>this.name</code> 输出全局对象 <code>window</code> 的 <code>name</code> 属性，即 <code>&quot;win&quot;</code>。</p>
<h2 id="2-对象方法调用"><a href="#2-对象方法调用" class="headerlink" title="2 对象方法调用"></a>2 对象方法调用</h2><p>函数作为对象方法被调用时，哪个对象调用，<code>this</code> 就指向谁。</p>
<p>如果函数变量被赋值给其他变量，依然是谁调用指向谁，而不考虑函数来源 <strong>（只看调用，不看引用）</strong>。</p>
<h3 id="2-1-对象直接调用自有方法"><a href="#2-1-对象直接调用自有方法" class="headerlink" title="2.1 对象直接调用自有方法"></a>2.1 对象直接调用自有方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);	<span class="comment">// 15</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<p><code>obj</code> 对象直接调用自有方法 <code>fn</code>，<code>fn</code> 中的 <code>this</code> 就指向调用它的 <code>obj</code> 对象。</p>
<h3 id="2-2-对象多层调用自有方法"><a href="#2-2-对象多层调用自有方法" class="headerlink" title="2.2 对象多层调用自有方法"></a>2.2 对象多层调用自有方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">inner</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">inner</span>.<span class="title function_">fn</span>();	<span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>尽管方法 <code>fn</code> 是被最外层对象 <code>obj</code> 间接调用，但 <code>fn</code> 中的 <code>this</code> 指向最近的上一层对象 <code>inner</code>（即直接调用它的对象）。</p>
<h3 id="2-3-函数变量被赋值给其他对象的属性"><a href="#2-3-函数变量被赋值给其他对象的属性" class="headerlink" title="2.3 函数变量被赋值给其他对象的属性"></a>2.3 函数变量被赋值给其他对象的属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="property">fn2</span> = obj.<span class="property">fn</span>;</span><br><span class="line">obj2.<span class="title function_">fn2</span>();	<span class="comment">// obj2 20</span></span><br></pre></td></tr></table></figure>
<p>尽管方法 <code>fn2</code> 来源于对象 <code>obj</code> 的方法 <code>fn</code>，但依然是 <strong>「谁调用指向谁」</strong>，方法被 <code>obj2</code> 调用，<code>this</code> 就指向 <code>obj2</code>。</p>
<h3 id="2-4-原型方法"><a href="#2-4-原型方法" class="headerlink" title="2.4 原型方法"></a>2.4 原型方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getAge</span>();	<span class="comment">// 15</span></span><br><span class="line">obj2.<span class="title function_">getAge</span>();	<span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>这个就很好理解了～虽然 <code>getAge</code> 是原型对象 <code>Object.prototype</code> 的方法，但实例 <code>obj</code> 和 <code>obj2</code> 进行了调用，方法中的 <code>this</code> 就指向它们。</p>
<p>实际上，这就是原型方法的特点之一：<strong>全体实例的可复用方法</strong>。</p>
<h3 id="2-5-函数变量被赋值给普通变量"><a href="#2-5-函数变量被赋值给普通变量" class="headerlink" title="2.5 函数变量被赋值给普通变量"></a>2.5 函数变量被赋值给普通变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;var&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1 = obj.<span class="property">getName</span>;</span><br><span class="line"><span class="keyword">let</span> fn2 = obj2.<span class="property">getAge</span>;</span><br><span class="line"><span class="title function_">fn1</span>();	<span class="comment">// var</span></span><br><span class="line"><span class="title function_">fn2</span>();	<span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<p>这时，<code>fn1</code> 和 <code>fn2</code> 实际上是作为普通函数调用，根据 <strong>「谁调用指向谁」</strong> 的原则，它们当中的 <code>this</code> 指向全局对象 <code>window</code>，输出全局对象的属性值 <code>&quot;var&quot;</code> 和 <code>123</code>。</p>
<p>总结：无论嵌套几层，无论如何赋值，无论函数来源，谁调用了函数/方法，<code>this</code> 就指向谁。</p>
<h2 id="3-构造函数调用"><a href="#3-构造函数调用" class="headerlink" title="3 构造函数调用"></a>3 构造函数调用</h2><p>一般情况下，<code>this</code> 指向构造函数 <code>new</code> 出来的对象。</p>
<h3 id="3-1-一般情况"><a href="#3-1-一般情况" class="headerlink" title="3.1 一般情况"></a>3.1 一般情况</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;me&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">15</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// me</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);	<span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);	<span class="comment">// A &#123; name: &#x27;me&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>);	<span class="comment">// me</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>);	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>这也是最常见的过程，类似于定义对象的自有属性。</p>
<blockquote>
<p>面试常考题：通过 <code>new</code> 创建构造函数的一个实例时，发生了什么？</p>
<p>以 <code>var a = new A()</code> 为例：</p>
<ol>
<li>创建一个空对象：<code>var obj = &#123;&#125;</code></li>
<li>让构造器函数 <code>A</code> 的 <code>this</code> 指向对象 <code>obj</code>，并执行 <code>A</code> 中的函数体：<code>var result = A.call(obj)</code></li>
<li>设置原型链，让对象 <code>obj</code> 的 <code>__proto__</code> 属性指向构造器函数 <code>A</code> 的原型对象：<code>obj.__proto__ = A.prototype</code></li>
<li>判断构造器函数 <code>A</code> 的返回类型，如果是值类型，结果返回 <code>obj</code>，如果是引用类型（<code>null</code> 除外），返回引用类型的对象：<code>a = result &amp;&amp; (typeof result === &quot;object&quot;) ? result : obj</code></li>
</ol>
<p>如果要手写一个 <code>new</code> 函数，可能是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">new</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">call</span>(obj);</span><br><span class="line">  obj.<span class="property">__proto__</span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">return</span> result &amp;&amp; (<span class="keyword">typeof</span> result === <span class="string">&quot;object&quot;</span>) ? result : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-2-构造函数当作普通函数使用"><a href="#3-2-构造函数当作普通函数使用" class="headerlink" title="3.2 构造函数当作普通函数使用"></a>3.2 构造函数当作普通函数使用</h3><p>毫无疑问，<code>this</code> 指向全局对象 <code>window</code>。<em>这种做法在程序中显然是不推荐的，但做题时要知道 <code>this</code> 指向谁。</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;var&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;me&quot;</span>;	<span class="comment">// 这里把全局对象的name属性修改了</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">15</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// me</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);	<span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>();</span><br></pre></td></tr></table></figure>
<h3 id="3-3-构造函数返回值的情况"><a href="#3-3-构造函数返回值的情况" class="headerlink" title="3.3 构造函数返回值的情况"></a>3.3 构造函数返回值的情况</h3><p>一般情况下，构造函数是不需要显式返回值的，通过 <code>new</code> 执行构造函数的返回值是新生成的实例。</p>
<p>但是，如果构造函数返回一个对象（包括空对象），<code>new</code> 执行构造函数的返回值不再是新生成的实例，而是该对象。</p>
<p>构造函数执行过程中，<code>this</code> 依然试图指向构造函数的实例，虽然这个实例无法返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;me&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// me</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);	<span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);	<span class="comment">// &#123; age: 20 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>);	<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>);	<span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>如果构造函数返回的是基本类型、<code>undefined</code>、<code>null</code> 时，<code>new</code> 执行构造函数的返回值依然是新生成的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;me&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);	<span class="comment">// me</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);	<span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);	<span class="comment">// A &#123; name: &#x27;me&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>);	<span class="comment">// me</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>);	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="4-apply、call、bind-调用"><a href="#4-apply、call、bind-调用" class="headerlink" title="4 apply、call、bind 调用"></a>4 <code>apply</code>、<code>call</code>、<code>bind</code> 调用</h2><p>三者均可改变 <code>this</code> 的指向给第一个参数。区别在于：</p>
<ul>
<li><code>apply</code> 的第二个参数为可迭代对象</li>
<li><code>call</code> 的参数不固定</li>
<li><code>bind</code> 除返回一个函数外，与 <code>call</code> 并无不同，它需要调用才可以执行，其他二者直接执行函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot; &quot;</span> + x + <span class="string">&quot; &quot;</span> + y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);	<span class="comment">// 15 1 2</span></span><br><span class="line">obj.<span class="property">fn</span>.<span class="title function_">apply</span>(obj2, [<span class="number">3</span>, <span class="number">4</span>]);	<span class="comment">// 20 3 4</span></span><br><span class="line">obj.<span class="property">fn</span>.<span class="title function_">call</span>(obj2, <span class="number">5</span>, <span class="number">6</span>);	<span class="comment">// 20 5 6</span></span><br><span class="line">obj.<span class="property">fn</span>.<span class="title function_">call</span>(obj2, [<span class="number">5</span>, <span class="number">6</span>]);	<span class="comment">// 20 5,6 undefined</span></span><br><span class="line">obj.<span class="property">fn</span>.<span class="title function_">bind</span>(obj2, <span class="number">7</span>, <span class="number">8</span>)();	<span class="comment">// 20 7 8</span></span><br></pre></td></tr></table></figure>
<p>注意以上示例 12、13 行的区别，第 13 行 <code>[5, 6]</code> 被当做一个参数传给形参 <code>x</code>，形参 <code>y</code> 得到 <code>undefined</code>。</p>
<h2 id="5-匿名函数调用"><a href="#5-匿名函数调用" class="headerlink" title="5 匿名函数调用"></a>5 匿名函数调用</h2><p>匿名函数不属于任何对象，它的 <code>this</code> 一般指向全局对象。</p>
<h3 id="5-1-一般情况"><a href="#5-1-一般情况" class="headerlink" title="5.1 一般情况"></a>5.1 一般情况</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">inner</span>: &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()();	<span class="comment">// window对象</span></span><br><span class="line">obj.<span class="property">inner</span>.<span class="title function_">fn</span>()();	<span class="comment">// window对象</span></span><br></pre></td></tr></table></figure>
<p>无论谁调用、无论如何调用，这里的匿名函数中的 <code>this</code> 指向全局对象 <code>window</code>。</p>
<h3 id="5-2-定时器回调"><a href="#5-2-定时器回调" class="headerlink" title="5.2 定时器回调"></a>5.2 定时器回调</h3><p>定时器回调函数中，<code>this</code> 指向全局对象。因此如果需要改变定时器回调函数中 <code>this</code> 的指向，需要使用变量提前存储 <code>this</code> 的指向。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>();	<span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<p>上述代码中，<code>this</code> 指向全局对象 <code>window</code>，因此输出全局变量 <code>age</code> 的值 <code>123</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">age</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>();	<span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p>上述代码中，使用 <code>that</code> 提前存储了 <code>fn</code> 中 <code>this</code> 的指向，而根据第 2 节的内容，调用 <code>obj.fn()</code> 时 <code>fn</code> 中的 <code>this</code> 指向 <code>obj</code>，因此定时器回调函数中能输出 <code>obj</code> 的 <code>age</code> 属性值 <code>15</code>。</p>
<h3 id="5-3-事件绑定"><a href="#5-3-事件绑定" class="headerlink" title="5.3 事件绑定"></a>5.3 事件绑定</h3><p>注意，事件绑定时，<code>this</code> 指向事件源。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);	<span class="comment">// btn对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);	<span class="comment">// btn对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果要清除绑定事件，第一种方法可以通过 <code>btn.onclick = null</code> 实现，第二种方法可以调用 <code>removeEventListener</code> 方法。</p>
<p><strong>但是！</strong> 如果下面这么做，移除是失败的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击事件&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击事件&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>创建的两个匿名函数是独立的，彼此没有关系，自然无法被移除。因此，使用 <code>addEventListener</code> 绑定事件时，建议传入具名的函数变量，而避免使用匿名函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, fn);</span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, fn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击事件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6 箭头函数"></a>6 箭头函数</h2><p>箭头函数非常特殊，它没有自己的 <code>this</code>，而是会寻找 <strong>定义</strong> 箭头函数的作用域中 <code>this</code> 的指向。</p>
<p>箭头函数中的 <code>this</code> 在其定义时就已确定，与谁调用无关！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);	<span class="comment">// window对象</span></span><br></pre></td></tr></table></figure>
<p>这个没什么问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()();	<span class="comment">// window</span></span><br></pre></td></tr></table></figure>
<p><code>this</code> 会寻找定义箭头函数的作用域（即 <code>return</code> 的匿名函数）中 <code>this</code> 的指向，因此指向 <code>window</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()();	<span class="comment">// obj</span></span><br></pre></td></tr></table></figure>
<p><code>this</code> 会寻找定义箭头函数的作用域（即 <code>return</code> 的箭头函数）中 <code>this</code> 的指向，由于外层仍是箭头函数，继续向上寻找，直到找到 <code>fn</code> 作用域中的 <code>this</code> 且指向为 <code>obj</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;me&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()();	<span class="comment">// window对象 window对象</span></span><br><span class="line"><span class="keyword">let</span> fn2 = fn.<span class="title function_">call</span>(obj);	<span class="comment">// &#123; name: &#x27;me&#x27; &#125;</span></span><br><span class="line"><span class="title function_">fn2</span>();	<span class="comment">// &#123; name: &#x27;me&#x27; &#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第 8 行，<code>fn</code> 中的两个 <code>this</code> 都指向全局对象 <code>window</code>，输出两次 <code>window</code> 对象。</li>
<li>第 9 行，<code>fn</code>中的 <code>this</code> 被 <code>call</code> 改变指向，此时 <code>this</code> 指向 <code>obj</code>，调用一次 <code>fn</code> 函数，输出 <code>obj</code> 即 <code>&#123; name: &#39;me&#39; &#125;</code></li>
<li>第 10 行，<code>fn2</code> 是一个箭头函数，在第 9 行中，它的 <code>this</code> 被改变指向为 <code>obj</code>，因此此处输出 <code>obj</code> 即 <code>&#123; name: &#39;me&#39; &#125;</code></li>
</ul>
<p><em>为什么第 10 行不是输出 <code>window</code> 对象？执行第 10 行时，定义箭头函数的 <code>fn</code> 作用域中的 <code>this</code> 应该指向 <code>window</code> 对象啊。</em></p>
<p>箭头函数只看它定义时，当前作用域的 <code>this</code> 指向什么。第 6 行，箭头函数是在 <code>fn</code> 函数体内被定义的，因此第 9 行执行后，在定义箭头函数时，先是把内部的 <code>this</code> 更改为 <code>obj</code>，再返回给 <code>fn2</code>。这样 <code>fn2</code> 调用时（无论如何调用），都输出 <code>obj</code> 对象。</p>
<h2 id="7-面试题解析"><a href="#7-面试题解析" class="headerlink" title="7 面试题解析"></a>7 面试题解析</h2><h3 id="7-1-字节跳动面试题"><a href="#7-1-字节跳动面试题" class="headerlink" title="7.1 字节跳动面试题"></a>7.1 字节跳动面试题</h3><p>解释以下代码的输出：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;bytedance&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getA</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="keyword">let</span> funA = a.<span class="property">getA</span>;</span><br><span class="line"><span class="title function_">funA</span>();</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">undefined</span><br><span class="line">123</span><br><span class="line">undefined</span><br><span class="line">bytedance</span><br><span class="line">Object [window]</span><br></pre></td></tr></table></figure>
<ul>
<li>第 13 行，<code>new</code> 一个 <code>A</code> 的实例，程序开始执行 <code>A()</code></li>
<li>第 3 行，由于第 5 行的变量声明 <code>var age</code> 被提升至 <strong>函数顶端</strong>，因此此处 <strong>输出 <code>undefined</code></strong></li>
<li>第 6 行，判断 <code>this</code> 指向的是 <code>a</code> 实例，此处 <strong>输出定义的 <code>this.name</code> 即 123</strong></li>
<li>第 7 行，由于 <code>this</code> 指向的 <code>a</code> 实例没有 <code>name</code> 属性，因此此处 <strong>输出 <code>undefined</code></strong></li>
<li>第 14 行，将 <code>a.getA</code> 作为一个函数对象赋值给变量 <code>funA</code> 并在第 15 行直接调用，程序开始执行 <code>getA()</code></li>
<li>第 10 行，判断 <code>this</code> 指向的是全局对象 <code>window</code>，因此此处 <strong>输出全局对象的 <code>name</code> 属性</strong>，而 <code>var</code> 定义的全局变量为全局对象的属性，即输出 <code>&quot;bytedance&quot;</code></li>
<li>第 11 行，同上，此处 <strong>输出全局对象 <code>window</code></strong></li>
</ul>
<p><strong>扩展：</strong> 函数对象自带 <code>name</code> 属性，且值为本身的名称，如 <code>A.name</code> 返回 <code>&quot;A&quot;</code>。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://www.cnblogs.com/chengxs/p/8679313.html">javascript中this的指向问题 - saucxs - 博客园</a></li>
<li><a href="https://www.cnblogs.com/pssp/p/5216085.html">彻底理解js中this的指向，不必硬背。 - 追梦子 - 博客园</a></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
